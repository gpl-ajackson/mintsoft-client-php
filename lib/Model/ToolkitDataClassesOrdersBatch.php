<?php
/**
 * ToolkitDataClassesOrdersBatch
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersBatch Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersBatch implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.Batch';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reference' => 'string',
        'number_of_orders' => 'int',
        'mobile_picking_type' => 'string',
        'mobile_picking_priority' => 'int',
        'assigned_user' => 'string',
        'picking_started' => 'bool',
        'picking_complete' => 'bool',
        'despatched' => 'bool',
        'items_skipped' => 'bool',
        'assigned_tote' => 'string',
        'created' => '\DateTime',
        'warehouse_id' => 'int',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reference' => null,
        'number_of_orders' => 'int32',
        'mobile_picking_type' => null,
        'mobile_picking_priority' => 'int32',
        'assigned_user' => null,
        'picking_started' => null,
        'picking_complete' => null,
        'despatched' => null,
        'items_skipped' => null,
        'assigned_tote' => null,
        'created' => 'date-time',
        'warehouse_id' => 'int32',
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reference' => 'Reference',
        'number_of_orders' => 'NumberOfOrders',
        'mobile_picking_type' => 'MobilePickingType',
        'mobile_picking_priority' => 'MobilePickingPriority',
        'assigned_user' => 'AssignedUser',
        'picking_started' => 'PickingStarted',
        'picking_complete' => 'PickingComplete',
        'despatched' => 'Despatched',
        'items_skipped' => 'ItemsSkipped',
        'assigned_tote' => 'AssignedTote',
        'created' => 'Created',
        'warehouse_id' => 'WarehouseId',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reference' => 'setReference',
        'number_of_orders' => 'setNumberOfOrders',
        'mobile_picking_type' => 'setMobilePickingType',
        'mobile_picking_priority' => 'setMobilePickingPriority',
        'assigned_user' => 'setAssignedUser',
        'picking_started' => 'setPickingStarted',
        'picking_complete' => 'setPickingComplete',
        'despatched' => 'setDespatched',
        'items_skipped' => 'setItemsSkipped',
        'assigned_tote' => 'setAssignedTote',
        'created' => 'setCreated',
        'warehouse_id' => 'setWarehouseId',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reference' => 'getReference',
        'number_of_orders' => 'getNumberOfOrders',
        'mobile_picking_type' => 'getMobilePickingType',
        'mobile_picking_priority' => 'getMobilePickingPriority',
        'assigned_user' => 'getAssignedUser',
        'picking_started' => 'getPickingStarted',
        'picking_complete' => 'getPickingComplete',
        'despatched' => 'getDespatched',
        'items_skipped' => 'getItemsSkipped',
        'assigned_tote' => 'getAssignedTote',
        'created' => 'getCreated',
        'warehouse_id' => 'getWarehouseId',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['number_of_orders'] = isset($data['number_of_orders']) ? $data['number_of_orders'] : null;
        $this->container['mobile_picking_type'] = isset($data['mobile_picking_type']) ? $data['mobile_picking_type'] : null;
        $this->container['mobile_picking_priority'] = isset($data['mobile_picking_priority']) ? $data['mobile_picking_priority'] : null;
        $this->container['assigned_user'] = isset($data['assigned_user']) ? $data['assigned_user'] : null;
        $this->container['picking_started'] = isset($data['picking_started']) ? $data['picking_started'] : null;
        $this->container['picking_complete'] = isset($data['picking_complete']) ? $data['picking_complete'] : null;
        $this->container['despatched'] = isset($data['despatched']) ? $data['despatched'] : null;
        $this->container['items_skipped'] = isset($data['items_skipped']) ? $data['items_skipped'] : null;
        $this->container['assigned_tote'] = isset($data['assigned_tote']) ? $data['assigned_tote'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets number_of_orders
     *
     * @return int
     */
    public function getNumberOfOrders()
    {
        return $this->container['number_of_orders'];
    }

    /**
     * Sets number_of_orders
     *
     * @param int $number_of_orders number_of_orders
     *
     * @return $this
     */
    public function setNumberOfOrders($number_of_orders)
    {
        $this->container['number_of_orders'] = $number_of_orders;

        return $this;
    }

    /**
     * Gets mobile_picking_type
     *
     * @return string
     */
    public function getMobilePickingType()
    {
        return $this->container['mobile_picking_type'];
    }

    /**
     * Sets mobile_picking_type
     *
     * @param string $mobile_picking_type mobile_picking_type
     *
     * @return $this
     */
    public function setMobilePickingType($mobile_picking_type)
    {
        $this->container['mobile_picking_type'] = $mobile_picking_type;

        return $this;
    }

    /**
     * Gets mobile_picking_priority
     *
     * @return int
     */
    public function getMobilePickingPriority()
    {
        return $this->container['mobile_picking_priority'];
    }

    /**
     * Sets mobile_picking_priority
     *
     * @param int $mobile_picking_priority mobile_picking_priority
     *
     * @return $this
     */
    public function setMobilePickingPriority($mobile_picking_priority)
    {
        $this->container['mobile_picking_priority'] = $mobile_picking_priority;

        return $this;
    }

    /**
     * Gets assigned_user
     *
     * @return string
     */
    public function getAssignedUser()
    {
        return $this->container['assigned_user'];
    }

    /**
     * Sets assigned_user
     *
     * @param string $assigned_user assigned_user
     *
     * @return $this
     */
    public function setAssignedUser($assigned_user)
    {
        $this->container['assigned_user'] = $assigned_user;

        return $this;
    }

    /**
     * Gets picking_started
     *
     * @return bool
     */
    public function getPickingStarted()
    {
        return $this->container['picking_started'];
    }

    /**
     * Sets picking_started
     *
     * @param bool $picking_started picking_started
     *
     * @return $this
     */
    public function setPickingStarted($picking_started)
    {
        $this->container['picking_started'] = $picking_started;

        return $this;
    }

    /**
     * Gets picking_complete
     *
     * @return bool
     */
    public function getPickingComplete()
    {
        return $this->container['picking_complete'];
    }

    /**
     * Sets picking_complete
     *
     * @param bool $picking_complete picking_complete
     *
     * @return $this
     */
    public function setPickingComplete($picking_complete)
    {
        $this->container['picking_complete'] = $picking_complete;

        return $this;
    }

    /**
     * Gets despatched
     *
     * @return bool
     */
    public function getDespatched()
    {
        return $this->container['despatched'];
    }

    /**
     * Sets despatched
     *
     * @param bool $despatched despatched
     *
     * @return $this
     */
    public function setDespatched($despatched)
    {
        $this->container['despatched'] = $despatched;

        return $this;
    }

    /**
     * Gets items_skipped
     *
     * @return bool
     */
    public function getItemsSkipped()
    {
        return $this->container['items_skipped'];
    }

    /**
     * Sets items_skipped
     *
     * @param bool $items_skipped items_skipped
     *
     * @return $this
     */
    public function setItemsSkipped($items_skipped)
    {
        $this->container['items_skipped'] = $items_skipped;

        return $this;
    }

    /**
     * Gets assigned_tote
     *
     * @return string
     */
    public function getAssignedTote()
    {
        return $this->container['assigned_tote'];
    }

    /**
     * Sets assigned_tote
     *
     * @param string $assigned_tote assigned_tote
     *
     * @return $this
     */
    public function setAssignedTote($assigned_tote)
    {
        $this->container['assigned_tote'] = $assigned_tote;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


