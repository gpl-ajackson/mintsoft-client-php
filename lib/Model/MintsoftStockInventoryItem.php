<?php
/**
 * ToolkitDataClassesStockInventoryItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockInventoryItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftStockInventoryItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.InventoryItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_id' => 'int',
        'stock_level' => 'int',
        'allocated' => 'int',
        'on_hand' => 'int',
        'off_hand' => 'int',
        'awaiting_replen' => 'int',
        'on_order' => 'int',
        'required_by_back_order' => 'int',
        'in_quarantine' => 'int',
        'in_transit' => 'int',
        'in_transition' => 'int',
        'scrapped' => 'int',
        'sku' => 'string',
        'warehouse_id' => 'int',
        'location_id' => 'int',
        'breakdown' => '\Swagger\Client\Model\MintsoftStockAPIStockLevelBreakdown[]',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_id' => 'int32',
        'stock_level' => 'int32',
        'allocated' => 'int32',
        'on_hand' => 'int32',
        'off_hand' => 'int32',
        'awaiting_replen' => 'int32',
        'on_order' => 'int32',
        'required_by_back_order' => 'int32',
        'in_quarantine' => 'int32',
        'in_transit' => 'int32',
        'in_transition' => 'int32',
        'scrapped' => 'int32',
        'sku' => null,
        'warehouse_id' => 'int32',
        'location_id' => 'int32',
        'breakdown' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'ProductId',
        'stock_level' => 'StockLevel',
        'allocated' => 'Allocated',
        'on_hand' => 'OnHand',
        'off_hand' => 'OffHand',
        'awaiting_replen' => 'AwaitingReplen',
        'on_order' => 'OnOrder',
        'required_by_back_order' => 'RequiredByBackOrder',
        'in_quarantine' => 'InQuarantine',
        'in_transit' => 'InTransit',
        'in_transition' => 'InTransition',
        'scrapped' => 'Scrapped',
        'sku' => 'SKU',
        'warehouse_id' => 'WarehouseId',
        'location_id' => 'LocationId',
        'breakdown' => 'Breakdown',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'stock_level' => 'setStockLevel',
        'allocated' => 'setAllocated',
        'on_hand' => 'setOnHand',
        'off_hand' => 'setOffHand',
        'awaiting_replen' => 'setAwaitingReplen',
        'on_order' => 'setOnOrder',
        'required_by_back_order' => 'setRequiredByBackOrder',
        'in_quarantine' => 'setInQuarantine',
        'in_transit' => 'setInTransit',
        'in_transition' => 'setInTransition',
        'scrapped' => 'setScrapped',
        'sku' => 'setSku',
        'warehouse_id' => 'setWarehouseId',
        'location_id' => 'setLocationId',
        'breakdown' => 'setBreakdown',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'stock_level' => 'getStockLevel',
        'allocated' => 'getAllocated',
        'on_hand' => 'getOnHand',
        'off_hand' => 'getOffHand',
        'awaiting_replen' => 'getAwaitingReplen',
        'on_order' => 'getOnOrder',
        'required_by_back_order' => 'getRequiredByBackOrder',
        'in_quarantine' => 'getInQuarantine',
        'in_transit' => 'getInTransit',
        'in_transition' => 'getInTransition',
        'scrapped' => 'getScrapped',
        'sku' => 'getSku',
        'warehouse_id' => 'getWarehouseId',
        'location_id' => 'getLocationId',
        'breakdown' => 'getBreakdown',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['stock_level'] = isset($data['stock_level']) ? $data['stock_level'] : null;
        $this->container['allocated'] = isset($data['allocated']) ? $data['allocated'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['off_hand'] = isset($data['off_hand']) ? $data['off_hand'] : null;
        $this->container['awaiting_replen'] = isset($data['awaiting_replen']) ? $data['awaiting_replen'] : null;
        $this->container['on_order'] = isset($data['on_order']) ? $data['on_order'] : null;
        $this->container['required_by_back_order'] = isset($data['required_by_back_order']) ? $data['required_by_back_order'] : null;
        $this->container['in_quarantine'] = isset($data['in_quarantine']) ? $data['in_quarantine'] : null;
        $this->container['in_transit'] = isset($data['in_transit']) ? $data['in_transit'] : null;
        $this->container['in_transition'] = isset($data['in_transition']) ? $data['in_transition'] : null;
        $this->container['scrapped'] = isset($data['scrapped']) ? $data['scrapped'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['breakdown'] = isset($data['breakdown']) ? $data['breakdown'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets stock_level
     *
     * @return int
     */
    public function getStockLevel()
    {
        return $this->container['stock_level'];
    }

    /**
     * Sets stock_level
     *
     * @param int $stock_level stock_level
     *
     * @return $this
     */
    public function setStockLevel($stock_level)
    {
        $this->container['stock_level'] = $stock_level;

        return $this;
    }

    /**
     * Gets allocated
     *
     * @return int
     */
    public function getAllocated()
    {
        return $this->container['allocated'];
    }

    /**
     * Sets allocated
     *
     * @param int $allocated allocated
     *
     * @return $this
     */
    public function setAllocated($allocated)
    {
        $this->container['allocated'] = $allocated;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return int
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param int $on_hand on_hand
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets off_hand
     *
     * @return int
     */
    public function getOffHand()
    {
        return $this->container['off_hand'];
    }

    /**
     * Sets off_hand
     *
     * @param int $off_hand off_hand
     *
     * @return $this
     */
    public function setOffHand($off_hand)
    {
        $this->container['off_hand'] = $off_hand;

        return $this;
    }

    /**
     * Gets awaiting_replen
     *
     * @return int
     */
    public function getAwaitingReplen()
    {
        return $this->container['awaiting_replen'];
    }

    /**
     * Sets awaiting_replen
     *
     * @param int $awaiting_replen awaiting_replen
     *
     * @return $this
     */
    public function setAwaitingReplen($awaiting_replen)
    {
        $this->container['awaiting_replen'] = $awaiting_replen;

        return $this;
    }

    /**
     * Gets on_order
     *
     * @return int
     */
    public function getOnOrder()
    {
        return $this->container['on_order'];
    }

    /**
     * Sets on_order
     *
     * @param int $on_order on_order
     *
     * @return $this
     */
    public function setOnOrder($on_order)
    {
        $this->container['on_order'] = $on_order;

        return $this;
    }

    /**
     * Gets required_by_back_order
     *
     * @return int
     */
    public function getRequiredByBackOrder()
    {
        return $this->container['required_by_back_order'];
    }

    /**
     * Sets required_by_back_order
     *
     * @param int $required_by_back_order required_by_back_order
     *
     * @return $this
     */
    public function setRequiredByBackOrder($required_by_back_order)
    {
        $this->container['required_by_back_order'] = $required_by_back_order;

        return $this;
    }

    /**
     * Gets in_quarantine
     *
     * @return int
     */
    public function getInQuarantine()
    {
        return $this->container['in_quarantine'];
    }

    /**
     * Sets in_quarantine
     *
     * @param int $in_quarantine in_quarantine
     *
     * @return $this
     */
    public function setInQuarantine($in_quarantine)
    {
        $this->container['in_quarantine'] = $in_quarantine;

        return $this;
    }

    /**
     * Gets in_transit
     *
     * @return int
     */
    public function getInTransit()
    {
        return $this->container['in_transit'];
    }

    /**
     * Sets in_transit
     *
     * @param int $in_transit in_transit
     *
     * @return $this
     */
    public function setInTransit($in_transit)
    {
        $this->container['in_transit'] = $in_transit;

        return $this;
    }

    /**
     * Gets in_transition
     *
     * @return int
     */
    public function getInTransition()
    {
        return $this->container['in_transition'];
    }

    /**
     * Sets in_transition
     *
     * @param int $in_transition in_transition
     *
     * @return $this
     */
    public function setInTransition($in_transition)
    {
        $this->container['in_transition'] = $in_transition;

        return $this;
    }

    /**
     * Gets scrapped
     *
     * @return int
     */
    public function getScrapped()
    {
        return $this->container['scrapped'];
    }

    /**
     * Sets scrapped
     *
     * @param int $scrapped scrapped
     *
     * @return $this
     */
    public function setScrapped($scrapped)
    {
        $this->container['scrapped'] = $scrapped;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets breakdown
     *
     * @return \Swagger\Client\Model\MintsoftStockAPIStockLevelBreakdown[]
     */
    public function getBreakdown()
    {
        return $this->container['breakdown'];
    }

    /**
     * Sets breakdown
     *
     * @param \Swagger\Client\Model\MintsoftStockAPIStockLevelBreakdown[] $breakdown breakdown
     *
     * @return $this
     */
    public function setBreakdown($breakdown)
    {
        $this->container['breakdown'] = $breakdown;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


