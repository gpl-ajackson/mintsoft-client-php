<?php
/**
 * ToolkitDataClassesStockASNItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockASNItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftStockASNItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.ASNItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'asnid' => 'int',
        'product_id' => 'int',
        'quantity_expected' => 'int',
        'quantity_receieved' => 'int',
        'quantity_booked' => 'int',
        'on_order' => 'int',
        'sscc_number' => 'string',
        'complete' => 'bool',
        'comments' => 'string',
        'source_line_id' => 'string',
        'asn_item_name_values' => '\Swagger\Client\Model\ToolkitDataClassesStockASNItemNameValue[]',
        'sku' => 'string',
        'ean' => 'string',
        'upc' => 'string',
        'name' => 'string',
        'has_serial_number' => 'bool',
        'has_expiry_date' => 'bool',
        'has_batch_number' => 'bool',
        'product_image_url' => 'string',
        'asn_item_allocations' => '\Swagger\Client\Model\ToolkitDataClassesStockASNItemAllocation[]',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'asnid' => 'int32',
        'product_id' => 'int32',
        'quantity_expected' => 'int32',
        'quantity_receieved' => 'int32',
        'quantity_booked' => 'int32',
        'on_order' => 'int32',
        'sscc_number' => null,
        'complete' => null,
        'comments' => null,
        'source_line_id' => null,
        'asn_item_name_values' => null,
        'sku' => null,
        'ean' => null,
        'upc' => null,
        'name' => null,
        'has_serial_number' => null,
        'has_expiry_date' => null,
        'has_batch_number' => null,
        'product_image_url' => null,
        'asn_item_allocations' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'asnid' => 'ASNId',
        'product_id' => 'ProductId',
        'quantity_expected' => 'QuantityExpected',
        'quantity_receieved' => 'QuantityReceieved',
        'quantity_booked' => 'QuantityBooked',
        'on_order' => 'OnOrder',
        'sscc_number' => 'SSCCNumber',
        'complete' => 'Complete',
        'comments' => 'Comments',
        'source_line_id' => 'SourceLineId',
        'asn_item_name_values' => 'ASNItemNameValues',
        'sku' => 'SKU',
        'ean' => 'EAN',
        'upc' => 'UPC',
        'name' => 'NAME',
        'has_serial_number' => 'HasSerialNumber',
        'has_expiry_date' => 'HasExpiryDate',
        'has_batch_number' => 'HasBatchNumber',
        'product_image_url' => 'ProductImageURL',
        'asn_item_allocations' => 'ASNItemAllocations',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'asnid' => 'setAsnid',
        'product_id' => 'setProductId',
        'quantity_expected' => 'setQuantityExpected',
        'quantity_receieved' => 'setQuantityReceieved',
        'quantity_booked' => 'setQuantityBooked',
        'on_order' => 'setOnOrder',
        'sscc_number' => 'setSsccNumber',
        'complete' => 'setComplete',
        'comments' => 'setComments',
        'source_line_id' => 'setSourceLineId',
        'asn_item_name_values' => 'setAsnItemNameValues',
        'sku' => 'setSku',
        'ean' => 'setEan',
        'upc' => 'setUpc',
        'name' => 'setName',
        'has_serial_number' => 'setHasSerialNumber',
        'has_expiry_date' => 'setHasExpiryDate',
        'has_batch_number' => 'setHasBatchNumber',
        'product_image_url' => 'setProductImageUrl',
        'asn_item_allocations' => 'setAsnItemAllocations',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'asnid' => 'getAsnid',
        'product_id' => 'getProductId',
        'quantity_expected' => 'getQuantityExpected',
        'quantity_receieved' => 'getQuantityReceieved',
        'quantity_booked' => 'getQuantityBooked',
        'on_order' => 'getOnOrder',
        'sscc_number' => 'getSsccNumber',
        'complete' => 'getComplete',
        'comments' => 'getComments',
        'source_line_id' => 'getSourceLineId',
        'asn_item_name_values' => 'getAsnItemNameValues',
        'sku' => 'getSku',
        'ean' => 'getEan',
        'upc' => 'getUpc',
        'name' => 'getName',
        'has_serial_number' => 'getHasSerialNumber',
        'has_expiry_date' => 'getHasExpiryDate',
        'has_batch_number' => 'getHasBatchNumber',
        'product_image_url' => 'getProductImageUrl',
        'asn_item_allocations' => 'getAsnItemAllocations',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['asnid'] = isset($data['asnid']) ? $data['asnid'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity_expected'] = isset($data['quantity_expected']) ? $data['quantity_expected'] : null;
        $this->container['quantity_receieved'] = isset($data['quantity_receieved']) ? $data['quantity_receieved'] : null;
        $this->container['quantity_booked'] = isset($data['quantity_booked']) ? $data['quantity_booked'] : null;
        $this->container['on_order'] = isset($data['on_order']) ? $data['on_order'] : null;
        $this->container['sscc_number'] = isset($data['sscc_number']) ? $data['sscc_number'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['source_line_id'] = isset($data['source_line_id']) ? $data['source_line_id'] : null;
        $this->container['asn_item_name_values'] = isset($data['asn_item_name_values']) ? $data['asn_item_name_values'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['has_serial_number'] = isset($data['has_serial_number']) ? $data['has_serial_number'] : null;
        $this->container['has_expiry_date'] = isset($data['has_expiry_date']) ? $data['has_expiry_date'] : null;
        $this->container['has_batch_number'] = isset($data['has_batch_number']) ? $data['has_batch_number'] : null;
        $this->container['product_image_url'] = isset($data['product_image_url']) ? $data['product_image_url'] : null;
        $this->container['asn_item_allocations'] = isset($data['asn_item_allocations']) ? $data['asn_item_allocations'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) > 500)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['comments']) && (mb_strlen($this->container['comments']) < 0)) {
            $invalidProperties[] = "invalid value for 'comments', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets asnid
     *
     * @return int
     */
    public function getAsnid()
    {
        return $this->container['asnid'];
    }

    /**
     * Sets asnid
     *
     * @param int $asnid asnid
     *
     * @return $this
     */
    public function setAsnid($asnid)
    {
        $this->container['asnid'] = $asnid;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity_expected
     *
     * @return int
     */
    public function getQuantityExpected()
    {
        return $this->container['quantity_expected'];
    }

    /**
     * Sets quantity_expected
     *
     * @param int $quantity_expected quantity_expected
     *
     * @return $this
     */
    public function setQuantityExpected($quantity_expected)
    {
        $this->container['quantity_expected'] = $quantity_expected;

        return $this;
    }

    /**
     * Gets quantity_receieved
     *
     * @return int
     */
    public function getQuantityReceieved()
    {
        return $this->container['quantity_receieved'];
    }

    /**
     * Sets quantity_receieved
     *
     * @param int $quantity_receieved quantity_receieved
     *
     * @return $this
     */
    public function setQuantityReceieved($quantity_receieved)
    {
        $this->container['quantity_receieved'] = $quantity_receieved;

        return $this;
    }

    /**
     * Gets quantity_booked
     *
     * @return int
     */
    public function getQuantityBooked()
    {
        return $this->container['quantity_booked'];
    }

    /**
     * Sets quantity_booked
     *
     * @param int $quantity_booked quantity_booked
     *
     * @return $this
     */
    public function setQuantityBooked($quantity_booked)
    {
        $this->container['quantity_booked'] = $quantity_booked;

        return $this;
    }

    /**
     * Gets on_order
     *
     * @return int
     */
    public function getOnOrder()
    {
        return $this->container['on_order'];
    }

    /**
     * Sets on_order
     *
     * @param int $on_order on_order
     *
     * @return $this
     */
    public function setOnOrder($on_order)
    {
        $this->container['on_order'] = $on_order;

        return $this;
    }

    /**
     * Gets sscc_number
     *
     * @return string
     */
    public function getSsccNumber()
    {
        return $this->container['sscc_number'];
    }

    /**
     * Sets sscc_number
     *
     * @param string $sscc_number sscc_number
     *
     * @return $this
     */
    public function setSsccNumber($sscc_number)
    {
        $this->container['sscc_number'] = $sscc_number;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        if (!is_null($comments) && (mb_strlen($comments) > 500)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ToolkitDataClassesStockASNItem., must be smaller than or equal to 500.');
        }
        if (!is_null($comments) && (mb_strlen($comments) < 0)) {
            throw new \InvalidArgumentException('invalid length for $comments when calling ToolkitDataClassesStockASNItem., must be bigger than or equal to 0.');
        }

        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets source_line_id
     *
     * @return string
     */
    public function getSourceLineId()
    {
        return $this->container['source_line_id'];
    }

    /**
     * Sets source_line_id
     *
     * @param string $source_line_id source_line_id
     *
     * @return $this
     */
    public function setSourceLineId($source_line_id)
    {
        $this->container['source_line_id'] = $source_line_id;

        return $this;
    }

    /**
     * Gets asn_item_name_values
     *
     * @return \Swagger\Client\Model\MintsoftStockASNItemNameValue[]
     */
    public function getAsnItemNameValues()
    {
        return $this->container['asn_item_name_values'];
    }

    /**
     * Sets asn_item_name_values
     *
     * @param \Swagger\Client\Model\MintsoftStockASNItemNameValue[] $asn_item_name_values asn_item_name_values
     *
     * @return $this
     */
    public function setAsnItemNameValues($asn_item_name_values)
    {
        $this->container['asn_item_name_values'] = $asn_item_name_values;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc upc
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets has_serial_number
     *
     * @return bool
     */
    public function getHasSerialNumber()
    {
        return $this->container['has_serial_number'];
    }

    /**
     * Sets has_serial_number
     *
     * @param bool $has_serial_number has_serial_number
     *
     * @return $this
     */
    public function setHasSerialNumber($has_serial_number)
    {
        $this->container['has_serial_number'] = $has_serial_number;

        return $this;
    }

    /**
     * Gets has_expiry_date
     *
     * @return bool
     */
    public function getHasExpiryDate()
    {
        return $this->container['has_expiry_date'];
    }

    /**
     * Sets has_expiry_date
     *
     * @param bool $has_expiry_date has_expiry_date
     *
     * @return $this
     */
    public function setHasExpiryDate($has_expiry_date)
    {
        $this->container['has_expiry_date'] = $has_expiry_date;

        return $this;
    }

    /**
     * Gets has_batch_number
     *
     * @return bool
     */
    public function getHasBatchNumber()
    {
        return $this->container['has_batch_number'];
    }

    /**
     * Sets has_batch_number
     *
     * @param bool $has_batch_number has_batch_number
     *
     * @return $this
     */
    public function setHasBatchNumber($has_batch_number)
    {
        $this->container['has_batch_number'] = $has_batch_number;

        return $this;
    }

    /**
     * Gets product_image_url
     *
     * @return string
     */
    public function getProductImageUrl()
    {
        return $this->container['product_image_url'];
    }

    /**
     * Sets product_image_url
     *
     * @param string $product_image_url product_image_url
     *
     * @return $this
     */
    public function setProductImageUrl($product_image_url)
    {
        $this->container['product_image_url'] = $product_image_url;

        return $this;
    }

    /**
     * Gets asn_item_allocations
     *
     * @return \Swagger\Client\Model\MintsoftStockASNItemAllocation[]
     */
    public function getAsnItemAllocations()
    {
        return $this->container['asn_item_allocations'];
    }

    /**
     * Sets asn_item_allocations
     *
     * @param \Swagger\Client\Model\MintsoftStockASNItemAllocation[] $asn_item_allocations asn_item_allocations
     *
     * @return $this
     */
    public function setAsnItemAllocations($asn_item_allocations)
    {
        $this->container['asn_item_allocations'] = $asn_item_allocations;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


