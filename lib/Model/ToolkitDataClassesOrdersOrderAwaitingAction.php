<?php
/**
 * ToolkitDataClassesOrdersOrderAwaitingAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersOrderAwaitingAction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersOrderAwaitingAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.OrderAwaitingAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'type' => 'string',
        'source_order_id' => 'string',
        'complete' => 'bool',
        'account_id' => 'int',
        'extra_code1' => 'string',
        'extra_code2' => 'string',
        'extra_code3' => 'string',
        'extra_code4' => 'string',
        'extra_code5' => 'string',
        'extra_flag1' => 'bool',
        'extra_flag2' => 'bool',
        'messages' => 'string',
        'extra_date1' => '\DateTime',
        'return' => 'bool',
        'return_complete' => 'bool',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'type' => null,
        'source_order_id' => null,
        'complete' => null,
        'account_id' => 'int32',
        'extra_code1' => null,
        'extra_code2' => null,
        'extra_code3' => null,
        'extra_code4' => null,
        'extra_code5' => null,
        'extra_flag1' => null,
        'extra_flag2' => null,
        'messages' => null,
        'extra_date1' => 'date-time',
        'return' => null,
        'return_complete' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'type' => 'Type',
        'source_order_id' => 'SourceOrderId',
        'complete' => 'Complete',
        'account_id' => 'AccountId',
        'extra_code1' => 'ExtraCode1',
        'extra_code2' => 'ExtraCode2',
        'extra_code3' => 'ExtraCode3',
        'extra_code4' => 'ExtraCode4',
        'extra_code5' => 'ExtraCode5',
        'extra_flag1' => 'ExtraFlag1',
        'extra_flag2' => 'ExtraFlag2',
        'messages' => 'Messages',
        'extra_date1' => 'ExtraDate1',
        'return' => 'Return',
        'return_complete' => 'ReturnComplete',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'type' => 'setType',
        'source_order_id' => 'setSourceOrderId',
        'complete' => 'setComplete',
        'account_id' => 'setAccountId',
        'extra_code1' => 'setExtraCode1',
        'extra_code2' => 'setExtraCode2',
        'extra_code3' => 'setExtraCode3',
        'extra_code4' => 'setExtraCode4',
        'extra_code5' => 'setExtraCode5',
        'extra_flag1' => 'setExtraFlag1',
        'extra_flag2' => 'setExtraFlag2',
        'messages' => 'setMessages',
        'extra_date1' => 'setExtraDate1',
        'return' => 'setReturn',
        'return_complete' => 'setReturnComplete',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'type' => 'getType',
        'source_order_id' => 'getSourceOrderId',
        'complete' => 'getComplete',
        'account_id' => 'getAccountId',
        'extra_code1' => 'getExtraCode1',
        'extra_code2' => 'getExtraCode2',
        'extra_code3' => 'getExtraCode3',
        'extra_code4' => 'getExtraCode4',
        'extra_code5' => 'getExtraCode5',
        'extra_flag1' => 'getExtraFlag1',
        'extra_flag2' => 'getExtraFlag2',
        'messages' => 'getMessages',
        'extra_date1' => 'getExtraDate1',
        'return' => 'getReturn',
        'return_complete' => 'getReturnComplete',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['source_order_id'] = isset($data['source_order_id']) ? $data['source_order_id'] : null;
        $this->container['complete'] = isset($data['complete']) ? $data['complete'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['extra_code1'] = isset($data['extra_code1']) ? $data['extra_code1'] : null;
        $this->container['extra_code2'] = isset($data['extra_code2']) ? $data['extra_code2'] : null;
        $this->container['extra_code3'] = isset($data['extra_code3']) ? $data['extra_code3'] : null;
        $this->container['extra_code4'] = isset($data['extra_code4']) ? $data['extra_code4'] : null;
        $this->container['extra_code5'] = isset($data['extra_code5']) ? $data['extra_code5'] : null;
        $this->container['extra_flag1'] = isset($data['extra_flag1']) ? $data['extra_flag1'] : null;
        $this->container['extra_flag2'] = isset($data['extra_flag2']) ? $data['extra_flag2'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['extra_date1'] = isset($data['extra_date1']) ? $data['extra_date1'] : null;
        $this->container['return'] = isset($data['return']) ? $data['return'] : null;
        $this->container['return_complete'] = isset($data['return_complete']) ? $data['return_complete'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source_order_id
     *
     * @return string
     */
    public function getSourceOrderId()
    {
        return $this->container['source_order_id'];
    }

    /**
     * Sets source_order_id
     *
     * @param string $source_order_id source_order_id
     *
     * @return $this
     */
    public function setSourceOrderId($source_order_id)
    {
        $this->container['source_order_id'] = $source_order_id;

        return $this;
    }

    /**
     * Gets complete
     *
     * @return bool
     */
    public function getComplete()
    {
        return $this->container['complete'];
    }

    /**
     * Sets complete
     *
     * @param bool $complete complete
     *
     * @return $this
     */
    public function setComplete($complete)
    {
        $this->container['complete'] = $complete;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets extra_code1
     *
     * @return string
     */
    public function getExtraCode1()
    {
        return $this->container['extra_code1'];
    }

    /**
     * Sets extra_code1
     *
     * @param string $extra_code1 extra_code1
     *
     * @return $this
     */
    public function setExtraCode1($extra_code1)
    {
        $this->container['extra_code1'] = $extra_code1;

        return $this;
    }

    /**
     * Gets extra_code2
     *
     * @return string
     */
    public function getExtraCode2()
    {
        return $this->container['extra_code2'];
    }

    /**
     * Sets extra_code2
     *
     * @param string $extra_code2 extra_code2
     *
     * @return $this
     */
    public function setExtraCode2($extra_code2)
    {
        $this->container['extra_code2'] = $extra_code2;

        return $this;
    }

    /**
     * Gets extra_code3
     *
     * @return string
     */
    public function getExtraCode3()
    {
        return $this->container['extra_code3'];
    }

    /**
     * Sets extra_code3
     *
     * @param string $extra_code3 extra_code3
     *
     * @return $this
     */
    public function setExtraCode3($extra_code3)
    {
        $this->container['extra_code3'] = $extra_code3;

        return $this;
    }

    /**
     * Gets extra_code4
     *
     * @return string
     */
    public function getExtraCode4()
    {
        return $this->container['extra_code4'];
    }

    /**
     * Sets extra_code4
     *
     * @param string $extra_code4 extra_code4
     *
     * @return $this
     */
    public function setExtraCode4($extra_code4)
    {
        $this->container['extra_code4'] = $extra_code4;

        return $this;
    }

    /**
     * Gets extra_code5
     *
     * @return string
     */
    public function getExtraCode5()
    {
        return $this->container['extra_code5'];
    }

    /**
     * Sets extra_code5
     *
     * @param string $extra_code5 extra_code5
     *
     * @return $this
     */
    public function setExtraCode5($extra_code5)
    {
        $this->container['extra_code5'] = $extra_code5;

        return $this;
    }

    /**
     * Gets extra_flag1
     *
     * @return bool
     */
    public function getExtraFlag1()
    {
        return $this->container['extra_flag1'];
    }

    /**
     * Sets extra_flag1
     *
     * @param bool $extra_flag1 extra_flag1
     *
     * @return $this
     */
    public function setExtraFlag1($extra_flag1)
    {
        $this->container['extra_flag1'] = $extra_flag1;

        return $this;
    }

    /**
     * Gets extra_flag2
     *
     * @return bool
     */
    public function getExtraFlag2()
    {
        return $this->container['extra_flag2'];
    }

    /**
     * Sets extra_flag2
     *
     * @param bool $extra_flag2 extra_flag2
     *
     * @return $this
     */
    public function setExtraFlag2($extra_flag2)
    {
        $this->container['extra_flag2'] = $extra_flag2;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets extra_date1
     *
     * @return \DateTime
     */
    public function getExtraDate1()
    {
        return $this->container['extra_date1'];
    }

    /**
     * Sets extra_date1
     *
     * @param \DateTime $extra_date1 extra_date1
     *
     * @return $this
     */
    public function setExtraDate1($extra_date1)
    {
        $this->container['extra_date1'] = $extra_date1;

        return $this;
    }

    /**
     * Gets return
     *
     * @return bool
     */
    public function getReturn()
    {
        return $this->container['return'];
    }

    /**
     * Sets return
     *
     * @param bool $return return
     *
     * @return $this
     */
    public function setReturn($return)
    {
        $this->container['return'] = $return;

        return $this;
    }

    /**
     * Gets return_complete
     *
     * @return bool
     */
    public function getReturnComplete()
    {
        return $this->container['return_complete'];
    }

    /**
     * Sets return_complete
     *
     * @param bool $return_complete return_complete
     *
     * @return $this
     */
    public function setReturnComplete($return_complete)
    {
        $this->container['return_complete'] = $return_complete;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


