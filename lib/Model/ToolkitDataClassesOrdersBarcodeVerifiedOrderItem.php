<?php
/**
 * ToolkitDataClassesOrdersBarcodeVerifiedOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersBarcodeVerifiedOrderItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersBarcodeVerifiedOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.BarcodeVerifiedOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_item_id' => 'int',
        'product_in_location_id' => 'int',
        'order_id' => 'int',
        'quantity' => 'int',
        'manually_confirmed' => 'bool',
        'barcode' => 'string',
        'batch_no' => 'string',
        'serial_no' => 'string',
        'expiry_date' => '\DateTime',
        'mobile_app' => 'bool',
        'box_number' => 'int',
        'sscc_number' => 'string',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_item_id' => 'int32',
        'product_in_location_id' => 'int32',
        'order_id' => 'int32',
        'quantity' => 'int32',
        'manually_confirmed' => null,
        'barcode' => null,
        'batch_no' => null,
        'serial_no' => null,
        'expiry_date' => 'date-time',
        'mobile_app' => null,
        'box_number' => 'int32',
        'sscc_number' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_id' => 'OrderItemId',
        'product_in_location_id' => 'ProductInLocationId',
        'order_id' => 'OrderId',
        'quantity' => 'Quantity',
        'manually_confirmed' => 'ManuallyConfirmed',
        'barcode' => 'Barcode',
        'batch_no' => 'BatchNo',
        'serial_no' => 'SerialNo',
        'expiry_date' => 'ExpiryDate',
        'mobile_app' => 'MobileApp',
        'box_number' => 'BoxNumber',
        'sscc_number' => 'SSCCNumber',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_id' => 'setOrderItemId',
        'product_in_location_id' => 'setProductInLocationId',
        'order_id' => 'setOrderId',
        'quantity' => 'setQuantity',
        'manually_confirmed' => 'setManuallyConfirmed',
        'barcode' => 'setBarcode',
        'batch_no' => 'setBatchNo',
        'serial_no' => 'setSerialNo',
        'expiry_date' => 'setExpiryDate',
        'mobile_app' => 'setMobileApp',
        'box_number' => 'setBoxNumber',
        'sscc_number' => 'setSsccNumber',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_id' => 'getOrderItemId',
        'product_in_location_id' => 'getProductInLocationId',
        'order_id' => 'getOrderId',
        'quantity' => 'getQuantity',
        'manually_confirmed' => 'getManuallyConfirmed',
        'barcode' => 'getBarcode',
        'batch_no' => 'getBatchNo',
        'serial_no' => 'getSerialNo',
        'expiry_date' => 'getExpiryDate',
        'mobile_app' => 'getMobileApp',
        'box_number' => 'getBoxNumber',
        'sscc_number' => 'getSsccNumber',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['product_in_location_id'] = isset($data['product_in_location_id']) ? $data['product_in_location_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['manually_confirmed'] = isset($data['manually_confirmed']) ? $data['manually_confirmed'] : null;
        $this->container['barcode'] = isset($data['barcode']) ? $data['barcode'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['mobile_app'] = isset($data['mobile_app']) ? $data['mobile_app'] : null;
        $this->container['box_number'] = isset($data['box_number']) ? $data['box_number'] : null;
        $this->container['sscc_number'] = isset($data['sscc_number']) ? $data['sscc_number'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) > 100)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets product_in_location_id
     *
     * @return int
     */
    public function getProductInLocationId()
    {
        return $this->container['product_in_location_id'];
    }

    /**
     * Sets product_in_location_id
     *
     * @param int $product_in_location_id product_in_location_id
     *
     * @return $this
     */
    public function setProductInLocationId($product_in_location_id)
    {
        $this->container['product_in_location_id'] = $product_in_location_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets manually_confirmed
     *
     * @return bool
     */
    public function getManuallyConfirmed()
    {
        return $this->container['manually_confirmed'];
    }

    /**
     * Sets manually_confirmed
     *
     * @param bool $manually_confirmed manually_confirmed
     *
     * @return $this
     */
    public function setManuallyConfirmed($manually_confirmed)
    {
        $this->container['manually_confirmed'] = $manually_confirmed;

        return $this;
    }

    /**
     * Gets barcode
     *
     * @return string
     */
    public function getBarcode()
    {
        return $this->container['barcode'];
    }

    /**
     * Sets barcode
     *
     * @param string $barcode barcode
     *
     * @return $this
     */
    public function setBarcode($barcode)
    {
        $this->container['barcode'] = $barcode;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        if (!is_null($batch_no) && (mb_strlen($batch_no) > 100)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesOrdersBarcodeVerifiedOrderItem., must be smaller than or equal to 100.');
        }
        if (!is_null($batch_no) && (mb_strlen($batch_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesOrdersBarcodeVerifiedOrderItem., must be bigger than or equal to 0.');
        }

        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets mobile_app
     *
     * @return bool
     */
    public function getMobileApp()
    {
        return $this->container['mobile_app'];
    }

    /**
     * Sets mobile_app
     *
     * @param bool $mobile_app mobile_app
     *
     * @return $this
     */
    public function setMobileApp($mobile_app)
    {
        $this->container['mobile_app'] = $mobile_app;

        return $this;
    }

    /**
     * Gets box_number
     *
     * @return int
     */
    public function getBoxNumber()
    {
        return $this->container['box_number'];
    }

    /**
     * Sets box_number
     *
     * @param int $box_number box_number
     *
     * @return $this
     */
    public function setBoxNumber($box_number)
    {
        $this->container['box_number'] = $box_number;

        return $this;
    }

    /**
     * Gets sscc_number
     *
     * @return string
     */
    public function getSsccNumber()
    {
        return $this->container['sscc_number'];
    }

    /**
     * Sets sscc_number
     *
     * @param string $sscc_number sscc_number
     *
     * @return $this
     */
    public function setSsccNumber($sscc_number)
    {
        $this->container['sscc_number'] = $sscc_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


