<?php
/**
 * ToolkitDataClassesOrdersOrderShipmentTrackingEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersOrderShipmentTrackingEvent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersOrderShipmentTrackingEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.OrderShipmentTrackingEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_shipment_id' => 'int',
        'order_shipment' => '\Swagger\Client\Model\ToolkitDataClassesOrdersOrderShipment',
        'tracking_status_id' => 'int',
        'courier_customer_description' => 'string',
        'courier_external_description' => 'string',
        'courier_tracking_stage_code' => 'string',
        'courier_tracking_event_id' => 'string',
        'courier_time_stamp' => '\DateTime',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_shipment_id' => 'int32',
        'order_shipment' => null,
        'tracking_status_id' => 'int32',
        'courier_customer_description' => null,
        'courier_external_description' => null,
        'courier_tracking_stage_code' => null,
        'courier_tracking_event_id' => null,
        'courier_time_stamp' => 'date-time',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_shipment_id' => 'OrderShipmentId',
        'order_shipment' => 'OrderShipment',
        'tracking_status_id' => 'TrackingStatusId',
        'courier_customer_description' => 'CourierCustomerDescription',
        'courier_external_description' => 'CourierExternalDescription',
        'courier_tracking_stage_code' => 'CourierTrackingStageCode',
        'courier_tracking_event_id' => 'CourierTrackingEventId',
        'courier_time_stamp' => 'CourierTimeStamp',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_shipment_id' => 'setOrderShipmentId',
        'order_shipment' => 'setOrderShipment',
        'tracking_status_id' => 'setTrackingStatusId',
        'courier_customer_description' => 'setCourierCustomerDescription',
        'courier_external_description' => 'setCourierExternalDescription',
        'courier_tracking_stage_code' => 'setCourierTrackingStageCode',
        'courier_tracking_event_id' => 'setCourierTrackingEventId',
        'courier_time_stamp' => 'setCourierTimeStamp',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_shipment_id' => 'getOrderShipmentId',
        'order_shipment' => 'getOrderShipment',
        'tracking_status_id' => 'getTrackingStatusId',
        'courier_customer_description' => 'getCourierCustomerDescription',
        'courier_external_description' => 'getCourierExternalDescription',
        'courier_tracking_stage_code' => 'getCourierTrackingStageCode',
        'courier_tracking_event_id' => 'getCourierTrackingEventId',
        'courier_time_stamp' => 'getCourierTimeStamp',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_shipment_id'] = isset($data['order_shipment_id']) ? $data['order_shipment_id'] : null;
        $this->container['order_shipment'] = isset($data['order_shipment']) ? $data['order_shipment'] : null;
        $this->container['tracking_status_id'] = isset($data['tracking_status_id']) ? $data['tracking_status_id'] : null;
        $this->container['courier_customer_description'] = isset($data['courier_customer_description']) ? $data['courier_customer_description'] : null;
        $this->container['courier_external_description'] = isset($data['courier_external_description']) ? $data['courier_external_description'] : null;
        $this->container['courier_tracking_stage_code'] = isset($data['courier_tracking_stage_code']) ? $data['courier_tracking_stage_code'] : null;
        $this->container['courier_tracking_event_id'] = isset($data['courier_tracking_event_id']) ? $data['courier_tracking_event_id'] : null;
        $this->container['courier_time_stamp'] = isset($data['courier_time_stamp']) ? $data['courier_time_stamp'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_shipment_id
     *
     * @return int
     */
    public function getOrderShipmentId()
    {
        return $this->container['order_shipment_id'];
    }

    /**
     * Sets order_shipment_id
     *
     * @param int $order_shipment_id order_shipment_id
     *
     * @return $this
     */
    public function setOrderShipmentId($order_shipment_id)
    {
        $this->container['order_shipment_id'] = $order_shipment_id;

        return $this;
    }

    /**
     * Gets order_shipment
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesOrdersOrderShipment
     */
    public function getOrderShipment()
    {
        return $this->container['order_shipment'];
    }

    /**
     * Sets order_shipment
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesOrdersOrderShipment $order_shipment order_shipment
     *
     * @return $this
     */
    public function setOrderShipment($order_shipment)
    {
        $this->container['order_shipment'] = $order_shipment;

        return $this;
    }

    /**
     * Gets tracking_status_id
     *
     * @return int
     */
    public function getTrackingStatusId()
    {
        return $this->container['tracking_status_id'];
    }

    /**
     * Sets tracking_status_id
     *
     * @param int $tracking_status_id tracking_status_id
     *
     * @return $this
     */
    public function setTrackingStatusId($tracking_status_id)
    {
        $this->container['tracking_status_id'] = $tracking_status_id;

        return $this;
    }

    /**
     * Gets courier_customer_description
     *
     * @return string
     */
    public function getCourierCustomerDescription()
    {
        return $this->container['courier_customer_description'];
    }

    /**
     * Sets courier_customer_description
     *
     * @param string $courier_customer_description courier_customer_description
     *
     * @return $this
     */
    public function setCourierCustomerDescription($courier_customer_description)
    {
        $this->container['courier_customer_description'] = $courier_customer_description;

        return $this;
    }

    /**
     * Gets courier_external_description
     *
     * @return string
     */
    public function getCourierExternalDescription()
    {
        return $this->container['courier_external_description'];
    }

    /**
     * Sets courier_external_description
     *
     * @param string $courier_external_description courier_external_description
     *
     * @return $this
     */
    public function setCourierExternalDescription($courier_external_description)
    {
        $this->container['courier_external_description'] = $courier_external_description;

        return $this;
    }

    /**
     * Gets courier_tracking_stage_code
     *
     * @return string
     */
    public function getCourierTrackingStageCode()
    {
        return $this->container['courier_tracking_stage_code'];
    }

    /**
     * Sets courier_tracking_stage_code
     *
     * @param string $courier_tracking_stage_code courier_tracking_stage_code
     *
     * @return $this
     */
    public function setCourierTrackingStageCode($courier_tracking_stage_code)
    {
        $this->container['courier_tracking_stage_code'] = $courier_tracking_stage_code;

        return $this;
    }

    /**
     * Gets courier_tracking_event_id
     *
     * @return string
     */
    public function getCourierTrackingEventId()
    {
        return $this->container['courier_tracking_event_id'];
    }

    /**
     * Sets courier_tracking_event_id
     *
     * @param string $courier_tracking_event_id courier_tracking_event_id
     *
     * @return $this
     */
    public function setCourierTrackingEventId($courier_tracking_event_id)
    {
        $this->container['courier_tracking_event_id'] = $courier_tracking_event_id;

        return $this;
    }

    /**
     * Gets courier_time_stamp
     *
     * @return \DateTime
     */
    public function getCourierTimeStamp()
    {
        return $this->container['courier_time_stamp'];
    }

    /**
     * Sets courier_time_stamp
     *
     * @param \DateTime $courier_time_stamp courier_time_stamp
     *
     * @return $this
     */
    public function setCourierTimeStamp($courier_time_stamp)
    {
        $this->container['courier_time_stamp'] = $courier_time_stamp;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


