<?php
/**
 * ToolkitDataClassesStockExternalFulFilmentProductInventory
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockExternalFulFilmentProductInventory Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockExternalFulFilmentProductInventory implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.ExternalFulFilmentProductInventory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_fulfiler_account_id' => 'int',
        'external_fulfiler' => 'string',
        'total_stock' => 'int',
        'on_hand_stock' => 'int',
        'external_ful_filment_product' => '\Swagger\Client\Model\ToolkitDataClassesStockExternalFulFilmentProduct',
        'product_id' => 'int',
        'product' => '\Swagger\Client\Model\ToolkitDataClassesStockProduct',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_fulfiler_account_id' => 'int32',
        'external_fulfiler' => null,
        'total_stock' => 'int32',
        'on_hand_stock' => 'int32',
        'external_ful_filment_product' => null,
        'product_id' => 'int32',
        'product' => null,
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_fulfiler_account_id' => 'ExternalFulfilerAccountId',
        'external_fulfiler' => 'ExternalFulfiler',
        'total_stock' => 'TotalStock',
        'on_hand_stock' => 'OnHandStock',
        'external_ful_filment_product' => 'ExternalFulFilmentProduct',
        'product_id' => 'ProductId',
        'product' => 'Product',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_fulfiler_account_id' => 'setExternalFulfilerAccountId',
        'external_fulfiler' => 'setExternalFulfiler',
        'total_stock' => 'setTotalStock',
        'on_hand_stock' => 'setOnHandStock',
        'external_ful_filment_product' => 'setExternalFulFilmentProduct',
        'product_id' => 'setProductId',
        'product' => 'setProduct',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_fulfiler_account_id' => 'getExternalFulfilerAccountId',
        'external_fulfiler' => 'getExternalFulfiler',
        'total_stock' => 'getTotalStock',
        'on_hand_stock' => 'getOnHandStock',
        'external_ful_filment_product' => 'getExternalFulFilmentProduct',
        'product_id' => 'getProductId',
        'product' => 'getProduct',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_fulfiler_account_id'] = isset($data['external_fulfiler_account_id']) ? $data['external_fulfiler_account_id'] : null;
        $this->container['external_fulfiler'] = isset($data['external_fulfiler']) ? $data['external_fulfiler'] : null;
        $this->container['total_stock'] = isset($data['total_stock']) ? $data['total_stock'] : null;
        $this->container['on_hand_stock'] = isset($data['on_hand_stock']) ? $data['on_hand_stock'] : null;
        $this->container['external_ful_filment_product'] = isset($data['external_ful_filment_product']) ? $data['external_ful_filment_product'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_fulfiler_account_id
     *
     * @return int
     */
    public function getExternalFulfilerAccountId()
    {
        return $this->container['external_fulfiler_account_id'];
    }

    /**
     * Sets external_fulfiler_account_id
     *
     * @param int $external_fulfiler_account_id external_fulfiler_account_id
     *
     * @return $this
     */
    public function setExternalFulfilerAccountId($external_fulfiler_account_id)
    {
        $this->container['external_fulfiler_account_id'] = $external_fulfiler_account_id;

        return $this;
    }

    /**
     * Gets external_fulfiler
     *
     * @return string
     */
    public function getExternalFulfiler()
    {
        return $this->container['external_fulfiler'];
    }

    /**
     * Sets external_fulfiler
     *
     * @param string $external_fulfiler external_fulfiler
     *
     * @return $this
     */
    public function setExternalFulfiler($external_fulfiler)
    {
        $this->container['external_fulfiler'] = $external_fulfiler;

        return $this;
    }

    /**
     * Gets total_stock
     *
     * @return int
     */
    public function getTotalStock()
    {
        return $this->container['total_stock'];
    }

    /**
     * Sets total_stock
     *
     * @param int $total_stock total_stock
     *
     * @return $this
     */
    public function setTotalStock($total_stock)
    {
        $this->container['total_stock'] = $total_stock;

        return $this;
    }

    /**
     * Gets on_hand_stock
     *
     * @return int
     */
    public function getOnHandStock()
    {
        return $this->container['on_hand_stock'];
    }

    /**
     * Sets on_hand_stock
     *
     * @param int $on_hand_stock on_hand_stock
     *
     * @return $this
     */
    public function setOnHandStock($on_hand_stock)
    {
        $this->container['on_hand_stock'] = $on_hand_stock;

        return $this;
    }

    /**
     * Gets external_ful_filment_product
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesStockExternalFulFilmentProduct
     */
    public function getExternalFulFilmentProduct()
    {
        return $this->container['external_ful_filment_product'];
    }

    /**
     * Sets external_ful_filment_product
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesStockExternalFulFilmentProduct $external_ful_filment_product external_ful_filment_product
     *
     * @return $this
     */
    public function setExternalFulFilmentProduct($external_ful_filment_product)
    {
        $this->container['external_ful_filment_product'] = $external_ful_filment_product;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesStockProduct
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesStockProduct $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


