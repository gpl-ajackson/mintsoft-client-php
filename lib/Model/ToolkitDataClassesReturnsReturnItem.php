<?php
/**
 * ToolkitDataClassesReturnsReturnItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesReturnsReturnItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesReturnsReturnItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Returns.ReturnItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_item_id' => 'int',
        'product_id' => 'int',
        'quantity' => 'int',
        'return_reason_id' => 'int',
        'action' => 'string',
        'comments' => 'string',
        'expiry_date' => '\DateTime',
        'batch_no' => 'string',
        'serial_no' => 'string',
        'returned_to_stock' => 'bool',
        'stock_action' => 'string',
        'return_id' => 'int',
        'sku' => 'string',
        'return_reason_name' => 'string',
        'name' => 'string',
        'left_to_put_away' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_item_id' => 'int32',
        'product_id' => 'int32',
        'quantity' => 'int32',
        'return_reason_id' => 'int32',
        'action' => null,
        'comments' => null,
        'expiry_date' => 'date-time',
        'batch_no' => null,
        'serial_no' => null,
        'returned_to_stock' => null,
        'stock_action' => null,
        'return_id' => 'int32',
        'sku' => null,
        'return_reason_name' => null,
        'name' => null,
        'left_to_put_away' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_id' => 'OrderItemId',
        'product_id' => 'ProductId',
        'quantity' => 'Quantity',
        'return_reason_id' => 'ReturnReasonId',
        'action' => 'Action',
        'comments' => 'Comments',
        'expiry_date' => 'ExpiryDate',
        'batch_no' => 'BatchNo',
        'serial_no' => 'SerialNo',
        'returned_to_stock' => 'ReturnedToStock',
        'stock_action' => 'StockAction',
        'return_id' => 'ReturnId',
        'sku' => 'SKU',
        'return_reason_name' => 'ReturnReasonName',
        'name' => 'NAME',
        'left_to_put_away' => 'LeftToPutAway',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_id' => 'setOrderItemId',
        'product_id' => 'setProductId',
        'quantity' => 'setQuantity',
        'return_reason_id' => 'setReturnReasonId',
        'action' => 'setAction',
        'comments' => 'setComments',
        'expiry_date' => 'setExpiryDate',
        'batch_no' => 'setBatchNo',
        'serial_no' => 'setSerialNo',
        'returned_to_stock' => 'setReturnedToStock',
        'stock_action' => 'setStockAction',
        'return_id' => 'setReturnId',
        'sku' => 'setSku',
        'return_reason_name' => 'setReturnReasonName',
        'name' => 'setName',
        'left_to_put_away' => 'setLeftToPutAway',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_id' => 'getOrderItemId',
        'product_id' => 'getProductId',
        'quantity' => 'getQuantity',
        'return_reason_id' => 'getReturnReasonId',
        'action' => 'getAction',
        'comments' => 'getComments',
        'expiry_date' => 'getExpiryDate',
        'batch_no' => 'getBatchNo',
        'serial_no' => 'getSerialNo',
        'returned_to_stock' => 'getReturnedToStock',
        'stock_action' => 'getStockAction',
        'return_id' => 'getReturnId',
        'sku' => 'getSku',
        'return_reason_name' => 'getReturnReasonName',
        'name' => 'getName',
        'left_to_put_away' => 'getLeftToPutAway',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['return_reason_id'] = isset($data['return_reason_id']) ? $data['return_reason_id'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['returned_to_stock'] = isset($data['returned_to_stock']) ? $data['returned_to_stock'] : null;
        $this->container['stock_action'] = isset($data['stock_action']) ? $data['stock_action'] : null;
        $this->container['return_id'] = isset($data['return_id']) ? $data['return_id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['return_reason_name'] = isset($data['return_reason_name']) ? $data['return_reason_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['left_to_put_away'] = isset($data['left_to_put_away']) ? $data['left_to_put_away'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets return_reason_id
     *
     * @return int
     */
    public function getReturnReasonId()
    {
        return $this->container['return_reason_id'];
    }

    /**
     * Sets return_reason_id
     *
     * @param int $return_reason_id return_reason_id
     *
     * @return $this
     */
    public function setReturnReasonId($return_reason_id)
    {
        $this->container['return_reason_id'] = $return_reason_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action action
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets returned_to_stock
     *
     * @return bool
     */
    public function getReturnedToStock()
    {
        return $this->container['returned_to_stock'];
    }

    /**
     * Sets returned_to_stock
     *
     * @param bool $returned_to_stock returned_to_stock
     *
     * @return $this
     */
    public function setReturnedToStock($returned_to_stock)
    {
        $this->container['returned_to_stock'] = $returned_to_stock;

        return $this;
    }

    /**
     * Gets stock_action
     *
     * @return string
     */
    public function getStockAction()
    {
        return $this->container['stock_action'];
    }

    /**
     * Sets stock_action
     *
     * @param string $stock_action stock_action
     *
     * @return $this
     */
    public function setStockAction($stock_action)
    {
        $this->container['stock_action'] = $stock_action;

        return $this;
    }

    /**
     * Gets return_id
     *
     * @return int
     */
    public function getReturnId()
    {
        return $this->container['return_id'];
    }

    /**
     * Sets return_id
     *
     * @param int $return_id return_id
     *
     * @return $this
     */
    public function setReturnId($return_id)
    {
        $this->container['return_id'] = $return_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets return_reason_name
     *
     * @return string
     */
    public function getReturnReasonName()
    {
        return $this->container['return_reason_name'];
    }

    /**
     * Sets return_reason_name
     *
     * @param string $return_reason_name return_reason_name
     *
     * @return $this
     */
    public function setReturnReasonName($return_reason_name)
    {
        $this->container['return_reason_name'] = $return_reason_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets left_to_put_away
     *
     * @return int
     */
    public function getLeftToPutAway()
    {
        return $this->container['left_to_put_away'];
    }

    /**
     * Sets left_to_put_away
     *
     * @param int $left_to_put_away left_to_put_away
     *
     * @return $this
     */
    public function setLeftToPutAway($left_to_put_away)
    {
        $this->container['left_to_put_away'] = $left_to_put_away;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


