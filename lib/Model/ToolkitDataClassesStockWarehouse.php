<?php
/**
 * ToolkitDataClassesStockWarehouse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockWarehouse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockWarehouse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.Warehouse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'code' => 'string',
        'details' => 'string',
        'allow_transfers_in' => 'bool',
        'allow_allocated_transfers' => 'bool',
        'allow_unassigned_locations' => 'bool',
        'allocate_based_on_location_type_priority' => 'bool',
        'include_allocated_stock_in_replen_point' => 'bool',
        'verify_locations_when_picking' => 'bool',
        'active' => 'bool',
        'type' => 'string',
        'prepend_warehouse_name' => 'bool',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'county' => 'string',
        'post_code' => 'string',
        'company_name' => 'string',
        'contact_name' => 'string',
        'contact_number' => 'string',
        'contact_email' => 'string',
        'country_id' => 'int',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string',
        'warehouse_reference_fields' => '\Swagger\Client\Model\ToolkitDataClassesWarehouseWarehouseReferenceField[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'code' => null,
        'details' => null,
        'allow_transfers_in' => null,
        'allow_allocated_transfers' => null,
        'allow_unassigned_locations' => null,
        'allocate_based_on_location_type_priority' => null,
        'include_allocated_stock_in_replen_point' => null,
        'verify_locations_when_picking' => null,
        'active' => null,
        'type' => null,
        'prepend_warehouse_name' => null,
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'county' => null,
        'post_code' => null,
        'company_name' => null,
        'contact_name' => null,
        'contact_number' => null,
        'contact_email' => null,
        'country_id' => 'int32',
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null,
        'warehouse_reference_fields' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'code' => 'Code',
        'details' => 'Details',
        'allow_transfers_in' => 'AllowTransfersIn',
        'allow_allocated_transfers' => 'AllowAllocatedTransfers',
        'allow_unassigned_locations' => 'AllowUnassignedLocations',
        'allocate_based_on_location_type_priority' => 'AllocateBasedOnLocationTypePriority',
        'include_allocated_stock_in_replen_point' => 'IncludeAllocatedStockInReplenPoint',
        'verify_locations_when_picking' => 'VerifyLocationsWhenPicking',
        'active' => 'Active',
        'type' => 'Type',
        'prepend_warehouse_name' => 'PrependWarehouseName',
        'address_line1' => 'AddressLine1',
        'address_line2' => 'AddressLine2',
        'city' => 'City',
        'county' => 'County',
        'post_code' => 'PostCode',
        'company_name' => 'CompanyName',
        'contact_name' => 'ContactName',
        'contact_number' => 'ContactNumber',
        'contact_email' => 'ContactEmail',
        'country_id' => 'CountryId',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser',
        'warehouse_reference_fields' => 'WarehouseReferenceFields'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'code' => 'setCode',
        'details' => 'setDetails',
        'allow_transfers_in' => 'setAllowTransfersIn',
        'allow_allocated_transfers' => 'setAllowAllocatedTransfers',
        'allow_unassigned_locations' => 'setAllowUnassignedLocations',
        'allocate_based_on_location_type_priority' => 'setAllocateBasedOnLocationTypePriority',
        'include_allocated_stock_in_replen_point' => 'setIncludeAllocatedStockInReplenPoint',
        'verify_locations_when_picking' => 'setVerifyLocationsWhenPicking',
        'active' => 'setActive',
        'type' => 'setType',
        'prepend_warehouse_name' => 'setPrependWarehouseName',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'county' => 'setCounty',
        'post_code' => 'setPostCode',
        'company_name' => 'setCompanyName',
        'contact_name' => 'setContactName',
        'contact_number' => 'setContactNumber',
        'contact_email' => 'setContactEmail',
        'country_id' => 'setCountryId',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser',
        'warehouse_reference_fields' => 'setWarehouseReferenceFields'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'code' => 'getCode',
        'details' => 'getDetails',
        'allow_transfers_in' => 'getAllowTransfersIn',
        'allow_allocated_transfers' => 'getAllowAllocatedTransfers',
        'allow_unassigned_locations' => 'getAllowUnassignedLocations',
        'allocate_based_on_location_type_priority' => 'getAllocateBasedOnLocationTypePriority',
        'include_allocated_stock_in_replen_point' => 'getIncludeAllocatedStockInReplenPoint',
        'verify_locations_when_picking' => 'getVerifyLocationsWhenPicking',
        'active' => 'getActive',
        'type' => 'getType',
        'prepend_warehouse_name' => 'getPrependWarehouseName',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'county' => 'getCounty',
        'post_code' => 'getPostCode',
        'company_name' => 'getCompanyName',
        'contact_name' => 'getContactName',
        'contact_number' => 'getContactNumber',
        'contact_email' => 'getContactEmail',
        'country_id' => 'getCountryId',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser',
        'warehouse_reference_fields' => 'getWarehouseReferenceFields'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['allow_transfers_in'] = isset($data['allow_transfers_in']) ? $data['allow_transfers_in'] : null;
        $this->container['allow_allocated_transfers'] = isset($data['allow_allocated_transfers']) ? $data['allow_allocated_transfers'] : null;
        $this->container['allow_unassigned_locations'] = isset($data['allow_unassigned_locations']) ? $data['allow_unassigned_locations'] : null;
        $this->container['allocate_based_on_location_type_priority'] = isset($data['allocate_based_on_location_type_priority']) ? $data['allocate_based_on_location_type_priority'] : null;
        $this->container['include_allocated_stock_in_replen_point'] = isset($data['include_allocated_stock_in_replen_point']) ? $data['include_allocated_stock_in_replen_point'] : null;
        $this->container['verify_locations_when_picking'] = isset($data['verify_locations_when_picking']) ? $data['verify_locations_when_picking'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['prepend_warehouse_name'] = isset($data['prepend_warehouse_name']) ? $data['prepend_warehouse_name'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_number'] = isset($data['contact_number']) ? $data['contact_number'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
        $this->container['warehouse_reference_fields'] = isset($data['warehouse_reference_fields']) ? $data['warehouse_reference_fields'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 20)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) < 0)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['address_line1'] === null) {
            $invalidProperties[] = "'address_line1' can't be null";
        }
        if ((mb_strlen($this->container['address_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['address_line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['city'] === null) {
            $invalidProperties[] = "'city' can't be null";
        }
        if ((mb_strlen($this->container['city']) > 50)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['city']) < 0)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 50)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) < 0)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['post_code'] === null) {
            $invalidProperties[] = "'post_code' can't be null";
        }
        if ((mb_strlen($this->container['post_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['post_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ((mb_strlen($this->container['company_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['company_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['contact_name'] === null) {
            $invalidProperties[] = "'contact_name' can't be null";
        }
        if ((mb_strlen($this->container['contact_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['contact_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['contact_number'] === null) {
            $invalidProperties[] = "'contact_number' can't be null";
        }
        if ((mb_strlen($this->container['contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_number', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_number', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['contact_email'] === null) {
            $invalidProperties[] = "'contact_email' can't be null";
        }
        if ((mb_strlen($this->container['contact_email']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['contact_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 20.');
        }
        if (!is_null($code) && (mb_strlen($code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets allow_transfers_in
     *
     * @return bool
     */
    public function getAllowTransfersIn()
    {
        return $this->container['allow_transfers_in'];
    }

    /**
     * Sets allow_transfers_in
     *
     * @param bool $allow_transfers_in allow_transfers_in
     *
     * @return $this
     */
    public function setAllowTransfersIn($allow_transfers_in)
    {
        $this->container['allow_transfers_in'] = $allow_transfers_in;

        return $this;
    }

    /**
     * Gets allow_allocated_transfers
     *
     * @return bool
     */
    public function getAllowAllocatedTransfers()
    {
        return $this->container['allow_allocated_transfers'];
    }

    /**
     * Sets allow_allocated_transfers
     *
     * @param bool $allow_allocated_transfers allow_allocated_transfers
     *
     * @return $this
     */
    public function setAllowAllocatedTransfers($allow_allocated_transfers)
    {
        $this->container['allow_allocated_transfers'] = $allow_allocated_transfers;

        return $this;
    }

    /**
     * Gets allow_unassigned_locations
     *
     * @return bool
     */
    public function getAllowUnassignedLocations()
    {
        return $this->container['allow_unassigned_locations'];
    }

    /**
     * Sets allow_unassigned_locations
     *
     * @param bool $allow_unassigned_locations allow_unassigned_locations
     *
     * @return $this
     */
    public function setAllowUnassignedLocations($allow_unassigned_locations)
    {
        $this->container['allow_unassigned_locations'] = $allow_unassigned_locations;

        return $this;
    }

    /**
     * Gets allocate_based_on_location_type_priority
     *
     * @return bool
     */
    public function getAllocateBasedOnLocationTypePriority()
    {
        return $this->container['allocate_based_on_location_type_priority'];
    }

    /**
     * Sets allocate_based_on_location_type_priority
     *
     * @param bool $allocate_based_on_location_type_priority allocate_based_on_location_type_priority
     *
     * @return $this
     */
    public function setAllocateBasedOnLocationTypePriority($allocate_based_on_location_type_priority)
    {
        $this->container['allocate_based_on_location_type_priority'] = $allocate_based_on_location_type_priority;

        return $this;
    }

    /**
     * Gets include_allocated_stock_in_replen_point
     *
     * @return bool
     */
    public function getIncludeAllocatedStockInReplenPoint()
    {
        return $this->container['include_allocated_stock_in_replen_point'];
    }

    /**
     * Sets include_allocated_stock_in_replen_point
     *
     * @param bool $include_allocated_stock_in_replen_point include_allocated_stock_in_replen_point
     *
     * @return $this
     */
    public function setIncludeAllocatedStockInReplenPoint($include_allocated_stock_in_replen_point)
    {
        $this->container['include_allocated_stock_in_replen_point'] = $include_allocated_stock_in_replen_point;

        return $this;
    }

    /**
     * Gets verify_locations_when_picking
     *
     * @return bool
     */
    public function getVerifyLocationsWhenPicking()
    {
        return $this->container['verify_locations_when_picking'];
    }

    /**
     * Sets verify_locations_when_picking
     *
     * @param bool $verify_locations_when_picking verify_locations_when_picking
     *
     * @return $this
     */
    public function setVerifyLocationsWhenPicking($verify_locations_when_picking)
    {
        $this->container['verify_locations_when_picking'] = $verify_locations_when_picking;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets prepend_warehouse_name
     *
     * @return bool
     */
    public function getPrependWarehouseName()
    {
        return $this->container['prepend_warehouse_name'];
    }

    /**
     * Sets prepend_warehouse_name
     *
     * @param bool $prepend_warehouse_name prepend_warehouse_name
     *
     * @return $this
     */
    public function setPrependWarehouseName($prepend_warehouse_name)
    {
        $this->container['prepend_warehouse_name'] = $prepend_warehouse_name;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if ((mb_strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($address_line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (mb_strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line2) && (mb_strlen($address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        if ((mb_strlen($city) > 50)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($city) < 0)) {
            throw new \InvalidArgumentException('invalid length for $city when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (mb_strlen($county) > 50)) {
            throw new \InvalidArgumentException('invalid length for $county when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if (!is_null($county) && (mb_strlen($county) < 0)) {
            throw new \InvalidArgumentException('invalid length for $county when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        if ((mb_strlen($post_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($post_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        if ((mb_strlen($company_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($company_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        if ((mb_strlen($contact_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($contact_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_number
     *
     * @return string
     */
    public function getContactNumber()
    {
        return $this->container['contact_number'];
    }

    /**
     * Sets contact_number
     *
     * @param string $contact_number contact_number
     *
     * @return $this
     */
    public function setContactNumber($contact_number)
    {
        if ((mb_strlen($contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_number when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_number when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['contact_number'] = $contact_number;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        if ((mb_strlen($contact_email) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling ToolkitDataClassesStockWarehouse., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($contact_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling ToolkitDataClassesStockWarehouse., must be bigger than or equal to 0.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }

    /**
     * Gets warehouse_reference_fields
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesWarehouseWarehouseReferenceField[]
     */
    public function getWarehouseReferenceFields()
    {
        return $this->container['warehouse_reference_fields'];
    }

    /**
     * Sets warehouse_reference_fields
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesWarehouseWarehouseReferenceField[] $warehouse_reference_fields warehouse_reference_fields
     *
     * @return $this
     */
    public function setWarehouseReferenceFields($warehouse_reference_fields)
    {
        $this->container['warehouse_reference_fields'] = $warehouse_reference_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


