<?php
/**
 * ToolkitDataClassesWarehouseAPIDTOStockMovementDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesWarehouseAPIDTOStockMovementDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesWarehouseAPIDTOStockMovementDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Warehouse.API.DTO.StockMovementDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stock_movement_id' => 'int',
        'last_updated_by_user' => 'string',
        'last_updated' => '\DateTime',
        'product_id' => 'int',
        'product_name' => 'string',
        'product_sku' => 'string',
        'source_warehouse_id' => 'int',
        'source_warehouse_name' => 'string',
        'source_location_id' => 'int',
        'source_location_name' => 'string',
        'destination_warehouse_id' => 'int',
        'destination_warehouse_name' => 'string',
        'destination_location_id' => 'int',
        'destination_location_name' => 'string',
        'quantity' => 'int',
        'order_id' => 'int',
        'order_item_id' => 'int',
        'best_before' => '\DateTime',
        'batch_no' => 'string',
        'serial_no' => 'string',
        'comment' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stock_movement_id' => 'int32',
        'last_updated_by_user' => null,
        'last_updated' => 'date-time',
        'product_id' => 'int32',
        'product_name' => null,
        'product_sku' => null,
        'source_warehouse_id' => 'int32',
        'source_warehouse_name' => null,
        'source_location_id' => 'int32',
        'source_location_name' => null,
        'destination_warehouse_id' => 'int32',
        'destination_warehouse_name' => null,
        'destination_location_id' => 'int32',
        'destination_location_name' => null,
        'quantity' => 'int32',
        'order_id' => 'int32',
        'order_item_id' => 'int32',
        'best_before' => 'date-time',
        'batch_no' => null,
        'serial_no' => null,
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock_movement_id' => 'StockMovementId',
        'last_updated_by_user' => 'LastUpdatedByUser',
        'last_updated' => 'LastUpdated',
        'product_id' => 'ProductId',
        'product_name' => 'ProductName',
        'product_sku' => 'ProductSKU',
        'source_warehouse_id' => 'SourceWarehouseId',
        'source_warehouse_name' => 'SourceWarehouseName',
        'source_location_id' => 'SourceLocationId',
        'source_location_name' => 'SourceLocationName',
        'destination_warehouse_id' => 'DestinationWarehouseId',
        'destination_warehouse_name' => 'DestinationWarehouseName',
        'destination_location_id' => 'DestinationLocationId',
        'destination_location_name' => 'DestinationLocationName',
        'quantity' => 'Quantity',
        'order_id' => 'OrderId',
        'order_item_id' => 'OrderItemId',
        'best_before' => 'BestBefore',
        'batch_no' => 'BatchNo',
        'serial_no' => 'SerialNo',
        'comment' => 'Comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock_movement_id' => 'setStockMovementId',
        'last_updated_by_user' => 'setLastUpdatedByUser',
        'last_updated' => 'setLastUpdated',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'product_sku' => 'setProductSku',
        'source_warehouse_id' => 'setSourceWarehouseId',
        'source_warehouse_name' => 'setSourceWarehouseName',
        'source_location_id' => 'setSourceLocationId',
        'source_location_name' => 'setSourceLocationName',
        'destination_warehouse_id' => 'setDestinationWarehouseId',
        'destination_warehouse_name' => 'setDestinationWarehouseName',
        'destination_location_id' => 'setDestinationLocationId',
        'destination_location_name' => 'setDestinationLocationName',
        'quantity' => 'setQuantity',
        'order_id' => 'setOrderId',
        'order_item_id' => 'setOrderItemId',
        'best_before' => 'setBestBefore',
        'batch_no' => 'setBatchNo',
        'serial_no' => 'setSerialNo',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock_movement_id' => 'getStockMovementId',
        'last_updated_by_user' => 'getLastUpdatedByUser',
        'last_updated' => 'getLastUpdated',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'product_sku' => 'getProductSku',
        'source_warehouse_id' => 'getSourceWarehouseId',
        'source_warehouse_name' => 'getSourceWarehouseName',
        'source_location_id' => 'getSourceLocationId',
        'source_location_name' => 'getSourceLocationName',
        'destination_warehouse_id' => 'getDestinationWarehouseId',
        'destination_warehouse_name' => 'getDestinationWarehouseName',
        'destination_location_id' => 'getDestinationLocationId',
        'destination_location_name' => 'getDestinationLocationName',
        'quantity' => 'getQuantity',
        'order_id' => 'getOrderId',
        'order_item_id' => 'getOrderItemId',
        'best_before' => 'getBestBefore',
        'batch_no' => 'getBatchNo',
        'serial_no' => 'getSerialNo',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stock_movement_id'] = isset($data['stock_movement_id']) ? $data['stock_movement_id'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product_name'] = isset($data['product_name']) ? $data['product_name'] : null;
        $this->container['product_sku'] = isset($data['product_sku']) ? $data['product_sku'] : null;
        $this->container['source_warehouse_id'] = isset($data['source_warehouse_id']) ? $data['source_warehouse_id'] : null;
        $this->container['source_warehouse_name'] = isset($data['source_warehouse_name']) ? $data['source_warehouse_name'] : null;
        $this->container['source_location_id'] = isset($data['source_location_id']) ? $data['source_location_id'] : null;
        $this->container['source_location_name'] = isset($data['source_location_name']) ? $data['source_location_name'] : null;
        $this->container['destination_warehouse_id'] = isset($data['destination_warehouse_id']) ? $data['destination_warehouse_id'] : null;
        $this->container['destination_warehouse_name'] = isset($data['destination_warehouse_name']) ? $data['destination_warehouse_name'] : null;
        $this->container['destination_location_id'] = isset($data['destination_location_id']) ? $data['destination_location_id'] : null;
        $this->container['destination_location_name'] = isset($data['destination_location_name']) ? $data['destination_location_name'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['best_before'] = isset($data['best_before']) ? $data['best_before'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stock_movement_id
     *
     * @return int
     */
    public function getStockMovementId()
    {
        return $this->container['stock_movement_id'];
    }

    /**
     * Sets stock_movement_id
     *
     * @param int $stock_movement_id stock_movement_id
     *
     * @return $this
     */
    public function setStockMovementId($stock_movement_id)
    {
        $this->container['stock_movement_id'] = $stock_movement_id;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string $product_name product_name
     *
     * @return $this
     */
    public function setProductName($product_name)
    {
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets product_sku
     *
     * @return string
     */
    public function getProductSku()
    {
        return $this->container['product_sku'];
    }

    /**
     * Sets product_sku
     *
     * @param string $product_sku product_sku
     *
     * @return $this
     */
    public function setProductSku($product_sku)
    {
        $this->container['product_sku'] = $product_sku;

        return $this;
    }

    /**
     * Gets source_warehouse_id
     *
     * @return int
     */
    public function getSourceWarehouseId()
    {
        return $this->container['source_warehouse_id'];
    }

    /**
     * Sets source_warehouse_id
     *
     * @param int $source_warehouse_id source_warehouse_id
     *
     * @return $this
     */
    public function setSourceWarehouseId($source_warehouse_id)
    {
        $this->container['source_warehouse_id'] = $source_warehouse_id;

        return $this;
    }

    /**
     * Gets source_warehouse_name
     *
     * @return string
     */
    public function getSourceWarehouseName()
    {
        return $this->container['source_warehouse_name'];
    }

    /**
     * Sets source_warehouse_name
     *
     * @param string $source_warehouse_name source_warehouse_name
     *
     * @return $this
     */
    public function setSourceWarehouseName($source_warehouse_name)
    {
        $this->container['source_warehouse_name'] = $source_warehouse_name;

        return $this;
    }

    /**
     * Gets source_location_id
     *
     * @return int
     */
    public function getSourceLocationId()
    {
        return $this->container['source_location_id'];
    }

    /**
     * Sets source_location_id
     *
     * @param int $source_location_id source_location_id
     *
     * @return $this
     */
    public function setSourceLocationId($source_location_id)
    {
        $this->container['source_location_id'] = $source_location_id;

        return $this;
    }

    /**
     * Gets source_location_name
     *
     * @return string
     */
    public function getSourceLocationName()
    {
        return $this->container['source_location_name'];
    }

    /**
     * Sets source_location_name
     *
     * @param string $source_location_name source_location_name
     *
     * @return $this
     */
    public function setSourceLocationName($source_location_name)
    {
        $this->container['source_location_name'] = $source_location_name;

        return $this;
    }

    /**
     * Gets destination_warehouse_id
     *
     * @return int
     */
    public function getDestinationWarehouseId()
    {
        return $this->container['destination_warehouse_id'];
    }

    /**
     * Sets destination_warehouse_id
     *
     * @param int $destination_warehouse_id destination_warehouse_id
     *
     * @return $this
     */
    public function setDestinationWarehouseId($destination_warehouse_id)
    {
        $this->container['destination_warehouse_id'] = $destination_warehouse_id;

        return $this;
    }

    /**
     * Gets destination_warehouse_name
     *
     * @return string
     */
    public function getDestinationWarehouseName()
    {
        return $this->container['destination_warehouse_name'];
    }

    /**
     * Sets destination_warehouse_name
     *
     * @param string $destination_warehouse_name destination_warehouse_name
     *
     * @return $this
     */
    public function setDestinationWarehouseName($destination_warehouse_name)
    {
        $this->container['destination_warehouse_name'] = $destination_warehouse_name;

        return $this;
    }

    /**
     * Gets destination_location_id
     *
     * @return int
     */
    public function getDestinationLocationId()
    {
        return $this->container['destination_location_id'];
    }

    /**
     * Sets destination_location_id
     *
     * @param int $destination_location_id destination_location_id
     *
     * @return $this
     */
    public function setDestinationLocationId($destination_location_id)
    {
        $this->container['destination_location_id'] = $destination_location_id;

        return $this;
    }

    /**
     * Gets destination_location_name
     *
     * @return string
     */
    public function getDestinationLocationName()
    {
        return $this->container['destination_location_name'];
    }

    /**
     * Sets destination_location_name
     *
     * @param string $destination_location_name destination_location_name
     *
     * @return $this
     */
    public function setDestinationLocationName($destination_location_name)
    {
        $this->container['destination_location_name'] = $destination_location_name;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets best_before
     *
     * @return \DateTime
     */
    public function getBestBefore()
    {
        return $this->container['best_before'];
    }

    /**
     * Sets best_before
     *
     * @param \DateTime $best_before best_before
     *
     * @return $this
     */
    public function setBestBefore($best_before)
    {
        $this->container['best_before'] = $best_before;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


