<?php
/**
 * ToolkitDataClassesStockStockFlow
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockStockFlow Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockStockFlow implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.StockFlow';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_id' => 'int',
        'warehouse_id' => 'int',
        'stock_level' => 'int',
        'allocated' => 'int',
        'on_hand' => 'int',
        'off_hand' => 'int',
        'quantity' => 'int',
        'flow' => 'string',
        'reason' => 'string',
        'best_before' => '\DateTime',
        'batch_no' => 'string',
        'serial_no' => 'string',
        'tags' => 'string',
        'storage_item_id' => 'int',
        'parent_storage_item_id' => 'int',
        'order_id' => 'int',
        'stock_flow_details' => '\Swagger\Client\Model\ToolkitDataClassesStockStockFlowDetail[]',
        'sku' => 'string',
        'warehouse_name' => 'string',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_id' => 'int32',
        'warehouse_id' => 'int32',
        'stock_level' => 'int32',
        'allocated' => 'int32',
        'on_hand' => 'int32',
        'off_hand' => 'int32',
        'quantity' => 'int32',
        'flow' => null,
        'reason' => null,
        'best_before' => 'date-time',
        'batch_no' => null,
        'serial_no' => null,
        'tags' => null,
        'storage_item_id' => 'int32',
        'parent_storage_item_id' => 'int32',
        'order_id' => 'int32',
        'stock_flow_details' => null,
        'sku' => null,
        'warehouse_name' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'ProductId',
        'warehouse_id' => 'WarehouseId',
        'stock_level' => 'StockLevel',
        'allocated' => 'Allocated',
        'on_hand' => 'OnHand',
        'off_hand' => 'OffHand',
        'quantity' => 'Quantity',
        'flow' => 'Flow',
        'reason' => 'Reason',
        'best_before' => 'BestBefore',
        'batch_no' => 'BatchNo',
        'serial_no' => 'SerialNo',
        'tags' => 'Tags',
        'storage_item_id' => 'StorageItemId',
        'parent_storage_item_id' => 'ParentStorageItemId',
        'order_id' => 'OrderId',
        'stock_flow_details' => 'StockFlowDetails',
        'sku' => 'SKU',
        'warehouse_name' => 'WarehouseName',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'warehouse_id' => 'setWarehouseId',
        'stock_level' => 'setStockLevel',
        'allocated' => 'setAllocated',
        'on_hand' => 'setOnHand',
        'off_hand' => 'setOffHand',
        'quantity' => 'setQuantity',
        'flow' => 'setFlow',
        'reason' => 'setReason',
        'best_before' => 'setBestBefore',
        'batch_no' => 'setBatchNo',
        'serial_no' => 'setSerialNo',
        'tags' => 'setTags',
        'storage_item_id' => 'setStorageItemId',
        'parent_storage_item_id' => 'setParentStorageItemId',
        'order_id' => 'setOrderId',
        'stock_flow_details' => 'setStockFlowDetails',
        'sku' => 'setSku',
        'warehouse_name' => 'setWarehouseName',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'warehouse_id' => 'getWarehouseId',
        'stock_level' => 'getStockLevel',
        'allocated' => 'getAllocated',
        'on_hand' => 'getOnHand',
        'off_hand' => 'getOffHand',
        'quantity' => 'getQuantity',
        'flow' => 'getFlow',
        'reason' => 'getReason',
        'best_before' => 'getBestBefore',
        'batch_no' => 'getBatchNo',
        'serial_no' => 'getSerialNo',
        'tags' => 'getTags',
        'storage_item_id' => 'getStorageItemId',
        'parent_storage_item_id' => 'getParentStorageItemId',
        'order_id' => 'getOrderId',
        'stock_flow_details' => 'getStockFlowDetails',
        'sku' => 'getSku',
        'warehouse_name' => 'getWarehouseName',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['stock_level'] = isset($data['stock_level']) ? $data['stock_level'] : null;
        $this->container['allocated'] = isset($data['allocated']) ? $data['allocated'] : null;
        $this->container['on_hand'] = isset($data['on_hand']) ? $data['on_hand'] : null;
        $this->container['off_hand'] = isset($data['off_hand']) ? $data['off_hand'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['flow'] = isset($data['flow']) ? $data['flow'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['best_before'] = isset($data['best_before']) ? $data['best_before'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['storage_item_id'] = isset($data['storage_item_id']) ? $data['storage_item_id'] : null;
        $this->container['parent_storage_item_id'] = isset($data['parent_storage_item_id']) ? $data['parent_storage_item_id'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['stock_flow_details'] = isset($data['stock_flow_details']) ? $data['stock_flow_details'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['warehouse_name'] = isset($data['warehouse_name']) ? $data['warehouse_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) > 100)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets stock_level
     *
     * @return int
     */
    public function getStockLevel()
    {
        return $this->container['stock_level'];
    }

    /**
     * Sets stock_level
     *
     * @param int $stock_level stock_level
     *
     * @return $this
     */
    public function setStockLevel($stock_level)
    {
        $this->container['stock_level'] = $stock_level;

        return $this;
    }

    /**
     * Gets allocated
     *
     * @return int
     */
    public function getAllocated()
    {
        return $this->container['allocated'];
    }

    /**
     * Sets allocated
     *
     * @param int $allocated allocated
     *
     * @return $this
     */
    public function setAllocated($allocated)
    {
        $this->container['allocated'] = $allocated;

        return $this;
    }

    /**
     * Gets on_hand
     *
     * @return int
     */
    public function getOnHand()
    {
        return $this->container['on_hand'];
    }

    /**
     * Sets on_hand
     *
     * @param int $on_hand on_hand
     *
     * @return $this
     */
    public function setOnHand($on_hand)
    {
        $this->container['on_hand'] = $on_hand;

        return $this;
    }

    /**
     * Gets off_hand
     *
     * @return int
     */
    public function getOffHand()
    {
        return $this->container['off_hand'];
    }

    /**
     * Sets off_hand
     *
     * @param int $off_hand off_hand
     *
     * @return $this
     */
    public function setOffHand($off_hand)
    {
        $this->container['off_hand'] = $off_hand;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets flow
     *
     * @return string
     */
    public function getFlow()
    {
        return $this->container['flow'];
    }

    /**
     * Sets flow
     *
     * @param string $flow flow
     *
     * @return $this
     */
    public function setFlow($flow)
    {
        $this->container['flow'] = $flow;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets best_before
     *
     * @return \DateTime
     */
    public function getBestBefore()
    {
        return $this->container['best_before'];
    }

    /**
     * Sets best_before
     *
     * @param \DateTime $best_before best_before
     *
     * @return $this
     */
    public function setBestBefore($best_before)
    {
        $this->container['best_before'] = $best_before;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        if (!is_null($batch_no) && (mb_strlen($batch_no) > 100)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesStockStockFlow., must be smaller than or equal to 100.');
        }
        if (!is_null($batch_no) && (mb_strlen($batch_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesStockStockFlow., must be bigger than or equal to 0.');
        }

        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets storage_item_id
     *
     * @return int
     */
    public function getStorageItemId()
    {
        return $this->container['storage_item_id'];
    }

    /**
     * Sets storage_item_id
     *
     * @param int $storage_item_id storage_item_id
     *
     * @return $this
     */
    public function setStorageItemId($storage_item_id)
    {
        $this->container['storage_item_id'] = $storage_item_id;

        return $this;
    }

    /**
     * Gets parent_storage_item_id
     *
     * @return int
     */
    public function getParentStorageItemId()
    {
        return $this->container['parent_storage_item_id'];
    }

    /**
     * Sets parent_storage_item_id
     *
     * @param int $parent_storage_item_id parent_storage_item_id
     *
     * @return $this
     */
    public function setParentStorageItemId($parent_storage_item_id)
    {
        $this->container['parent_storage_item_id'] = $parent_storage_item_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets stock_flow_details
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesStockStockFlowDetail[]
     */
    public function getStockFlowDetails()
    {
        return $this->container['stock_flow_details'];
    }

    /**
     * Sets stock_flow_details
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesStockStockFlowDetail[] $stock_flow_details stock_flow_details
     *
     * @return $this
     */
    public function setStockFlowDetails($stock_flow_details)
    {
        $this->container['stock_flow_details'] = $stock_flow_details;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets warehouse_name
     *
     * @return string
     */
    public function getWarehouseName()
    {
        return $this->container['warehouse_name'];
    }

    /**
     * Sets warehouse_name
     *
     * @param string $warehouse_name warehouse_name
     *
     * @return $this
     */
    public function setWarehouseName($warehouse_name)
    {
        $this->container['warehouse_name'] = $warehouse_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


