<?php
/**
 * ToolkitDataClassesStockAPIInventoryPreOrderBreakdown
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockAPIInventoryPreOrderBreakdown Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockAPIInventoryPreOrderBreakdown implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.API.InventoryPreOrderBreakdown';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'product_id' => 'int',
        'sku' => 'string',
        'stock_level' => 'int',
        'out_of_stock' => 'bool',
        'pre_orderable' => 'bool',
        'warehouse_id' => 'int',
        'on_order' => 'int',
        'required_by_back_order' => 'int',
        'available_for_pre_order' => 'int',
        'eta_for_new_orders' => '\DateTime',
        'breakdown' => '\Swagger\Client\Model\ToolkitDataClassesStockAPIASNBreakdown[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'product_id' => 'int32',
        'sku' => null,
        'stock_level' => 'int32',
        'out_of_stock' => null,
        'pre_orderable' => null,
        'warehouse_id' => 'int32',
        'on_order' => 'int32',
        'required_by_back_order' => 'int32',
        'available_for_pre_order' => 'int32',
        'eta_for_new_orders' => 'date-time',
        'breakdown' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_id' => 'ProductId',
        'sku' => 'SKU',
        'stock_level' => 'StockLevel',
        'out_of_stock' => 'OutOfStock',
        'pre_orderable' => 'PreOrderable',
        'warehouse_id' => 'WarehouseId',
        'on_order' => 'OnOrder',
        'required_by_back_order' => 'RequiredByBackOrder',
        'available_for_pre_order' => 'AvailableForPreOrder',
        'eta_for_new_orders' => 'ETAForNewOrders',
        'breakdown' => 'Breakdown'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_id' => 'setProductId',
        'sku' => 'setSku',
        'stock_level' => 'setStockLevel',
        'out_of_stock' => 'setOutOfStock',
        'pre_orderable' => 'setPreOrderable',
        'warehouse_id' => 'setWarehouseId',
        'on_order' => 'setOnOrder',
        'required_by_back_order' => 'setRequiredByBackOrder',
        'available_for_pre_order' => 'setAvailableForPreOrder',
        'eta_for_new_orders' => 'setEtaForNewOrders',
        'breakdown' => 'setBreakdown'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_id' => 'getProductId',
        'sku' => 'getSku',
        'stock_level' => 'getStockLevel',
        'out_of_stock' => 'getOutOfStock',
        'pre_orderable' => 'getPreOrderable',
        'warehouse_id' => 'getWarehouseId',
        'on_order' => 'getOnOrder',
        'required_by_back_order' => 'getRequiredByBackOrder',
        'available_for_pre_order' => 'getAvailableForPreOrder',
        'eta_for_new_orders' => 'getEtaForNewOrders',
        'breakdown' => 'getBreakdown'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['stock_level'] = isset($data['stock_level']) ? $data['stock_level'] : null;
        $this->container['out_of_stock'] = isset($data['out_of_stock']) ? $data['out_of_stock'] : null;
        $this->container['pre_orderable'] = isset($data['pre_orderable']) ? $data['pre_orderable'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['on_order'] = isset($data['on_order']) ? $data['on_order'] : null;
        $this->container['required_by_back_order'] = isset($data['required_by_back_order']) ? $data['required_by_back_order'] : null;
        $this->container['available_for_pre_order'] = isset($data['available_for_pre_order']) ? $data['available_for_pre_order'] : null;
        $this->container['eta_for_new_orders'] = isset($data['eta_for_new_orders']) ? $data['eta_for_new_orders'] : null;
        $this->container['breakdown'] = isset($data['breakdown']) ? $data['breakdown'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets stock_level
     *
     * @return int
     */
    public function getStockLevel()
    {
        return $this->container['stock_level'];
    }

    /**
     * Sets stock_level
     *
     * @param int $stock_level stock_level
     *
     * @return $this
     */
    public function setStockLevel($stock_level)
    {
        $this->container['stock_level'] = $stock_level;

        return $this;
    }

    /**
     * Gets out_of_stock
     *
     * @return bool
     */
    public function getOutOfStock()
    {
        return $this->container['out_of_stock'];
    }

    /**
     * Sets out_of_stock
     *
     * @param bool $out_of_stock out_of_stock
     *
     * @return $this
     */
    public function setOutOfStock($out_of_stock)
    {
        $this->container['out_of_stock'] = $out_of_stock;

        return $this;
    }

    /**
     * Gets pre_orderable
     *
     * @return bool
     */
    public function getPreOrderable()
    {
        return $this->container['pre_orderable'];
    }

    /**
     * Sets pre_orderable
     *
     * @param bool $pre_orderable pre_orderable
     *
     * @return $this
     */
    public function setPreOrderable($pre_orderable)
    {
        $this->container['pre_orderable'] = $pre_orderable;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets on_order
     *
     * @return int
     */
    public function getOnOrder()
    {
        return $this->container['on_order'];
    }

    /**
     * Sets on_order
     *
     * @param int $on_order on_order
     *
     * @return $this
     */
    public function setOnOrder($on_order)
    {
        $this->container['on_order'] = $on_order;

        return $this;
    }

    /**
     * Gets required_by_back_order
     *
     * @return int
     */
    public function getRequiredByBackOrder()
    {
        return $this->container['required_by_back_order'];
    }

    /**
     * Sets required_by_back_order
     *
     * @param int $required_by_back_order required_by_back_order
     *
     * @return $this
     */
    public function setRequiredByBackOrder($required_by_back_order)
    {
        $this->container['required_by_back_order'] = $required_by_back_order;

        return $this;
    }

    /**
     * Gets available_for_pre_order
     *
     * @return int
     */
    public function getAvailableForPreOrder()
    {
        return $this->container['available_for_pre_order'];
    }

    /**
     * Sets available_for_pre_order
     *
     * @param int $available_for_pre_order available_for_pre_order
     *
     * @return $this
     */
    public function setAvailableForPreOrder($available_for_pre_order)
    {
        $this->container['available_for_pre_order'] = $available_for_pre_order;

        return $this;
    }

    /**
     * Gets eta_for_new_orders
     *
     * @return \DateTime
     */
    public function getEtaForNewOrders()
    {
        return $this->container['eta_for_new_orders'];
    }

    /**
     * Sets eta_for_new_orders
     *
     * @param \DateTime $eta_for_new_orders eta_for_new_orders
     *
     * @return $this
     */
    public function setEtaForNewOrders($eta_for_new_orders)
    {
        $this->container['eta_for_new_orders'] = $eta_for_new_orders;

        return $this;
    }

    /**
     * Gets breakdown
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesStockAPIASNBreakdown[]
     */
    public function getBreakdown()
    {
        return $this->container['breakdown'];
    }

    /**
     * Sets breakdown
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesStockAPIASNBreakdown[] $breakdown breakdown
     *
     * @return $this
     */
    public function setBreakdown($breakdown)
    {
        $this->container['breakdown'] = $breakdown;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


