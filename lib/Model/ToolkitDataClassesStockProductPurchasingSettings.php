<?php
/**
 * ToolkitDataClassesStockProductPurchasingSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockProductPurchasingSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockProductPurchasingSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.ProductPurchasingSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'default_min_order_qty' => 'int',
        'default_max_order_qty' => 'int',
        'default_order_qty' => 'int',
        'include_linked_items' => 'bool',
        'exclude_from_forecast' => 'bool',
        'forecast_period_days' => 'int',
        'lead_time_days' => 'int',
        'avg_daily_consumption' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'default_min_order_qty' => 'int32',
        'default_max_order_qty' => 'int32',
        'default_order_qty' => 'int32',
        'include_linked_items' => null,
        'exclude_from_forecast' => null,
        'forecast_period_days' => 'int32',
        'lead_time_days' => 'int32',
        'avg_daily_consumption' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'default_min_order_qty' => 'DefaultMinOrderQty',
        'default_max_order_qty' => 'DefaultMaxOrderQty',
        'default_order_qty' => 'DefaultOrderQty',
        'include_linked_items' => 'IncludeLinkedItems',
        'exclude_from_forecast' => 'ExcludeFromForecast',
        'forecast_period_days' => 'ForecastPeriodDays',
        'lead_time_days' => 'LeadTimeDays',
        'avg_daily_consumption' => 'AvgDailyConsumption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'default_min_order_qty' => 'setDefaultMinOrderQty',
        'default_max_order_qty' => 'setDefaultMaxOrderQty',
        'default_order_qty' => 'setDefaultOrderQty',
        'include_linked_items' => 'setIncludeLinkedItems',
        'exclude_from_forecast' => 'setExcludeFromForecast',
        'forecast_period_days' => 'setForecastPeriodDays',
        'lead_time_days' => 'setLeadTimeDays',
        'avg_daily_consumption' => 'setAvgDailyConsumption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'default_min_order_qty' => 'getDefaultMinOrderQty',
        'default_max_order_qty' => 'getDefaultMaxOrderQty',
        'default_order_qty' => 'getDefaultOrderQty',
        'include_linked_items' => 'getIncludeLinkedItems',
        'exclude_from_forecast' => 'getExcludeFromForecast',
        'forecast_period_days' => 'getForecastPeriodDays',
        'lead_time_days' => 'getLeadTimeDays',
        'avg_daily_consumption' => 'getAvgDailyConsumption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['default_min_order_qty'] = isset($data['default_min_order_qty']) ? $data['default_min_order_qty'] : null;
        $this->container['default_max_order_qty'] = isset($data['default_max_order_qty']) ? $data['default_max_order_qty'] : null;
        $this->container['default_order_qty'] = isset($data['default_order_qty']) ? $data['default_order_qty'] : null;
        $this->container['include_linked_items'] = isset($data['include_linked_items']) ? $data['include_linked_items'] : null;
        $this->container['exclude_from_forecast'] = isset($data['exclude_from_forecast']) ? $data['exclude_from_forecast'] : null;
        $this->container['forecast_period_days'] = isset($data['forecast_period_days']) ? $data['forecast_period_days'] : null;
        $this->container['lead_time_days'] = isset($data['lead_time_days']) ? $data['lead_time_days'] : null;
        $this->container['avg_daily_consumption'] = isset($data['avg_daily_consumption']) ? $data['avg_daily_consumption'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets default_min_order_qty
     *
     * @return int
     */
    public function getDefaultMinOrderQty()
    {
        return $this->container['default_min_order_qty'];
    }

    /**
     * Sets default_min_order_qty
     *
     * @param int $default_min_order_qty default_min_order_qty
     *
     * @return $this
     */
    public function setDefaultMinOrderQty($default_min_order_qty)
    {
        $this->container['default_min_order_qty'] = $default_min_order_qty;

        return $this;
    }

    /**
     * Gets default_max_order_qty
     *
     * @return int
     */
    public function getDefaultMaxOrderQty()
    {
        return $this->container['default_max_order_qty'];
    }

    /**
     * Sets default_max_order_qty
     *
     * @param int $default_max_order_qty default_max_order_qty
     *
     * @return $this
     */
    public function setDefaultMaxOrderQty($default_max_order_qty)
    {
        $this->container['default_max_order_qty'] = $default_max_order_qty;

        return $this;
    }

    /**
     * Gets default_order_qty
     *
     * @return int
     */
    public function getDefaultOrderQty()
    {
        return $this->container['default_order_qty'];
    }

    /**
     * Sets default_order_qty
     *
     * @param int $default_order_qty default_order_qty
     *
     * @return $this
     */
    public function setDefaultOrderQty($default_order_qty)
    {
        $this->container['default_order_qty'] = $default_order_qty;

        return $this;
    }

    /**
     * Gets include_linked_items
     *
     * @return bool
     */
    public function getIncludeLinkedItems()
    {
        return $this->container['include_linked_items'];
    }

    /**
     * Sets include_linked_items
     *
     * @param bool $include_linked_items include_linked_items
     *
     * @return $this
     */
    public function setIncludeLinkedItems($include_linked_items)
    {
        $this->container['include_linked_items'] = $include_linked_items;

        return $this;
    }

    /**
     * Gets exclude_from_forecast
     *
     * @return bool
     */
    public function getExcludeFromForecast()
    {
        return $this->container['exclude_from_forecast'];
    }

    /**
     * Sets exclude_from_forecast
     *
     * @param bool $exclude_from_forecast exclude_from_forecast
     *
     * @return $this
     */
    public function setExcludeFromForecast($exclude_from_forecast)
    {
        $this->container['exclude_from_forecast'] = $exclude_from_forecast;

        return $this;
    }

    /**
     * Gets forecast_period_days
     *
     * @return int
     */
    public function getForecastPeriodDays()
    {
        return $this->container['forecast_period_days'];
    }

    /**
     * Sets forecast_period_days
     *
     * @param int $forecast_period_days forecast_period_days
     *
     * @return $this
     */
    public function setForecastPeriodDays($forecast_period_days)
    {
        $this->container['forecast_period_days'] = $forecast_period_days;

        return $this;
    }

    /**
     * Gets lead_time_days
     *
     * @return int
     */
    public function getLeadTimeDays()
    {
        return $this->container['lead_time_days'];
    }

    /**
     * Sets lead_time_days
     *
     * @param int $lead_time_days lead_time_days
     *
     * @return $this
     */
    public function setLeadTimeDays($lead_time_days)
    {
        $this->container['lead_time_days'] = $lead_time_days;

        return $this;
    }

    /**
     * Gets avg_daily_consumption
     *
     * @return int
     */
    public function getAvgDailyConsumption()
    {
        return $this->container['avg_daily_consumption'];
    }

    /**
     * Sets avg_daily_consumption
     *
     * @param int $avg_daily_consumption avg_daily_consumption
     *
     * @return $this
     */
    public function setAvgDailyConsumption($avg_daily_consumption)
    {
        $this->container['avg_daily_consumption'] = $avg_daily_consumption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


