<?php
/**
 * ToolkitDataClassesStockAPINewASNConnectAction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockAPINewASNConnectAction Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesStockAPINewASNConnectAction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.API.NewASNConnectAction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'source_asnid' => 'string',
        'account_id' => 'int',
        'extra_code1' => 'string',
        'extra_code2' => 'string',
        'extra_code3' => 'string',
        'extra_code4' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'source_asnid' => null,
        'account_id' => 'int32',
        'extra_code1' => null,
        'extra_code2' => null,
        'extra_code3' => null,
        'extra_code4' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'Type',
        'source_asnid' => 'SourceASNId',
        'account_id' => 'AccountId',
        'extra_code1' => 'ExtraCode1',
        'extra_code2' => 'ExtraCode2',
        'extra_code3' => 'ExtraCode3',
        'extra_code4' => 'ExtraCode4'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'source_asnid' => 'setSourceAsnid',
        'account_id' => 'setAccountId',
        'extra_code1' => 'setExtraCode1',
        'extra_code2' => 'setExtraCode2',
        'extra_code3' => 'setExtraCode3',
        'extra_code4' => 'setExtraCode4'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'source_asnid' => 'getSourceAsnid',
        'account_id' => 'getAccountId',
        'extra_code1' => 'getExtraCode1',
        'extra_code2' => 'getExtraCode2',
        'extra_code3' => 'getExtraCode3',
        'extra_code4' => 'getExtraCode4'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['source_asnid'] = isset($data['source_asnid']) ? $data['source_asnid'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['extra_code1'] = isset($data['extra_code1']) ? $data['extra_code1'] : null;
        $this->container['extra_code2'] = isset($data['extra_code2']) ? $data['extra_code2'] : null;
        $this->container['extra_code3'] = isset($data['extra_code3']) ? $data['extra_code3'] : null;
        $this->container['extra_code4'] = isset($data['extra_code4']) ? $data['extra_code4'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source_asnid
     *
     * @return string
     */
    public function getSourceAsnid()
    {
        return $this->container['source_asnid'];
    }

    /**
     * Sets source_asnid
     *
     * @param string $source_asnid source_asnid
     *
     * @return $this
     */
    public function setSourceAsnid($source_asnid)
    {
        $this->container['source_asnid'] = $source_asnid;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id account_id
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets extra_code1
     *
     * @return string
     */
    public function getExtraCode1()
    {
        return $this->container['extra_code1'];
    }

    /**
     * Sets extra_code1
     *
     * @param string $extra_code1 extra_code1
     *
     * @return $this
     */
    public function setExtraCode1($extra_code1)
    {
        $this->container['extra_code1'] = $extra_code1;

        return $this;
    }

    /**
     * Gets extra_code2
     *
     * @return string
     */
    public function getExtraCode2()
    {
        return $this->container['extra_code2'];
    }

    /**
     * Sets extra_code2
     *
     * @param string $extra_code2 extra_code2
     *
     * @return $this
     */
    public function setExtraCode2($extra_code2)
    {
        $this->container['extra_code2'] = $extra_code2;

        return $this;
    }

    /**
     * Gets extra_code3
     *
     * @return string
     */
    public function getExtraCode3()
    {
        return $this->container['extra_code3'];
    }

    /**
     * Sets extra_code3
     *
     * @param string $extra_code3 extra_code3
     *
     * @return $this
     */
    public function setExtraCode3($extra_code3)
    {
        $this->container['extra_code3'] = $extra_code3;

        return $this;
    }

    /**
     * Gets extra_code4
     *
     * @return string
     */
    public function getExtraCode4()
    {
        return $this->container['extra_code4'];
    }

    /**
     * Sets extra_code4
     *
     * @param string $extra_code4 extra_code4
     *
     * @return $this
     */
    public function setExtraCode4($extra_code4)
    {
        $this->container['extra_code4'] = $extra_code4;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


