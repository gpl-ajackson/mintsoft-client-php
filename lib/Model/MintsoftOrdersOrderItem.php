<?php
/**
 * ToolkitDataClassesOrdersOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersOrderItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftOrdersOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.OrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'product_id' => 'int',
        'quantity' => 'int',
        'allocated' => 'int',
        'commited' => 'int',
        'on_back_order' => 'int',
        'source_line_sub_total' => 'double',
        'source_line_total_tax' => 'double',
        'source_line_total_discount' => 'double',
        'source_line_total' => 'double',
        'price' => 'double',
        'vat' => 'double',
        'discount' => 'double',
        'price_net' => 'double',
        'tax' => 'double',
        'discount_gross' => 'double',
        'tax_rate' => 'double',
        'discount_net' => 'double',
        'discount_tax' => 'double',
        'net_paid' => 'double',
        'tax_paid' => 'double',
        'total_tax' => 'double',
        'details' => 'string',
        'sku' => 'string',
        'order_item_name_values' => '\Swagger\Client\Model\ToolkitDataClassesOrdersOrderItemNameValue[]',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'product_id' => 'int32',
        'quantity' => 'int32',
        'allocated' => 'int32',
        'commited' => 'int32',
        'on_back_order' => 'int32',
        'source_line_sub_total' => 'double',
        'source_line_total_tax' => 'double',
        'source_line_total_discount' => 'double',
        'source_line_total' => 'double',
        'price' => 'double',
        'vat' => 'double',
        'discount' => 'double',
        'price_net' => 'double',
        'tax' => 'double',
        'discount_gross' => 'double',
        'tax_rate' => 'double',
        'discount_net' => 'double',
        'discount_tax' => 'double',
        'net_paid' => 'double',
        'tax_paid' => 'double',
        'total_tax' => 'double',
        'details' => null,
        'sku' => null,
        'order_item_name_values' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'product_id' => 'ProductId',
        'quantity' => 'Quantity',
        'allocated' => 'Allocated',
        'commited' => 'Commited',
        'on_back_order' => 'OnBackOrder',
        'source_line_sub_total' => 'SourceLineSubTotal',
        'source_line_total_tax' => 'SourceLineTotalTax',
        'source_line_total_discount' => 'SourceLineTotalDiscount',
        'source_line_total' => 'SourceLineTotal',
        'price' => 'Price',
        'vat' => 'Vat',
        'discount' => 'Discount',
        'price_net' => 'PriceNet',
        'tax' => 'Tax',
        'discount_gross' => 'DiscountGross',
        'tax_rate' => 'TaxRate',
        'discount_net' => 'DiscountNet',
        'discount_tax' => 'DiscountTax',
        'net_paid' => 'NetPaid',
        'tax_paid' => 'TaxPaid',
        'total_tax' => 'TotalTax',
        'details' => 'Details',
        'sku' => 'SKU',
        'order_item_name_values' => 'OrderItemNameValues',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'product_id' => 'setProductId',
        'quantity' => 'setQuantity',
        'allocated' => 'setAllocated',
        'commited' => 'setCommited',
        'on_back_order' => 'setOnBackOrder',
        'source_line_sub_total' => 'setSourceLineSubTotal',
        'source_line_total_tax' => 'setSourceLineTotalTax',
        'source_line_total_discount' => 'setSourceLineTotalDiscount',
        'source_line_total' => 'setSourceLineTotal',
        'price' => 'setPrice',
        'vat' => 'setVat',
        'discount' => 'setDiscount',
        'price_net' => 'setPriceNet',
        'tax' => 'setTax',
        'discount_gross' => 'setDiscountGross',
        'tax_rate' => 'setTaxRate',
        'discount_net' => 'setDiscountNet',
        'discount_tax' => 'setDiscountTax',
        'net_paid' => 'setNetPaid',
        'tax_paid' => 'setTaxPaid',
        'total_tax' => 'setTotalTax',
        'details' => 'setDetails',
        'sku' => 'setSku',
        'order_item_name_values' => 'setOrderItemNameValues',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'product_id' => 'getProductId',
        'quantity' => 'getQuantity',
        'allocated' => 'getAllocated',
        'commited' => 'getCommited',
        'on_back_order' => 'getOnBackOrder',
        'source_line_sub_total' => 'getSourceLineSubTotal',
        'source_line_total_tax' => 'getSourceLineTotalTax',
        'source_line_total_discount' => 'getSourceLineTotalDiscount',
        'source_line_total' => 'getSourceLineTotal',
        'price' => 'getPrice',
        'vat' => 'getVat',
        'discount' => 'getDiscount',
        'price_net' => 'getPriceNet',
        'tax' => 'getTax',
        'discount_gross' => 'getDiscountGross',
        'tax_rate' => 'getTaxRate',
        'discount_net' => 'getDiscountNet',
        'discount_tax' => 'getDiscountTax',
        'net_paid' => 'getNetPaid',
        'tax_paid' => 'getTaxPaid',
        'total_tax' => 'getTotalTax',
        'details' => 'getDetails',
        'sku' => 'getSku',
        'order_item_name_values' => 'getOrderItemNameValues',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['allocated'] = isset($data['allocated']) ? $data['allocated'] : null;
        $this->container['commited'] = isset($data['commited']) ? $data['commited'] : null;
        $this->container['on_back_order'] = isset($data['on_back_order']) ? $data['on_back_order'] : null;
        $this->container['source_line_sub_total'] = isset($data['source_line_sub_total']) ? $data['source_line_sub_total'] : null;
        $this->container['source_line_total_tax'] = isset($data['source_line_total_tax']) ? $data['source_line_total_tax'] : null;
        $this->container['source_line_total_discount'] = isset($data['source_line_total_discount']) ? $data['source_line_total_discount'] : null;
        $this->container['source_line_total'] = isset($data['source_line_total']) ? $data['source_line_total'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['vat'] = isset($data['vat']) ? $data['vat'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['price_net'] = isset($data['price_net']) ? $data['price_net'] : null;
        $this->container['tax'] = isset($data['tax']) ? $data['tax'] : null;
        $this->container['discount_gross'] = isset($data['discount_gross']) ? $data['discount_gross'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['discount_net'] = isset($data['discount_net']) ? $data['discount_net'] : null;
        $this->container['discount_tax'] = isset($data['discount_tax']) ? $data['discount_tax'] : null;
        $this->container['net_paid'] = isset($data['net_paid']) ? $data['net_paid'] : null;
        $this->container['tax_paid'] = isset($data['tax_paid']) ? $data['tax_paid'] : null;
        $this->container['total_tax'] = isset($data['total_tax']) ? $data['total_tax'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['order_item_name_values'] = isset($data['order_item_name_values']) ? $data['order_item_name_values'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets allocated
     *
     * @return int
     */
    public function getAllocated()
    {
        return $this->container['allocated'];
    }

    /**
     * Sets allocated
     *
     * @param int $allocated allocated
     *
     * @return $this
     */
    public function setAllocated($allocated)
    {
        $this->container['allocated'] = $allocated;

        return $this;
    }

    /**
     * Gets commited
     *
     * @return int
     */
    public function getCommited()
    {
        return $this->container['commited'];
    }

    /**
     * Sets commited
     *
     * @param int $commited commited
     *
     * @return $this
     */
    public function setCommited($commited)
    {
        $this->container['commited'] = $commited;

        return $this;
    }

    /**
     * Gets on_back_order
     *
     * @return int
     */
    public function getOnBackOrder()
    {
        return $this->container['on_back_order'];
    }

    /**
     * Sets on_back_order
     *
     * @param int $on_back_order on_back_order
     *
     * @return $this
     */
    public function setOnBackOrder($on_back_order)
    {
        $this->container['on_back_order'] = $on_back_order;

        return $this;
    }

    /**
     * Gets source_line_sub_total
     *
     * @return double
     */
    public function getSourceLineSubTotal()
    {
        return $this->container['source_line_sub_total'];
    }

    /**
     * Sets source_line_sub_total
     *
     * @param double $source_line_sub_total source_line_sub_total
     *
     * @return $this
     */
    public function setSourceLineSubTotal($source_line_sub_total)
    {
        $this->container['source_line_sub_total'] = $source_line_sub_total;

        return $this;
    }

    /**
     * Gets source_line_total_tax
     *
     * @return double
     */
    public function getSourceLineTotalTax()
    {
        return $this->container['source_line_total_tax'];
    }

    /**
     * Sets source_line_total_tax
     *
     * @param double $source_line_total_tax source_line_total_tax
     *
     * @return $this
     */
    public function setSourceLineTotalTax($source_line_total_tax)
    {
        $this->container['source_line_total_tax'] = $source_line_total_tax;

        return $this;
    }

    /**
     * Gets source_line_total_discount
     *
     * @return double
     */
    public function getSourceLineTotalDiscount()
    {
        return $this->container['source_line_total_discount'];
    }

    /**
     * Sets source_line_total_discount
     *
     * @param double $source_line_total_discount source_line_total_discount
     *
     * @return $this
     */
    public function setSourceLineTotalDiscount($source_line_total_discount)
    {
        $this->container['source_line_total_discount'] = $source_line_total_discount;

        return $this;
    }

    /**
     * Gets source_line_total
     *
     * @return double
     */
    public function getSourceLineTotal()
    {
        return $this->container['source_line_total'];
    }

    /**
     * Sets source_line_total
     *
     * @param double $source_line_total source_line_total
     *
     * @return $this
     */
    public function setSourceLineTotal($source_line_total)
    {
        $this->container['source_line_total'] = $source_line_total;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets vat
     *
     * @return double
     */
    public function getVat()
    {
        return $this->container['vat'];
    }

    /**
     * Sets vat
     *
     * @param double $vat vat
     *
     * @return $this
     */
    public function setVat($vat)
    {
        $this->container['vat'] = $vat;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets price_net
     *
     * @return double
     */
    public function getPriceNet()
    {
        return $this->container['price_net'];
    }

    /**
     * Sets price_net
     *
     * @param double $price_net price_net
     *
     * @return $this
     */
    public function setPriceNet($price_net)
    {
        $this->container['price_net'] = $price_net;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return double
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param double $tax tax
     *
     * @return $this
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets discount_gross
     *
     * @return double
     */
    public function getDiscountGross()
    {
        return $this->container['discount_gross'];
    }

    /**
     * Sets discount_gross
     *
     * @param double $discount_gross discount_gross
     *
     * @return $this
     */
    public function setDiscountGross($discount_gross)
    {
        $this->container['discount_gross'] = $discount_gross;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return double
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param double $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets discount_net
     *
     * @return double
     */
    public function getDiscountNet()
    {
        return $this->container['discount_net'];
    }

    /**
     * Sets discount_net
     *
     * @param double $discount_net discount_net
     *
     * @return $this
     */
    public function setDiscountNet($discount_net)
    {
        $this->container['discount_net'] = $discount_net;

        return $this;
    }

    /**
     * Gets discount_tax
     *
     * @return double
     */
    public function getDiscountTax()
    {
        return $this->container['discount_tax'];
    }

    /**
     * Sets discount_tax
     *
     * @param double $discount_tax discount_tax
     *
     * @return $this
     */
    public function setDiscountTax($discount_tax)
    {
        $this->container['discount_tax'] = $discount_tax;

        return $this;
    }

    /**
     * Gets net_paid
     *
     * @return double
     */
    public function getNetPaid()
    {
        return $this->container['net_paid'];
    }

    /**
     * Sets net_paid
     *
     * @param double $net_paid net_paid
     *
     * @return $this
     */
    public function setNetPaid($net_paid)
    {
        $this->container['net_paid'] = $net_paid;

        return $this;
    }

    /**
     * Gets tax_paid
     *
     * @return double
     */
    public function getTaxPaid()
    {
        return $this->container['tax_paid'];
    }

    /**
     * Sets tax_paid
     *
     * @param double $tax_paid tax_paid
     *
     * @return $this
     */
    public function setTaxPaid($tax_paid)
    {
        $this->container['tax_paid'] = $tax_paid;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return double
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param double $total_tax total_tax
     *
     * @return $this
     */
    public function setTotalTax($total_tax)
    {
        $this->container['total_tax'] = $total_tax;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets order_item_name_values
     *
     * @return \Swagger\Client\Model\MintsoftOrdersOrderItemNameValue[]
     */
    public function getOrderItemNameValues()
    {
        return $this->container['order_item_name_values'];
    }

    /**
     * Sets order_item_name_values
     *
     * @param \Swagger\Client\Model\MintsoftOrdersOrderItemNameValue[] $order_item_name_values order_item_name_values
     *
     * @return $this
     */
    public function setOrderItemNameValues($order_item_name_values)
    {
        $this->container['order_item_name_values'] = $order_item_name_values;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


