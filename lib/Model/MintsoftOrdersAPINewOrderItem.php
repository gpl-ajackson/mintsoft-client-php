<?php
/**
 * ToolkitDataClassesOrdersAPINewOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersAPINewOrderItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftOrdersAPINewOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.API.NewOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
        'product_id' => 'int',
        'quantity' => 'int',
        'details' => 'string',
        'unit_price' => 'double',
        'unit_price_vat' => 'double',
        'discount' => 'double',
        'order_item_name_values' => '\Swagger\Client\Model\ToolkitDataClassesOrdersAPINewOrderItemNameValue[]',
        'warehouse_id' => 'int',
        'requested_serial_no' => 'string',
        'requested_batch_no' => 'string',
        'requested_bbe_date' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => null,
        'product_id' => 'int32',
        'quantity' => 'int32',
        'details' => null,
        'unit_price' => 'double',
        'unit_price_vat' => 'double',
        'discount' => 'double',
        'order_item_name_values' => null,
        'warehouse_id' => 'int32',
        'requested_serial_no' => null,
        'requested_batch_no' => null,
        'requested_bbe_date' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'SKU',
        'product_id' => 'ProductId',
        'quantity' => 'Quantity',
        'details' => 'Details',
        'unit_price' => 'UnitPrice',
        'unit_price_vat' => 'UnitPriceVat',
        'discount' => 'Discount',
        'order_item_name_values' => 'OrderItemNameValues',
        'warehouse_id' => 'WarehouseId',
        'requested_serial_no' => 'RequestedSerialNo',
        'requested_batch_no' => 'RequestedBatchNo',
        'requested_bbe_date' => 'RequestedBBEDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'product_id' => 'setProductId',
        'quantity' => 'setQuantity',
        'details' => 'setDetails',
        'unit_price' => 'setUnitPrice',
        'unit_price_vat' => 'setUnitPriceVat',
        'discount' => 'setDiscount',
        'order_item_name_values' => 'setOrderItemNameValues',
        'warehouse_id' => 'setWarehouseId',
        'requested_serial_no' => 'setRequestedSerialNo',
        'requested_batch_no' => 'setRequestedBatchNo',
        'requested_bbe_date' => 'setRequestedBbeDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'product_id' => 'getProductId',
        'quantity' => 'getQuantity',
        'details' => 'getDetails',
        'unit_price' => 'getUnitPrice',
        'unit_price_vat' => 'getUnitPriceVat',
        'discount' => 'getDiscount',
        'order_item_name_values' => 'getOrderItemNameValues',
        'warehouse_id' => 'getWarehouseId',
        'requested_serial_no' => 'getRequestedSerialNo',
        'requested_batch_no' => 'getRequestedBatchNo',
        'requested_bbe_date' => 'getRequestedBbeDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['unit_price_vat'] = isset($data['unit_price_vat']) ? $data['unit_price_vat'] : null;
        $this->container['discount'] = isset($data['discount']) ? $data['discount'] : null;
        $this->container['order_item_name_values'] = isset($data['order_item_name_values']) ? $data['order_item_name_values'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['requested_serial_no'] = isset($data['requested_serial_no']) ? $data['requested_serial_no'] : null;
        $this->container['requested_batch_no'] = isset($data['requested_batch_no']) ? $data['requested_batch_no'] : null;
        $this->container['requested_bbe_date'] = isset($data['requested_bbe_date']) ? $data['requested_bbe_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string $details details
     *
     * @return $this
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_vat
     *
     * @return double
     */
    public function getUnitPriceVat()
    {
        return $this->container['unit_price_vat'];
    }

    /**
     * Sets unit_price_vat
     *
     * @param double $unit_price_vat unit_price_vat
     *
     * @return $this
     */
    public function setUnitPriceVat($unit_price_vat)
    {
        $this->container['unit_price_vat'] = $unit_price_vat;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return double
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param double $discount discount
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets order_item_name_values
     *
     * @return \Swagger\Client\Model\MintsoftOrdersAPINewOrderItemNameValue[]
     */
    public function getOrderItemNameValues()
    {
        return $this->container['order_item_name_values'];
    }

    /**
     * Sets order_item_name_values
     *
     * @param \Swagger\Client\Model\MintsoftOrdersAPINewOrderItemNameValue[] $order_item_name_values order_item_name_values
     *
     * @return $this
     */
    public function setOrderItemNameValues($order_item_name_values)
    {
        $this->container['order_item_name_values'] = $order_item_name_values;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets requested_serial_no
     *
     * @return string
     */
    public function getRequestedSerialNo()
    {
        return $this->container['requested_serial_no'];
    }

    /**
     * Sets requested_serial_no
     *
     * @param string $requested_serial_no requested_serial_no
     *
     * @return $this
     */
    public function setRequestedSerialNo($requested_serial_no)
    {
        $this->container['requested_serial_no'] = $requested_serial_no;

        return $this;
    }

    /**
     * Gets requested_batch_no
     *
     * @return string
     */
    public function getRequestedBatchNo()
    {
        return $this->container['requested_batch_no'];
    }

    /**
     * Sets requested_batch_no
     *
     * @param string $requested_batch_no requested_batch_no
     *
     * @return $this
     */
    public function setRequestedBatchNo($requested_batch_no)
    {
        $this->container['requested_batch_no'] = $requested_batch_no;

        return $this;
    }

    /**
     * Gets requested_bbe_date
     *
     * @return string
     */
    public function getRequestedBbeDate()
    {
        return $this->container['requested_bbe_date'];
    }

    /**
     * Sets requested_bbe_date
     *
     * @param string $requested_bbe_date requested_bbe_date
     *
     * @return $this
     */
    public function setRequestedBbeDate($requested_bbe_date)
    {
        $this->container['requested_bbe_date'] = $requested_bbe_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


