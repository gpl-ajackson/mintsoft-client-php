<?php
/**
 * ToolkitDataClassesWarehouseBookStockRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesWarehouseBookStockRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftWarehouseBookStockRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Warehouse.BookStockRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oms_version' => 'int',
        'product_id' => 'int',
        'warehouse_id' => 'int',
        'location_id' => 'int',
        'quantity' => 'int',
        'adjustment' => 'int',
        'order_id' => 'int',
        'order_item_id' => 'int',
        'asnid' => 'int',
        'comment' => 'string',
        'expiry_date' => '\DateTime',
        'batch_no' => 'string',
        'serial_no' => 'string',
        'destination_warehouse_id' => 'int',
        'destination_location_id' => 'int',
        'kit_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oms_version' => 'int32',
        'product_id' => 'int32',
        'warehouse_id' => 'int32',
        'location_id' => 'int32',
        'quantity' => 'int32',
        'adjustment' => 'int32',
        'order_id' => 'int32',
        'order_item_id' => 'int32',
        'asnid' => 'int32',
        'comment' => null,
        'expiry_date' => 'date-time',
        'batch_no' => null,
        'serial_no' => null,
        'destination_warehouse_id' => 'int32',
        'destination_location_id' => 'int32',
        'kit_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oms_version' => 'OMSVersion',
        'product_id' => 'ProductId',
        'warehouse_id' => 'WarehouseId',
        'location_id' => 'LocationId',
        'quantity' => 'Quantity',
        'adjustment' => 'Adjustment',
        'order_id' => 'OrderId',
        'order_item_id' => 'OrderItemId',
        'asnid' => 'ASNId',
        'comment' => 'Comment',
        'expiry_date' => 'ExpiryDate',
        'batch_no' => 'BatchNo',
        'serial_no' => 'SerialNo',
        'destination_warehouse_id' => 'DestinationWarehouseId',
        'destination_location_id' => 'DestinationLocationId',
        'kit_id' => 'KitId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oms_version' => 'setOmsVersion',
        'product_id' => 'setProductId',
        'warehouse_id' => 'setWarehouseId',
        'location_id' => 'setLocationId',
        'quantity' => 'setQuantity',
        'adjustment' => 'setAdjustment',
        'order_id' => 'setOrderId',
        'order_item_id' => 'setOrderItemId',
        'asnid' => 'setAsnid',
        'comment' => 'setComment',
        'expiry_date' => 'setExpiryDate',
        'batch_no' => 'setBatchNo',
        'serial_no' => 'setSerialNo',
        'destination_warehouse_id' => 'setDestinationWarehouseId',
        'destination_location_id' => 'setDestinationLocationId',
        'kit_id' => 'setKitId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oms_version' => 'getOmsVersion',
        'product_id' => 'getProductId',
        'warehouse_id' => 'getWarehouseId',
        'location_id' => 'getLocationId',
        'quantity' => 'getQuantity',
        'adjustment' => 'getAdjustment',
        'order_id' => 'getOrderId',
        'order_item_id' => 'getOrderItemId',
        'asnid' => 'getAsnid',
        'comment' => 'getComment',
        'expiry_date' => 'getExpiryDate',
        'batch_no' => 'getBatchNo',
        'serial_no' => 'getSerialNo',
        'destination_warehouse_id' => 'getDestinationWarehouseId',
        'destination_location_id' => 'getDestinationLocationId',
        'kit_id' => 'getKitId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oms_version'] = isset($data['oms_version']) ? $data['oms_version'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['adjustment'] = isset($data['adjustment']) ? $data['adjustment'] : null;
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['asnid'] = isset($data['asnid']) ? $data['asnid'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['destination_warehouse_id'] = isset($data['destination_warehouse_id']) ? $data['destination_warehouse_id'] : null;
        $this->container['destination_location_id'] = isset($data['destination_location_id']) ? $data['destination_location_id'] : null;
        $this->container['kit_id'] = isset($data['kit_id']) ? $data['kit_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) > 100)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['batch_no']) && (mb_strlen($this->container['batch_no']) < 0)) {
            $invalidProperties[] = "invalid value for 'batch_no', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oms_version
     *
     * @return int
     */
    public function getOmsVersion()
    {
        return $this->container['oms_version'];
    }

    /**
     * Sets oms_version
     *
     * @param int $oms_version oms_version
     *
     * @return $this
     */
    public function setOmsVersion($oms_version)
    {
        $this->container['oms_version'] = $oms_version;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id location_id
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets adjustment
     *
     * @return int
     */
    public function getAdjustment()
    {
        return $this->container['adjustment'];
    }

    /**
     * Sets adjustment
     *
     * @param int $adjustment adjustment
     *
     * @return $this
     */
    public function setAdjustment($adjustment)
    {
        $this->container['adjustment'] = $adjustment;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_item_id
     *
     * @return int
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param int $order_item_id order_item_id
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets asnid
     *
     * @return int
     */
    public function getAsnid()
    {
        return $this->container['asnid'];
    }

    /**
     * Sets asnid
     *
     * @param int $asnid asnid
     *
     * @return $this
     */
    public function setAsnid($asnid)
    {
        $this->container['asnid'] = $asnid;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        if (!is_null($batch_no) && (mb_strlen($batch_no) > 100)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesWarehouseBookStockRequest., must be smaller than or equal to 100.');
        }
        if (!is_null($batch_no) && (mb_strlen($batch_no) < 0)) {
            throw new \InvalidArgumentException('invalid length for $batch_no when calling ToolkitDataClassesWarehouseBookStockRequest., must be bigger than or equal to 0.');
        }

        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets destination_warehouse_id
     *
     * @return int
     */
    public function getDestinationWarehouseId()
    {
        return $this->container['destination_warehouse_id'];
    }

    /**
     * Sets destination_warehouse_id
     *
     * @param int $destination_warehouse_id destination_warehouse_id
     *
     * @return $this
     */
    public function setDestinationWarehouseId($destination_warehouse_id)
    {
        $this->container['destination_warehouse_id'] = $destination_warehouse_id;

        return $this;
    }

    /**
     * Gets destination_location_id
     *
     * @return int
     */
    public function getDestinationLocationId()
    {
        return $this->container['destination_location_id'];
    }

    /**
     * Sets destination_location_id
     *
     * @param int $destination_location_id destination_location_id
     *
     * @return $this
     */
    public function setDestinationLocationId($destination_location_id)
    {
        $this->container['destination_location_id'] = $destination_location_id;

        return $this;
    }

    /**
     * Gets kit_id
     *
     * @return int
     */
    public function getKitId()
    {
        return $this->container['kit_id'];
    }

    /**
     * Sets kit_id
     *
     * @param int $kit_id kit_id
     *
     * @return $this
     */
    public function setKitId($kit_id)
    {
        $this->container['kit_id'] = $kit_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


