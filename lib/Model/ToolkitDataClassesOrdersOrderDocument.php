<?php
/**
 * ToolkitDataClassesOrdersOrderDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersOrderDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersOrderDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.OrderDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'order_document_type_id' => 'int',
        'file_name' => 'string',
        'comments' => 'string',
        'content_type' => 'string',
        'paper_size' => 'string',
        'print_with_order' => 'bool',
        'printed' => 'bool',
        'scanned' => 'bool',
        'dangerous_file' => 'bool',
        'date_detected' => '\DateTime',
        'base64_data' => 'string',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'order_document_type_id' => 'int32',
        'file_name' => null,
        'comments' => null,
        'content_type' => null,
        'paper_size' => null,
        'print_with_order' => null,
        'printed' => null,
        'scanned' => null,
        'dangerous_file' => null,
        'date_detected' => 'date-time',
        'base64_data' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'order_document_type_id' => 'OrderDocumentTypeId',
        'file_name' => 'FileName',
        'comments' => 'Comments',
        'content_type' => 'ContentType',
        'paper_size' => 'PaperSize',
        'print_with_order' => 'PrintWithOrder',
        'printed' => 'Printed',
        'scanned' => 'Scanned',
        'dangerous_file' => 'DangerousFile',
        'date_detected' => 'DateDetected',
        'base64_data' => 'Base64Data',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'order_document_type_id' => 'setOrderDocumentTypeId',
        'file_name' => 'setFileName',
        'comments' => 'setComments',
        'content_type' => 'setContentType',
        'paper_size' => 'setPaperSize',
        'print_with_order' => 'setPrintWithOrder',
        'printed' => 'setPrinted',
        'scanned' => 'setScanned',
        'dangerous_file' => 'setDangerousFile',
        'date_detected' => 'setDateDetected',
        'base64_data' => 'setBase64Data',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'order_document_type_id' => 'getOrderDocumentTypeId',
        'file_name' => 'getFileName',
        'comments' => 'getComments',
        'content_type' => 'getContentType',
        'paper_size' => 'getPaperSize',
        'print_with_order' => 'getPrintWithOrder',
        'printed' => 'getPrinted',
        'scanned' => 'getScanned',
        'dangerous_file' => 'getDangerousFile',
        'date_detected' => 'getDateDetected',
        'base64_data' => 'getBase64Data',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['order_document_type_id'] = isset($data['order_document_type_id']) ? $data['order_document_type_id'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['content_type'] = isset($data['content_type']) ? $data['content_type'] : null;
        $this->container['paper_size'] = isset($data['paper_size']) ? $data['paper_size'] : null;
        $this->container['print_with_order'] = isset($data['print_with_order']) ? $data['print_with_order'] : null;
        $this->container['printed'] = isset($data['printed']) ? $data['printed'] : null;
        $this->container['scanned'] = isset($data['scanned']) ? $data['scanned'] : null;
        $this->container['dangerous_file'] = isset($data['dangerous_file']) ? $data['dangerous_file'] : null;
        $this->container['date_detected'] = isset($data['date_detected']) ? $data['date_detected'] : null;
        $this->container['base64_data'] = isset($data['base64_data']) ? $data['base64_data'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets order_document_type_id
     *
     * @return int
     */
    public function getOrderDocumentTypeId()
    {
        return $this->container['order_document_type_id'];
    }

    /**
     * Sets order_document_type_id
     *
     * @param int $order_document_type_id order_document_type_id
     *
     * @return $this
     */
    public function setOrderDocumentTypeId($order_document_type_id)
    {
        $this->container['order_document_type_id'] = $order_document_type_id;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name file_name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets content_type
     *
     * @return string
     */
    public function getContentType()
    {
        return $this->container['content_type'];
    }

    /**
     * Sets content_type
     *
     * @param string $content_type content_type
     *
     * @return $this
     */
    public function setContentType($content_type)
    {
        $this->container['content_type'] = $content_type;

        return $this;
    }

    /**
     * Gets paper_size
     *
     * @return string
     */
    public function getPaperSize()
    {
        return $this->container['paper_size'];
    }

    /**
     * Sets paper_size
     *
     * @param string $paper_size paper_size
     *
     * @return $this
     */
    public function setPaperSize($paper_size)
    {
        $this->container['paper_size'] = $paper_size;

        return $this;
    }

    /**
     * Gets print_with_order
     *
     * @return bool
     */
    public function getPrintWithOrder()
    {
        return $this->container['print_with_order'];
    }

    /**
     * Sets print_with_order
     *
     * @param bool $print_with_order print_with_order
     *
     * @return $this
     */
    public function setPrintWithOrder($print_with_order)
    {
        $this->container['print_with_order'] = $print_with_order;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return bool
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param bool $printed printed
     *
     * @return $this
     */
    public function setPrinted($printed)
    {
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets scanned
     *
     * @return bool
     */
    public function getScanned()
    {
        return $this->container['scanned'];
    }

    /**
     * Sets scanned
     *
     * @param bool $scanned scanned
     *
     * @return $this
     */
    public function setScanned($scanned)
    {
        $this->container['scanned'] = $scanned;

        return $this;
    }

    /**
     * Gets dangerous_file
     *
     * @return bool
     */
    public function getDangerousFile()
    {
        return $this->container['dangerous_file'];
    }

    /**
     * Sets dangerous_file
     *
     * @param bool $dangerous_file dangerous_file
     *
     * @return $this
     */
    public function setDangerousFile($dangerous_file)
    {
        $this->container['dangerous_file'] = $dangerous_file;

        return $this;
    }

    /**
     * Gets date_detected
     *
     * @return \DateTime
     */
    public function getDateDetected()
    {
        return $this->container['date_detected'];
    }

    /**
     * Sets date_detected
     *
     * @param \DateTime $date_detected date_detected
     *
     * @return $this
     */
    public function setDateDetected($date_detected)
    {
        $this->container['date_detected'] = $date_detected;

        return $this;
    }

    /**
     * Gets base64_data
     *
     * @return string
     */
    public function getBase64Data()
    {
        return $this->container['base64_data'];
    }

    /**
     * Sets base64_data
     *
     * @param string $base64_data base64_data
     *
     * @return $this
     */
    public function setBase64Data($base64_data)
    {
        $this->container['base64_data'] = $base64_data;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


