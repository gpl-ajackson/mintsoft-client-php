<?php
/**
 * ToolkitDataClassesWarehouseLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesWarehouseLocation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftWarehouseLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Warehouse.Location';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'location_type_id' => 'int',
        'simple_location_name' => 'string',
        'pick_sequence' => 'int',
        'location_name' => 'string',
        'warehouse_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'location_type_id' => 'int32',
        'simple_location_name' => null,
        'pick_sequence' => 'int32',
        'location_name' => null,
        'warehouse_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'Name',
        'location_type_id' => 'LocationTypeId',
        'simple_location_name' => 'SimpleLocationName',
        'pick_sequence' => 'PickSequence',
        'location_name' => 'LocationName',
        'warehouse_id' => 'WarehouseId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'location_type_id' => 'setLocationTypeId',
        'simple_location_name' => 'setSimpleLocationName',
        'pick_sequence' => 'setPickSequence',
        'location_name' => 'setLocationName',
        'warehouse_id' => 'setWarehouseId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'location_type_id' => 'getLocationTypeId',
        'simple_location_name' => 'getSimpleLocationName',
        'pick_sequence' => 'getPickSequence',
        'location_name' => 'getLocationName',
        'warehouse_id' => 'getWarehouseId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['location_type_id'] = isset($data['location_type_id']) ? $data['location_type_id'] : null;
        $this->container['simple_location_name'] = isset($data['simple_location_name']) ? $data['simple_location_name'] : null;
        $this->container['pick_sequence'] = isset($data['pick_sequence']) ? $data['pick_sequence'] : null;
        $this->container['location_name'] = isset($data['location_name']) ? $data['location_name'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if (!preg_match("/^[^\"'&<>()–]+$/uu", $this->container['name'])) {
            $invalidProperties[] = "invalid value for 'name', must be conform to the pattern /^[^\"'&<>()–]+$/uu.";
        }

        if (!is_null($this->container['simple_location_name']) && !preg_match("/^[^\"'&<>()–]+$/u", $this->container['simple_location_name'])) {
            $invalidProperties[] = "invalid value for 'simple_location_name', must be conform to the pattern /^[^\"'&<>()–]+$/u.";
        }

        if (!is_null($this->container['location_name']) && !preg_match("/^[^\"'&<>()–]+$/u", $this->container['location_name'])) {
            $invalidProperties[] = "invalid value for 'location_name', must be conform to the pattern /^[^\"'&<>()–]+$/u.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {

        if ((!preg_match("/^[^\"'&<>()–]+$/u", $name))) {
            throw new \InvalidArgumentException("invalid value for $name when calling ToolkitDataClassesWarehouseLocation., must conform to the pattern /^[^\"'&<>()–]+$/u.");
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets location_type_id
     *
     * @return int
     */
    public function getLocationTypeId()
    {
        return $this->container['location_type_id'];
    }

    /**
     * Sets location_type_id
     *
     * @param int $location_type_id location_type_id
     *
     * @return $this
     */
    public function setLocationTypeId($location_type_id)
    {
        $this->container['location_type_id'] = $location_type_id;

        return $this;
    }

    /**
     * Gets simple_location_name
     *
     * @return string
     */
    public function getSimpleLocationName()
    {
        return $this->container['simple_location_name'];
    }

    /**
     * Sets simple_location_name
     *
     * @param string $simple_location_name simple_location_name
     *
     * @return $this
     */
    public function setSimpleLocationName($simple_location_name)
    {

        if (!is_null($simple_location_name) && (!preg_match("/^[^\"'&<>()–]+$/u", $simple_location_name))) {
            throw new \InvalidArgumentException("invalid value for $simple_location_name when calling ToolkitDataClassesWarehouseLocation., must conform to the pattern /^[^\"'&<>()–]+$/u.");
        }

        $this->container['simple_location_name'] = $simple_location_name;

        return $this;
    }

    /**
     * Gets pick_sequence
     *
     * @return int
     */
    public function getPickSequence()
    {
        return $this->container['pick_sequence'];
    }

    /**
     * Sets pick_sequence
     *
     * @param int $pick_sequence pick_sequence
     *
     * @return $this
     */
    public function setPickSequence($pick_sequence)
    {
        $this->container['pick_sequence'] = $pick_sequence;

        return $this;
    }

    /**
     * Gets location_name
     *
     * @return string
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string $location_name location_name
     *
     * @return $this
     */
    public function setLocationName($location_name)
    {

        if (!is_null($location_name) && (!preg_match("/^[^\"'&<>()–]+$/u", $location_name))) {
            throw new \InvalidArgumentException("invalid value for $location_name when calling ToolkitDataClassesWarehouseLocation., must conform to the pattern /^[^\"'&<>()–]+$/u.");
        }

        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


