<?php
/**
 * ToolkitDataClassesStockAPINewASN
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockAPINewASN Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftStockAPINewASN implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.API.NewASN';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'warehouse_id' => 'int',
        'po_reference' => 'string',
        'supplier' => 'string',
        'supplier_notes' => 'string',
        'estimated_delivery' => '\DateTime',
        'comments' => 'string',
        'goods_in_type' => 'string',
        'quantity' => 'int',
        'product_supplier_id' => 'int',
        'client_id' => 'int',
        'items' => '\Swagger\Client\Model\MintsoftStockAPINewASNItem[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'warehouse_id' => 'int32',
        'po_reference' => null,
        'supplier' => null,
        'supplier_notes' => null,
        'estimated_delivery' => 'date-time',
        'comments' => null,
        'goods_in_type' => null,
        'quantity' => 'int32',
        'product_supplier_id' => 'int32',
        'client_id' => 'int32',
        'items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warehouse_id' => 'WarehouseId',
        'po_reference' => 'POReference',
        'supplier' => 'Supplier',
        'supplier_notes' => 'SupplierNotes',
        'estimated_delivery' => 'EstimatedDelivery',
        'comments' => 'Comments',
        'goods_in_type' => 'GoodsInType',
        'quantity' => 'Quantity',
        'product_supplier_id' => 'ProductSupplierId',
        'client_id' => 'ClientId',
        'items' => 'Items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warehouse_id' => 'setWarehouseId',
        'po_reference' => 'setPoReference',
        'supplier' => 'setSupplier',
        'supplier_notes' => 'setSupplierNotes',
        'estimated_delivery' => 'setEstimatedDelivery',
        'comments' => 'setComments',
        'goods_in_type' => 'setGoodsInType',
        'quantity' => 'setQuantity',
        'product_supplier_id' => 'setProductSupplierId',
        'client_id' => 'setClientId',
        'items' => 'setItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warehouse_id' => 'getWarehouseId',
        'po_reference' => 'getPoReference',
        'supplier' => 'getSupplier',
        'supplier_notes' => 'getSupplierNotes',
        'estimated_delivery' => 'getEstimatedDelivery',
        'comments' => 'getComments',
        'goods_in_type' => 'getGoodsInType',
        'quantity' => 'getQuantity',
        'product_supplier_id' => 'getProductSupplierId',
        'client_id' => 'getClientId',
        'items' => 'getItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['po_reference'] = isset($data['po_reference']) ? $data['po_reference'] : null;
        $this->container['supplier'] = isset($data['supplier']) ? $data['supplier'] : null;
        $this->container['supplier_notes'] = isset($data['supplier_notes']) ? $data['supplier_notes'] : null;
        $this->container['estimated_delivery'] = isset($data['estimated_delivery']) ? $data['estimated_delivery'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['goods_in_type'] = isset($data['goods_in_type']) ? $data['goods_in_type'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['product_supplier_id'] = isset($data['product_supplier_id']) ? $data['product_supplier_id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) > 250)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['supplier']) && (mb_strlen($this->container['supplier']) < 0)) {
            $invalidProperties[] = "invalid value for 'supplier', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets po_reference
     *
     * @return string
     */
    public function getPoReference()
    {
        return $this->container['po_reference'];
    }

    /**
     * Sets po_reference
     *
     * @param string $po_reference po_reference
     *
     * @return $this
     */
    public function setPoReference($po_reference)
    {
        $this->container['po_reference'] = $po_reference;

        return $this;
    }

    /**
     * Gets supplier
     *
     * @return string
     */
    public function getSupplier()
    {
        return $this->container['supplier'];
    }

    /**
     * Sets supplier
     *
     * @param string $supplier supplier
     *
     * @return $this
     */
    public function setSupplier($supplier)
    {
        if (!is_null($supplier) && (mb_strlen($supplier) > 250)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling ToolkitDataClassesStockAPINewASN., must be smaller than or equal to 250.');
        }
        if (!is_null($supplier) && (mb_strlen($supplier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $supplier when calling ToolkitDataClassesStockAPINewASN., must be bigger than or equal to 0.');
        }

        $this->container['supplier'] = $supplier;

        return $this;
    }

    /**
     * Gets supplier_notes
     *
     * @return string
     */
    public function getSupplierNotes()
    {
        return $this->container['supplier_notes'];
    }

    /**
     * Sets supplier_notes
     *
     * @param string $supplier_notes supplier_notes
     *
     * @return $this
     */
    public function setSupplierNotes($supplier_notes)
    {
        $this->container['supplier_notes'] = $supplier_notes;

        return $this;
    }

    /**
     * Gets estimated_delivery
     *
     * @return \DateTime
     */
    public function getEstimatedDelivery()
    {
        return $this->container['estimated_delivery'];
    }

    /**
     * Sets estimated_delivery
     *
     * @param \DateTime $estimated_delivery estimated_delivery
     *
     * @return $this
     */
    public function setEstimatedDelivery($estimated_delivery)
    {
        $this->container['estimated_delivery'] = $estimated_delivery;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets goods_in_type
     *
     * @return string
     */
    public function getGoodsInType()
    {
        return $this->container['goods_in_type'];
    }

    /**
     * Sets goods_in_type
     *
     * @param string $goods_in_type goods_in_type
     *
     * @return $this
     */
    public function setGoodsInType($goods_in_type)
    {
        $this->container['goods_in_type'] = $goods_in_type;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets product_supplier_id
     *
     * @return int
     */
    public function getProductSupplierId()
    {
        return $this->container['product_supplier_id'];
    }

    /**
     * Sets product_supplier_id
     *
     * @param int $product_supplier_id product_supplier_id
     *
     * @return $this
     */
    public function setProductSupplierId($product_supplier_id)
    {
        $this->container['product_supplier_id'] = $product_supplier_id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\MintsoftStockAPINewASNItem[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\MintsoftStockAPINewASNItem[] $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


