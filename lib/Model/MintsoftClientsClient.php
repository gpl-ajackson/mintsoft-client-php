<?php
/**
 * ToolkitDataClassesClientsClient
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesClientsClient Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftClientsClient implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Clients.Client';

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerTypes = [
        'short_name' => 'string',
        'name' => 'string',
        'code' => 'string',
        'brand_name' => 'string',
        'contact_name' => 'string',
        'contact_number' => 'string',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'address_line3' => 'string',
        'town' => 'string',
        'county' => 'string',
        'postcode' => 'string',
        'ppi_number' => 'string',
        'vat_number' => 'string',
        'eori_number' => 'string',
        'ukims_number' => 'string',
        'voec_number' => 'string',
        'vat_exempt' => 'bool',
        'nireori_number' => 'string',
        'ioss_number' => 'string',
        'country_id' => 'int',
        'contact_email' => 'string',
        'packaging_instructions' => 'string',
        'currency_id' => 'int',
        'active' => 'string',
        'on_stop' => 'bool',
        'accounting_integration_type' => 'string',
        'customer_registration_number' => 'string',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @var string[]
     */
    protected static $swaggerFormats = [
        'short_name' => null,
        'name' => null,
        'code' => null,
        'brand_name' => null,
        'contact_name' => null,
        'contact_number' => null,
        'address_line1' => null,
        'address_line2' => null,
        'address_line3' => null,
        'town' => null,
        'county' => null,
        'postcode' => null,
        'ppi_number' => null,
        'vat_number' => null,
        'eori_number' => null,
        'ukims_number' => null,
        'voec_number' => null,
        'vat_exempt' => null,
        'nireori_number' => null,
        'ioss_number' => null,
        'country_id' => 'int32',
        'contact_email' => null,
        'packaging_instructions' => null,
        'currency_id' => 'int32',
        'active' => null,
        'on_stop' => null,
        'accounting_integration_type' => null,
        'customer_registration_number' => null,
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'short_name' => 'ShortName',
        'name' => 'Name',
        'code' => 'Code',
        'brand_name' => 'BrandName',
        'contact_name' => 'ContactName',
        'contact_number' => 'ContactNumber',
        'address_line1' => 'AddressLine1',
        'address_line2' => 'AddressLine2',
        'address_line3' => 'AddressLine3',
        'town' => 'Town',
        'county' => 'County',
        'postcode' => 'Postcode',
        'ppi_number' => 'PPINumber',
        'vat_number' => 'VATNumber',
        'eori_number' => 'EORINumber',
        'ukims_number' => 'UKIMSNumber',
        'voec_number' => 'VOECNumber',
        'vat_exempt' => 'VatExempt',
        'nireori_number' => 'NIREORINumber',
        'ioss_number' => 'IOSSNumber',
        'country_id' => 'CountryId',
        'contact_email' => 'ContactEmail',
        'packaging_instructions' => 'PackagingInstructions',
        'currency_id' => 'CurrencyId',
        'active' => 'Active',
        'on_stop' => 'OnStop',
        'accounting_integration_type' => 'AccountingIntegrationType',
        'customer_registration_number' => 'CustomerRegistrationNumber',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'short_name' => 'setShortName',
        'name' => 'setName',
        'code' => 'setCode',
        'brand_name' => 'setBrandName',
        'contact_name' => 'setContactName',
        'contact_number' => 'setContactNumber',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'address_line3' => 'setAddressLine3',
        'town' => 'setTown',
        'county' => 'setCounty',
        'postcode' => 'setPostcode',
        'ppi_number' => 'setPpiNumber',
        'vat_number' => 'setVatNumber',
        'eori_number' => 'setEoriNumber',
        'ukims_number' => 'setUkimsNumber',
        'voec_number' => 'setVoecNumber',
        'vat_exempt' => 'setVatExempt',
        'nireori_number' => 'setNireoriNumber',
        'ioss_number' => 'setIossNumber',
        'country_id' => 'setCountryId',
        'contact_email' => 'setContactEmail',
        'packaging_instructions' => 'setPackagingInstructions',
        'currency_id' => 'setCurrencyId',
        'active' => 'setActive',
        'on_stop' => 'setOnStop',
        'accounting_integration_type' => 'setAccountingIntegrationType',
        'customer_registration_number' => 'setCustomerRegistrationNumber',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'short_name' => 'getShortName',
        'name' => 'getName',
        'code' => 'getCode',
        'brand_name' => 'getBrandName',
        'contact_name' => 'getContactName',
        'contact_number' => 'getContactNumber',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'address_line3' => 'getAddressLine3',
        'town' => 'getTown',
        'county' => 'getCounty',
        'postcode' => 'getPostcode',
        'ppi_number' => 'getPpiNumber',
        'vat_number' => 'getVatNumber',
        'eori_number' => 'getEoriNumber',
        'ukims_number' => 'getUkimsNumber',
        'voec_number' => 'getVoecNumber',
        'vat_exempt' => 'getVatExempt',
        'nireori_number' => 'getNireoriNumber',
        'ioss_number' => 'getIossNumber',
        'country_id' => 'getCountryId',
        'contact_email' => 'getContactEmail',
        'packaging_instructions' => 'getPackagingInstructions',
        'currency_id' => 'getCurrencyId',
        'active' => 'getActive',
        'on_stop' => 'getOnStop',
        'accounting_integration_type' => 'getAccountingIntegrationType',
        'customer_registration_number' => 'getCustomerRegistrationNumber',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }





    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['contact_number'] = isset($data['contact_number']) ? $data['contact_number'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['address_line3'] = isset($data['address_line3']) ? $data['address_line3'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['postcode'] = isset($data['postcode']) ? $data['postcode'] : null;
        $this->container['ppi_number'] = isset($data['ppi_number']) ? $data['ppi_number'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['eori_number'] = isset($data['eori_number']) ? $data['eori_number'] : null;
        $this->container['ukims_number'] = isset($data['ukims_number']) ? $data['ukims_number'] : null;
        $this->container['voec_number'] = isset($data['voec_number']) ? $data['voec_number'] : null;
        $this->container['vat_exempt'] = isset($data['vat_exempt']) ? $data['vat_exempt'] : null;
        $this->container['nireori_number'] = isset($data['nireori_number']) ? $data['nireori_number'] : null;
        $this->container['ioss_number'] = isset($data['ioss_number']) ? $data['ioss_number'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['packaging_instructions'] = isset($data['packaging_instructions']) ? $data['packaging_instructions'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['on_stop'] = isset($data['on_stop']) ? $data['on_stop'] : null;
        $this->container['accounting_integration_type'] = isset($data['accounting_integration_type']) ? $data['accounting_integration_type'] : null;
        $this->container['customer_registration_number'] = isset($data['customer_registration_number']) ? $data['customer_registration_number'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['short_name'] === null) {
            $invalidProperties[] = "'short_name' can't be null";
        }
        if ((mb_strlen($this->container['short_name']) > 30)) {
            $invalidProperties[] = "invalid value for 'short_name', the character length must be smaller than or equal to 30.";
        }

        if ((mb_strlen($this->container['short_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'short_name', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 50)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 50.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 50)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) < 0)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['brand_name']) && (mb_strlen($this->container['brand_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'brand_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_name']) && (mb_strlen($this->container['contact_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_name']) && (mb_strlen($this->container['contact_name']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_number']) && (mb_strlen($this->container['contact_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'contact_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact_number']) && (mb_strlen($this->container['contact_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line1']) && (mb_strlen($this->container['address_line1']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line1']) && (mb_strlen($this->container['address_line1']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line2']) && (mb_strlen($this->container['address_line2']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) > 50)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['address_line3']) && (mb_strlen($this->container['address_line3']) < 0)) {
            $invalidProperties[] = "invalid value for 'address_line3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['town']) && (mb_strlen($this->container['town']) > 50)) {
            $invalidProperties[] = "invalid value for 'town', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['town']) && (mb_strlen($this->container['town']) < 0)) {
            $invalidProperties[] = "invalid value for 'town', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) > 50)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['county']) && (mb_strlen($this->container['county']) < 0)) {
            $invalidProperties[] = "invalid value for 'county', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['postcode']) && (mb_strlen($this->container['postcode']) > 50)) {
            $invalidProperties[] = "invalid value for 'postcode', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['postcode']) && (mb_strlen($this->container['postcode']) < 0)) {
            $invalidProperties[] = "invalid value for 'postcode', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ppi_number']) && (mb_strlen($this->container['ppi_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'ppi_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ppi_number']) && (mb_strlen($this->container['ppi_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'ppi_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['eori_number']) && (mb_strlen($this->container['eori_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'eori_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['eori_number']) && (mb_strlen($this->container['eori_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'eori_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ukims_number']) && (mb_strlen($this->container['ukims_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'ukims_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ukims_number']) && (mb_strlen($this->container['ukims_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'ukims_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['voec_number']) && (mb_strlen($this->container['voec_number']) > 10)) {
            $invalidProperties[] = "invalid value for 'voec_number', the character length must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['voec_number']) && (mb_strlen($this->container['voec_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'voec_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['nireori_number']) && (mb_strlen($this->container['nireori_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'nireori_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['nireori_number']) && (mb_strlen($this->container['nireori_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'nireori_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ioss_number']) && (mb_strlen($this->container['ioss_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'ioss_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ioss_number']) && (mb_strlen($this->container['ioss_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'ioss_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['contact_email']) && (mb_strlen($this->container['contact_email']) > 100)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['contact_email']) && (mb_strlen($this->container['contact_email']) < 0)) {
            $invalidProperties[] = "invalid value for 'contact_email', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['accounting_integration_type']) && (mb_strlen($this->container['accounting_integration_type']) > 100)) {
            $invalidProperties[] = "invalid value for 'accounting_integration_type', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['accounting_integration_type']) && (mb_strlen($this->container['accounting_integration_type']) < 0)) {
            $invalidProperties[] = "invalid value for 'accounting_integration_type', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customer_registration_number']) && (mb_strlen($this->container['customer_registration_number']) > 8)) {
            $invalidProperties[] = "invalid value for 'customer_registration_number', the character length must be smaller than or equal to 8.";
        }

        if (!is_null($this->container['customer_registration_number']) && (mb_strlen($this->container['customer_registration_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'customer_registration_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        if ((mb_strlen($short_name) > 30)) {
            throw new \InvalidArgumentException('invalid length for $short_name when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 30.');
        }
        if ((mb_strlen($short_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $short_name when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        if (!is_null($code) && (mb_strlen($code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($code) && (mb_strlen($code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name brand_name
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        if (!is_null($brand_name) && (mb_strlen($brand_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($brand_name) && (mb_strlen($brand_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $brand_name when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        if (!is_null($contact_name) && (mb_strlen($contact_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_name) && (mb_strlen($contact_name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_name when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_number
     *
     * @return string
     */
    public function getContactNumber()
    {
        return $this->container['contact_number'];
    }

    /**
     * Sets contact_number
     *
     * @param string $contact_number contact_number
     *
     * @return $this
     */
    public function setContactNumber($contact_number)
    {
        if (!is_null($contact_number) && (mb_strlen($contact_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $contact_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($contact_number) && (mb_strlen($contact_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['contact_number'] = $contact_number;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 address_line1
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        if (!is_null($address_line1) && (mb_strlen($address_line1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line1) && (mb_strlen($address_line1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line1 when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 address_line2
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        if (!is_null($address_line2) && (mb_strlen($address_line2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line2) && (mb_strlen($address_line2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line2 when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets address_line3
     *
     * @return string
     */
    public function getAddressLine3()
    {
        return $this->container['address_line3'];
    }

    /**
     * Sets address_line3
     *
     * @param string $address_line3 address_line3
     *
     * @return $this
     */
    public function setAddressLine3($address_line3)
    {
        if (!is_null($address_line3) && (mb_strlen($address_line3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($address_line3) && (mb_strlen($address_line3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $address_line3 when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['address_line3'] = $address_line3;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town town
     *
     * @return $this
     */
    public function setTown($town)
    {
        if (!is_null($town) && (mb_strlen($town) > 50)) {
            throw new \InvalidArgumentException('invalid length for $town when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($town) && (mb_strlen($town) < 0)) {
            throw new \InvalidArgumentException('invalid length for $town when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        if (!is_null($county) && (mb_strlen($county) > 50)) {
            throw new \InvalidArgumentException('invalid length for $county when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($county) && (mb_strlen($county) < 0)) {
            throw new \InvalidArgumentException('invalid length for $county when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets postcode
     *
     * @return string
     */
    public function getPostcode()
    {
        return $this->container['postcode'];
    }

    /**
     * Sets postcode
     *
     * @param string $postcode postcode
     *
     * @return $this
     */
    public function setPostcode($postcode)
    {
        if (!is_null($postcode) && (mb_strlen($postcode) > 50)) {
            throw new \InvalidArgumentException('invalid length for $postcode when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($postcode) && (mb_strlen($postcode) < 0)) {
            throw new \InvalidArgumentException('invalid length for $postcode when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['postcode'] = $postcode;

        return $this;
    }

    /**
     * Gets ppi_number
     *
     * @return string
     */
    public function getPpiNumber()
    {
        return $this->container['ppi_number'];
    }

    /**
     * Sets ppi_number
     *
     * @param string $ppi_number ppi_number
     *
     * @return $this
     */
    public function setPpiNumber($ppi_number)
    {
        if (!is_null($ppi_number) && (mb_strlen($ppi_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ppi_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($ppi_number) && (mb_strlen($ppi_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ppi_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['ppi_number'] = $ppi_number;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number vat_number
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($vat_number) && (mb_strlen($vat_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets eori_number
     *
     * @return string
     */
    public function getEoriNumber()
    {
        return $this->container['eori_number'];
    }

    /**
     * Sets eori_number
     *
     * @param string $eori_number eori_number
     *
     * @return $this
     */
    public function setEoriNumber($eori_number)
    {
        if (!is_null($eori_number) && (mb_strlen($eori_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $eori_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($eori_number) && (mb_strlen($eori_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $eori_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['eori_number'] = $eori_number;

        return $this;
    }

    /**
     * Gets ukims_number
     *
     * @return string
     */
    public function getUkimsNumber()
    {
        return $this->container['ukims_number'];
    }

    /**
     * Sets ukims_number
     *
     * @param string $ukims_number ukims_number
     *
     * @return $this
     */
    public function setUkimsNumber($ukims_number)
    {
        if (!is_null($ukims_number) && (mb_strlen($ukims_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ukims_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($ukims_number) && (mb_strlen($ukims_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ukims_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['ukims_number'] = $ukims_number;

        return $this;
    }

    /**
     * Gets voec_number
     *
     * @return string
     */
    public function getVoecNumber()
    {
        return $this->container['voec_number'];
    }

    /**
     * Sets voec_number
     *
     * @param string $voec_number voec_number
     *
     * @return $this
     */
    public function setVoecNumber($voec_number)
    {
        if (!is_null($voec_number) && (mb_strlen($voec_number) > 10)) {
            throw new \InvalidArgumentException('invalid length for $voec_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 10.');
        }
        if (!is_null($voec_number) && (mb_strlen($voec_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $voec_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['voec_number'] = $voec_number;

        return $this;
    }

    /**
     * Gets vat_exempt
     *
     * @return bool
     */
    public function getVatExempt()
    {
        return $this->container['vat_exempt'];
    }

    /**
     * Sets vat_exempt
     *
     * @param bool $vat_exempt vat_exempt
     *
     * @return $this
     */
    public function setVatExempt($vat_exempt)
    {
        $this->container['vat_exempt'] = $vat_exempt;

        return $this;
    }

    /**
     * Gets nireori_number
     *
     * @return string
     */
    public function getNireoriNumber()
    {
        return $this->container['nireori_number'];
    }

    /**
     * Sets nireori_number
     *
     * @param string $nireori_number nireori_number
     *
     * @return $this
     */
    public function setNireoriNumber($nireori_number)
    {
        if (!is_null($nireori_number) && (mb_strlen($nireori_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $nireori_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($nireori_number) && (mb_strlen($nireori_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $nireori_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['nireori_number'] = $nireori_number;

        return $this;
    }

    /**
     * Gets ioss_number
     *
     * @return string
     */
    public function getIossNumber()
    {
        return $this->container['ioss_number'];
    }

    /**
     * Sets ioss_number
     *
     * @param string $ioss_number ioss_number
     *
     * @return $this
     */
    public function setIossNumber($ioss_number)
    {
        if (!is_null($ioss_number) && (mb_strlen($ioss_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ioss_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 50.');
        }
        if (!is_null($ioss_number) && (mb_strlen($ioss_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ioss_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['ioss_number'] = $ioss_number;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email contact_email
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        if (!is_null($contact_email) && (mb_strlen($contact_email) > 100)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 100.');
        }
        if (!is_null($contact_email) && (mb_strlen($contact_email) < 0)) {
            throw new \InvalidArgumentException('invalid length for $contact_email when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets packaging_instructions
     *
     * @return string
     */
    public function getPackagingInstructions()
    {
        return $this->container['packaging_instructions'];
    }

    /**
     * Sets packaging_instructions
     *
     * @param string $packaging_instructions packaging_instructions
     *
     * @return $this
     */
    public function setPackagingInstructions($packaging_instructions)
    {
        $this->container['packaging_instructions'] = $packaging_instructions;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets active
     *
     * @return string
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param string $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets on_stop
     *
     * @return bool
     */
    public function getOnStop()
    {
        return $this->container['on_stop'];
    }

    /**
     * Sets on_stop
     *
     * @param bool $on_stop on_stop
     *
     * @return $this
     */
    public function setOnStop($on_stop)
    {
        $this->container['on_stop'] = $on_stop;

        return $this;
    }

    /**
     * Gets accounting_integration_type
     *
     * @return string
     */
    public function getAccountingIntegrationType()
    {
        return $this->container['accounting_integration_type'];
    }

    /**
     * Sets accounting_integration_type
     *
     * @param string $accounting_integration_type accounting_integration_type
     *
     * @return $this
     */
    public function setAccountingIntegrationType($accounting_integration_type)
    {
        if (!is_null($accounting_integration_type) && (mb_strlen($accounting_integration_type) > 100)) {
            throw new \InvalidArgumentException('invalid length for $accounting_integration_type when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 100.');
        }
        if (!is_null($accounting_integration_type) && (mb_strlen($accounting_integration_type) < 0)) {
            throw new \InvalidArgumentException('invalid length for $accounting_integration_type when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['accounting_integration_type'] = $accounting_integration_type;

        return $this;
    }

    /**
     * Gets customer_registration_number
     *
     * @return string
     */
    public function getCustomerRegistrationNumber()
    {
        return $this->container['customer_registration_number'];
    }

    /**
     * Sets customer_registration_number
     *
     * @param string $customer_registration_number customer_registration_number
     *
     * @return $this
     */
    public function setCustomerRegistrationNumber($customer_registration_number)
    {
        if (!is_null($customer_registration_number) && (mb_strlen($customer_registration_number) > 8)) {
            throw new \InvalidArgumentException('invalid length for $customer_registration_number when calling ToolkitDataClassesClientsClient., must be smaller than or equal to 8.');
        }
        if (!is_null($customer_registration_number) && (mb_strlen($customer_registration_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customer_registration_number when calling ToolkitDataClassesClientsClient., must be bigger than or equal to 0.');
        }

        $this->container['customer_registration_number'] = $customer_registration_number;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


