<?php
/**
 * ToolkitDataClassesOrdersOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesOrdersOrder Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesOrdersOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Orders.Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'int',
        'client_code' => 'string',
        'order_number' => 'string',
        'external_order_reference' => 'string',
        'order_date' => '\DateTime',
        'despatch_date' => '\DateTime',
        'required_despatch_date' => '\DateTime',
        'required_delivery_date' => '\DateTime',
        'title' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'company_name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'town' => 'string',
        'county' => 'string',
        'post_code' => 'string',
        'phone' => 'string',
        'mobile' => 'string',
        'email' => 'string',
        'country_id' => 'int',
        'country' => '\Swagger\Client\Model\ToolkitDataClassesCommonCountry',
        'source' => 'string',
        'comments' => 'string',
        'gift_messages' => 'string',
        'delivery_notes' => 'string',
        'vat_number' => 'string',
        'eori_number' => 'string',
        'ukims_number' => 'string',
        'pid_number' => 'string',
        'order_status_id' => 'int',
        'number_of_parcels' => 'int',
        'total_items' => 'int',
        'total_weight' => 'double',
        'order_value' => 'double',
        'part' => 'int',
        'number_of_parts' => 'int',
        'courier_service_type_id' => 'int',
        'courier_service_id' => 'int',
        'courier_service_name' => 'string',
        'tracking_number' => 'string',
        'tracking_url' => 'string',
        'shipping_total_ex_vat' => 'double',
        'shipping_total_vat' => 'double',
        'discount_total_ex_vat' => 'double',
        'discount_total_vat' => 'double',
        'total_vat' => 'double',
        'pii_removed' => 'bool',
        'shipping_net' => 'double',
        'shipping_tax' => 'double',
        'shipping_gross' => 'double',
        'discount_net' => 'double',
        'discount_tax' => 'double',
        'total_order_net' => 'double',
        'total_order_tax' => 'double',
        'total_order_gross' => 'double',
        'discount_gross' => 'double',
        'warehouse_id' => 'int',
        'warehouse_code' => 'string',
        'channel_id' => 'int',
        'channel' => '\Swagger\Client\Model\ToolkitDataClassesChannelsChannel',
        'currency_id' => 'int',
        'currency' => '\Swagger\Client\Model\ToolkitDataClassesCurrenciesCurrency',
        'despatched_by_user' => 'string',
        'order_items' => '\Swagger\Client\Model\ToolkitDataClassesOrdersOrderItem[]',
        'order_name_values' => '\Swagger\Client\Model\ToolkitDataClassesOrdersOrderNameValue[]',
        'order_lock' => 'bool',
        'recipient_type' => '\Swagger\Client\Model\ToolkitDataClassesOrdersRecipientType',
        'tags' => 'string',
        'source_order_date' => '\DateTime',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => 'int32',
        'client_code' => null,
        'order_number' => null,
        'external_order_reference' => null,
        'order_date' => 'date-time',
        'despatch_date' => 'date-time',
        'required_despatch_date' => 'date-time',
        'required_delivery_date' => 'date-time',
        'title' => null,
        'first_name' => null,
        'last_name' => null,
        'company_name' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'town' => null,
        'county' => null,
        'post_code' => null,
        'phone' => null,
        'mobile' => null,
        'email' => null,
        'country_id' => 'int32',
        'country' => null,
        'source' => null,
        'comments' => null,
        'gift_messages' => null,
        'delivery_notes' => null,
        'vat_number' => null,
        'eori_number' => null,
        'ukims_number' => null,
        'pid_number' => null,
        'order_status_id' => 'int32',
        'number_of_parcels' => 'int32',
        'total_items' => 'int32',
        'total_weight' => 'double',
        'order_value' => 'double',
        'part' => 'int32',
        'number_of_parts' => 'int32',
        'courier_service_type_id' => 'int32',
        'courier_service_id' => 'int32',
        'courier_service_name' => null,
        'tracking_number' => null,
        'tracking_url' => null,
        'shipping_total_ex_vat' => 'double',
        'shipping_total_vat' => 'double',
        'discount_total_ex_vat' => 'double',
        'discount_total_vat' => 'double',
        'total_vat' => 'double',
        'pii_removed' => null,
        'shipping_net' => 'double',
        'shipping_tax' => 'double',
        'shipping_gross' => 'double',
        'discount_net' => 'double',
        'discount_tax' => 'double',
        'total_order_net' => 'double',
        'total_order_tax' => 'double',
        'total_order_gross' => 'double',
        'discount_gross' => 'double',
        'warehouse_id' => 'int32',
        'warehouse_code' => null,
        'channel_id' => 'int32',
        'channel' => null,
        'currency_id' => 'int32',
        'currency' => null,
        'despatched_by_user' => null,
        'order_items' => null,
        'order_name_values' => null,
        'order_lock' => null,
        'recipient_type' => null,
        'tags' => null,
        'source_order_date' => 'date-time',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'ClientId',
        'client_code' => 'CLIENT_CODE',
        'order_number' => 'OrderNumber',
        'external_order_reference' => 'ExternalOrderReference',
        'order_date' => 'OrderDate',
        'despatch_date' => 'DespatchDate',
        'required_despatch_date' => 'RequiredDespatchDate',
        'required_delivery_date' => 'RequiredDeliveryDate',
        'title' => 'Title',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'company_name' => 'CompanyName',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'address3' => 'Address3',
        'town' => 'Town',
        'county' => 'County',
        'post_code' => 'PostCode',
        'phone' => 'Phone',
        'mobile' => 'Mobile',
        'email' => 'Email',
        'country_id' => 'CountryId',
        'country' => 'Country',
        'source' => 'Source',
        'comments' => 'Comments',
        'gift_messages' => 'GiftMessages',
        'delivery_notes' => 'DeliveryNotes',
        'vat_number' => 'VATNumber',
        'eori_number' => 'EORINumber',
        'ukims_number' => 'UKIMSNumber',
        'pid_number' => 'PIDNumber',
        'order_status_id' => 'OrderStatusId',
        'number_of_parcels' => 'NumberOfParcels',
        'total_items' => 'TotalItems',
        'total_weight' => 'TotalWeight',
        'order_value' => 'OrderValue',
        'part' => 'Part',
        'number_of_parts' => 'NumberOfParts',
        'courier_service_type_id' => 'CourierServiceTypeId',
        'courier_service_id' => 'CourierServiceId',
        'courier_service_name' => 'CourierServiceName',
        'tracking_number' => 'TrackingNumber',
        'tracking_url' => 'TrackingURL',
        'shipping_total_ex_vat' => 'ShippingTotalExVat',
        'shipping_total_vat' => 'ShippingTotalVat',
        'discount_total_ex_vat' => 'DiscountTotalExVat',
        'discount_total_vat' => 'DiscountTotalVat',
        'total_vat' => 'TotalVat',
        'pii_removed' => 'PIIRemoved',
        'shipping_net' => 'ShippingNet',
        'shipping_tax' => 'ShippingTax',
        'shipping_gross' => 'ShippingGross',
        'discount_net' => 'DiscountNet',
        'discount_tax' => 'DiscountTax',
        'total_order_net' => 'TotalOrderNet',
        'total_order_tax' => 'TotalOrderTax',
        'total_order_gross' => 'TotalOrderGross',
        'discount_gross' => 'DiscountGross',
        'warehouse_id' => 'WarehouseId',
        'warehouse_code' => 'WAREHOUSE_CODE',
        'channel_id' => 'ChannelId',
        'channel' => 'Channel',
        'currency_id' => 'CurrencyId',
        'currency' => 'Currency',
        'despatched_by_user' => 'DespatchedByUser',
        'order_items' => 'OrderItems',
        'order_name_values' => 'OrderNameValues',
        'order_lock' => 'OrderLock',
        'recipient_type' => 'RecipientType',
        'tags' => 'Tags',
        'source_order_date' => 'SourceOrderDate',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'client_code' => 'setClientCode',
        'order_number' => 'setOrderNumber',
        'external_order_reference' => 'setExternalOrderReference',
        'order_date' => 'setOrderDate',
        'despatch_date' => 'setDespatchDate',
        'required_despatch_date' => 'setRequiredDespatchDate',
        'required_delivery_date' => 'setRequiredDeliveryDate',
        'title' => 'setTitle',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'company_name' => 'setCompanyName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'town' => 'setTown',
        'county' => 'setCounty',
        'post_code' => 'setPostCode',
        'phone' => 'setPhone',
        'mobile' => 'setMobile',
        'email' => 'setEmail',
        'country_id' => 'setCountryId',
        'country' => 'setCountry',
        'source' => 'setSource',
        'comments' => 'setComments',
        'gift_messages' => 'setGiftMessages',
        'delivery_notes' => 'setDeliveryNotes',
        'vat_number' => 'setVatNumber',
        'eori_number' => 'setEoriNumber',
        'ukims_number' => 'setUkimsNumber',
        'pid_number' => 'setPidNumber',
        'order_status_id' => 'setOrderStatusId',
        'number_of_parcels' => 'setNumberOfParcels',
        'total_items' => 'setTotalItems',
        'total_weight' => 'setTotalWeight',
        'order_value' => 'setOrderValue',
        'part' => 'setPart',
        'number_of_parts' => 'setNumberOfParts',
        'courier_service_type_id' => 'setCourierServiceTypeId',
        'courier_service_id' => 'setCourierServiceId',
        'courier_service_name' => 'setCourierServiceName',
        'tracking_number' => 'setTrackingNumber',
        'tracking_url' => 'setTrackingUrl',
        'shipping_total_ex_vat' => 'setShippingTotalExVat',
        'shipping_total_vat' => 'setShippingTotalVat',
        'discount_total_ex_vat' => 'setDiscountTotalExVat',
        'discount_total_vat' => 'setDiscountTotalVat',
        'total_vat' => 'setTotalVat',
        'pii_removed' => 'setPiiRemoved',
        'shipping_net' => 'setShippingNet',
        'shipping_tax' => 'setShippingTax',
        'shipping_gross' => 'setShippingGross',
        'discount_net' => 'setDiscountNet',
        'discount_tax' => 'setDiscountTax',
        'total_order_net' => 'setTotalOrderNet',
        'total_order_tax' => 'setTotalOrderTax',
        'total_order_gross' => 'setTotalOrderGross',
        'discount_gross' => 'setDiscountGross',
        'warehouse_id' => 'setWarehouseId',
        'warehouse_code' => 'setWarehouseCode',
        'channel_id' => 'setChannelId',
        'channel' => 'setChannel',
        'currency_id' => 'setCurrencyId',
        'currency' => 'setCurrency',
        'despatched_by_user' => 'setDespatchedByUser',
        'order_items' => 'setOrderItems',
        'order_name_values' => 'setOrderNameValues',
        'order_lock' => 'setOrderLock',
        'recipient_type' => 'setRecipientType',
        'tags' => 'setTags',
        'source_order_date' => 'setSourceOrderDate',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'client_code' => 'getClientCode',
        'order_number' => 'getOrderNumber',
        'external_order_reference' => 'getExternalOrderReference',
        'order_date' => 'getOrderDate',
        'despatch_date' => 'getDespatchDate',
        'required_despatch_date' => 'getRequiredDespatchDate',
        'required_delivery_date' => 'getRequiredDeliveryDate',
        'title' => 'getTitle',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'company_name' => 'getCompanyName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'town' => 'getTown',
        'county' => 'getCounty',
        'post_code' => 'getPostCode',
        'phone' => 'getPhone',
        'mobile' => 'getMobile',
        'email' => 'getEmail',
        'country_id' => 'getCountryId',
        'country' => 'getCountry',
        'source' => 'getSource',
        'comments' => 'getComments',
        'gift_messages' => 'getGiftMessages',
        'delivery_notes' => 'getDeliveryNotes',
        'vat_number' => 'getVatNumber',
        'eori_number' => 'getEoriNumber',
        'ukims_number' => 'getUkimsNumber',
        'pid_number' => 'getPidNumber',
        'order_status_id' => 'getOrderStatusId',
        'number_of_parcels' => 'getNumberOfParcels',
        'total_items' => 'getTotalItems',
        'total_weight' => 'getTotalWeight',
        'order_value' => 'getOrderValue',
        'part' => 'getPart',
        'number_of_parts' => 'getNumberOfParts',
        'courier_service_type_id' => 'getCourierServiceTypeId',
        'courier_service_id' => 'getCourierServiceId',
        'courier_service_name' => 'getCourierServiceName',
        'tracking_number' => 'getTrackingNumber',
        'tracking_url' => 'getTrackingUrl',
        'shipping_total_ex_vat' => 'getShippingTotalExVat',
        'shipping_total_vat' => 'getShippingTotalVat',
        'discount_total_ex_vat' => 'getDiscountTotalExVat',
        'discount_total_vat' => 'getDiscountTotalVat',
        'total_vat' => 'getTotalVat',
        'pii_removed' => 'getPiiRemoved',
        'shipping_net' => 'getShippingNet',
        'shipping_tax' => 'getShippingTax',
        'shipping_gross' => 'getShippingGross',
        'discount_net' => 'getDiscountNet',
        'discount_tax' => 'getDiscountTax',
        'total_order_net' => 'getTotalOrderNet',
        'total_order_tax' => 'getTotalOrderTax',
        'total_order_gross' => 'getTotalOrderGross',
        'discount_gross' => 'getDiscountGross',
        'warehouse_id' => 'getWarehouseId',
        'warehouse_code' => 'getWarehouseCode',
        'channel_id' => 'getChannelId',
        'channel' => 'getChannel',
        'currency_id' => 'getCurrencyId',
        'currency' => 'getCurrency',
        'despatched_by_user' => 'getDespatchedByUser',
        'order_items' => 'getOrderItems',
        'order_name_values' => 'getOrderNameValues',
        'order_lock' => 'getOrderLock',
        'recipient_type' => 'getRecipientType',
        'tags' => 'getTags',
        'source_order_date' => 'getSourceOrderDate',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_code'] = isset($data['client_code']) ? $data['client_code'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['external_order_reference'] = isset($data['external_order_reference']) ? $data['external_order_reference'] : null;
        $this->container['order_date'] = isset($data['order_date']) ? $data['order_date'] : null;
        $this->container['despatch_date'] = isset($data['despatch_date']) ? $data['despatch_date'] : null;
        $this->container['required_despatch_date'] = isset($data['required_despatch_date']) ? $data['required_despatch_date'] : null;
        $this->container['required_delivery_date'] = isset($data['required_delivery_date']) ? $data['required_delivery_date'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['county'] = isset($data['county']) ? $data['county'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['mobile'] = isset($data['mobile']) ? $data['mobile'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['country_id'] = isset($data['country_id']) ? $data['country_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['gift_messages'] = isset($data['gift_messages']) ? $data['gift_messages'] : null;
        $this->container['delivery_notes'] = isset($data['delivery_notes']) ? $data['delivery_notes'] : null;
        $this->container['vat_number'] = isset($data['vat_number']) ? $data['vat_number'] : null;
        $this->container['eori_number'] = isset($data['eori_number']) ? $data['eori_number'] : null;
        $this->container['ukims_number'] = isset($data['ukims_number']) ? $data['ukims_number'] : null;
        $this->container['pid_number'] = isset($data['pid_number']) ? $data['pid_number'] : null;
        $this->container['order_status_id'] = isset($data['order_status_id']) ? $data['order_status_id'] : null;
        $this->container['number_of_parcels'] = isset($data['number_of_parcels']) ? $data['number_of_parcels'] : null;
        $this->container['total_items'] = isset($data['total_items']) ? $data['total_items'] : null;
        $this->container['total_weight'] = isset($data['total_weight']) ? $data['total_weight'] : null;
        $this->container['order_value'] = isset($data['order_value']) ? $data['order_value'] : null;
        $this->container['part'] = isset($data['part']) ? $data['part'] : null;
        $this->container['number_of_parts'] = isset($data['number_of_parts']) ? $data['number_of_parts'] : null;
        $this->container['courier_service_type_id'] = isset($data['courier_service_type_id']) ? $data['courier_service_type_id'] : null;
        $this->container['courier_service_id'] = isset($data['courier_service_id']) ? $data['courier_service_id'] : null;
        $this->container['courier_service_name'] = isset($data['courier_service_name']) ? $data['courier_service_name'] : null;
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['tracking_url'] = isset($data['tracking_url']) ? $data['tracking_url'] : null;
        $this->container['shipping_total_ex_vat'] = isset($data['shipping_total_ex_vat']) ? $data['shipping_total_ex_vat'] : null;
        $this->container['shipping_total_vat'] = isset($data['shipping_total_vat']) ? $data['shipping_total_vat'] : null;
        $this->container['discount_total_ex_vat'] = isset($data['discount_total_ex_vat']) ? $data['discount_total_ex_vat'] : null;
        $this->container['discount_total_vat'] = isset($data['discount_total_vat']) ? $data['discount_total_vat'] : null;
        $this->container['total_vat'] = isset($data['total_vat']) ? $data['total_vat'] : null;
        $this->container['pii_removed'] = isset($data['pii_removed']) ? $data['pii_removed'] : null;
        $this->container['shipping_net'] = isset($data['shipping_net']) ? $data['shipping_net'] : null;
        $this->container['shipping_tax'] = isset($data['shipping_tax']) ? $data['shipping_tax'] : null;
        $this->container['shipping_gross'] = isset($data['shipping_gross']) ? $data['shipping_gross'] : null;
        $this->container['discount_net'] = isset($data['discount_net']) ? $data['discount_net'] : null;
        $this->container['discount_tax'] = isset($data['discount_tax']) ? $data['discount_tax'] : null;
        $this->container['total_order_net'] = isset($data['total_order_net']) ? $data['total_order_net'] : null;
        $this->container['total_order_tax'] = isset($data['total_order_tax']) ? $data['total_order_tax'] : null;
        $this->container['total_order_gross'] = isset($data['total_order_gross']) ? $data['total_order_gross'] : null;
        $this->container['discount_gross'] = isset($data['discount_gross']) ? $data['discount_gross'] : null;
        $this->container['warehouse_id'] = isset($data['warehouse_id']) ? $data['warehouse_id'] : null;
        $this->container['warehouse_code'] = isset($data['warehouse_code']) ? $data['warehouse_code'] : null;
        $this->container['channel_id'] = isset($data['channel_id']) ? $data['channel_id'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['despatched_by_user'] = isset($data['despatched_by_user']) ? $data['despatched_by_user'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['order_name_values'] = isset($data['order_name_values']) ? $data['order_name_values'] : null;
        $this->container['order_lock'] = isset($data['order_lock']) ? $data['order_lock'] : null;
        $this->container['recipient_type'] = isset($data['recipient_type']) ? $data['recipient_type'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['source_order_date'] = isset($data['source_order_date']) ? $data['source_order_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['order_number'] === null) {
            $invalidProperties[] = "'order_number' can't be null";
        }
        if ((mb_strlen($this->container['order_number']) > 250)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be smaller than or equal to 250.";
        }

        if ((mb_strlen($this->container['order_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'order_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['external_order_reference']) && (mb_strlen($this->container['external_order_reference']) > 250)) {
            $invalidProperties[] = "invalid value for 'external_order_reference', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['external_order_reference']) && (mb_strlen($this->container['external_order_reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'external_order_reference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['address1'] === null) {
            $invalidProperties[] = "'address1' can't be null";
        }
        if ($this->container['post_code'] === null) {
            $invalidProperties[] = "'post_code' can't be null";
        }
        if ((mb_strlen($this->container['post_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['post_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) > 50)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['mobile']) && (mb_strlen($this->container['mobile']) < 0)) {
            $invalidProperties[] = "invalid value for 'mobile', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['country_id'] === null) {
            $invalidProperties[] = "'country_id' can't be null";
        }
        if (!is_null($this->container['gift_messages']) && (mb_strlen($this->container['gift_messages']) > 1000)) {
            $invalidProperties[] = "invalid value for 'gift_messages', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['gift_messages']) && (mb_strlen($this->container['gift_messages']) < 0)) {
            $invalidProperties[] = "invalid value for 'gift_messages', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['delivery_notes']) && (mb_strlen($this->container['delivery_notes']) > 1000)) {
            $invalidProperties[] = "invalid value for 'delivery_notes', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['delivery_notes']) && (mb_strlen($this->container['delivery_notes']) < 0)) {
            $invalidProperties[] = "invalid value for 'delivery_notes', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['vat_number']) && (mb_strlen($this->container['vat_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'vat_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['eori_number']) && (mb_strlen($this->container['eori_number']) > 20)) {
            $invalidProperties[] = "invalid value for 'eori_number', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['eori_number']) && (mb_strlen($this->container['eori_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'eori_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ukims_number']) && (mb_strlen($this->container['ukims_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'ukims_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ukims_number']) && (mb_strlen($this->container['ukims_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'ukims_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['number_of_parcels']) && ($this->container['number_of_parcels'] > 1000)) {
            $invalidProperties[] = "invalid value for 'number_of_parcels', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['number_of_parcels']) && ($this->container['number_of_parcels'] < 1)) {
            $invalidProperties[] = "invalid value for 'number_of_parcels', must be bigger than or equal to 1.";
        }

        if ($this->container['courier_service_type_id'] === null) {
            $invalidProperties[] = "'courier_service_type_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_code
     *
     * @return string
     */
    public function getClientCode()
    {
        return $this->container['client_code'];
    }

    /**
     * Sets client_code
     *
     * @param string $client_code client_code
     *
     * @return $this
     */
    public function setClientCode($client_code)
    {
        $this->container['client_code'] = $client_code;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        if ((mb_strlen($order_number) > 250)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 250.');
        }
        if ((mb_strlen($order_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $order_number when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets external_order_reference
     *
     * @return string
     */
    public function getExternalOrderReference()
    {
        return $this->container['external_order_reference'];
    }

    /**
     * Sets external_order_reference
     *
     * @param string $external_order_reference external_order_reference
     *
     * @return $this
     */
    public function setExternalOrderReference($external_order_reference)
    {
        if (!is_null($external_order_reference) && (mb_strlen($external_order_reference) > 250)) {
            throw new \InvalidArgumentException('invalid length for $external_order_reference when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 250.');
        }
        if (!is_null($external_order_reference) && (mb_strlen($external_order_reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $external_order_reference when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['external_order_reference'] = $external_order_reference;

        return $this;
    }

    /**
     * Gets order_date
     *
     * @return \DateTime
     */
    public function getOrderDate()
    {
        return $this->container['order_date'];
    }

    /**
     * Sets order_date
     *
     * @param \DateTime $order_date order_date
     *
     * @return $this
     */
    public function setOrderDate($order_date)
    {
        $this->container['order_date'] = $order_date;

        return $this;
    }

    /**
     * Gets despatch_date
     *
     * @return \DateTime
     */
    public function getDespatchDate()
    {
        return $this->container['despatch_date'];
    }

    /**
     * Sets despatch_date
     *
     * @param \DateTime $despatch_date despatch_date
     *
     * @return $this
     */
    public function setDespatchDate($despatch_date)
    {
        $this->container['despatch_date'] = $despatch_date;

        return $this;
    }

    /**
     * Gets required_despatch_date
     *
     * @return \DateTime
     */
    public function getRequiredDespatchDate()
    {
        return $this->container['required_despatch_date'];
    }

    /**
     * Sets required_despatch_date
     *
     * @param \DateTime $required_despatch_date required_despatch_date
     *
     * @return $this
     */
    public function setRequiredDespatchDate($required_despatch_date)
    {
        $this->container['required_despatch_date'] = $required_despatch_date;

        return $this;
    }

    /**
     * Gets required_delivery_date
     *
     * @return \DateTime
     */
    public function getRequiredDeliveryDate()
    {
        return $this->container['required_delivery_date'];
    }

    /**
     * Sets required_delivery_date
     *
     * @param \DateTime $required_delivery_date required_delivery_date
     *
     * @return $this
     */
    public function setRequiredDeliveryDate($required_delivery_date)
    {
        $this->container['required_delivery_date'] = $required_delivery_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string $address3 address3
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets town
     *
     * @return string
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param string $town town
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets county
     *
     * @return string
     */
    public function getCounty()
    {
        return $this->container['county'];
    }

    /**
     * Sets county
     *
     * @param string $county county
     *
     * @return $this
     */
    public function setCounty($county)
    {
        $this->container['county'] = $county;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        if ((mb_strlen($post_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($post_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        if (!is_null($phone) && (mb_strlen($phone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 50.');
        }
        if (!is_null($phone) && (mb_strlen($phone) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets mobile
     *
     * @return string
     */
    public function getMobile()
    {
        return $this->container['mobile'];
    }

    /**
     * Sets mobile
     *
     * @param string $mobile mobile
     *
     * @return $this
     */
    public function setMobile($mobile)
    {
        if (!is_null($mobile) && (mb_strlen($mobile) > 50)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 50.');
        }
        if (!is_null($mobile) && (mb_strlen($mobile) < 0)) {
            throw new \InvalidArgumentException('invalid length for $mobile when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['mobile'] = $mobile;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return int
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param int $country_id country_id
     *
     * @return $this
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesCommonCountry
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesCommonCountry $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets gift_messages
     *
     * @return string
     */
    public function getGiftMessages()
    {
        return $this->container['gift_messages'];
    }

    /**
     * Sets gift_messages
     *
     * @param string $gift_messages gift_messages
     *
     * @return $this
     */
    public function setGiftMessages($gift_messages)
    {
        if (!is_null($gift_messages) && (mb_strlen($gift_messages) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $gift_messages when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 1000.');
        }
        if (!is_null($gift_messages) && (mb_strlen($gift_messages) < 0)) {
            throw new \InvalidArgumentException('invalid length for $gift_messages when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['gift_messages'] = $gift_messages;

        return $this;
    }

    /**
     * Gets delivery_notes
     *
     * @return string
     */
    public function getDeliveryNotes()
    {
        return $this->container['delivery_notes'];
    }

    /**
     * Sets delivery_notes
     *
     * @param string $delivery_notes delivery_notes
     *
     * @return $this
     */
    public function setDeliveryNotes($delivery_notes)
    {
        if (!is_null($delivery_notes) && (mb_strlen($delivery_notes) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $delivery_notes when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 1000.');
        }
        if (!is_null($delivery_notes) && (mb_strlen($delivery_notes) < 0)) {
            throw new \InvalidArgumentException('invalid length for $delivery_notes when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['delivery_notes'] = $delivery_notes;

        return $this;
    }

    /**
     * Gets vat_number
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vat_number'];
    }

    /**
     * Sets vat_number
     *
     * @param string $vat_number vat_number
     *
     * @return $this
     */
    public function setVatNumber($vat_number)
    {
        if (!is_null($vat_number) && (mb_strlen($vat_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 50.');
        }
        if (!is_null($vat_number) && (mb_strlen($vat_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $vat_number when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['vat_number'] = $vat_number;

        return $this;
    }

    /**
     * Gets eori_number
     *
     * @return string
     */
    public function getEoriNumber()
    {
        return $this->container['eori_number'];
    }

    /**
     * Sets eori_number
     *
     * @param string $eori_number eori_number
     *
     * @return $this
     */
    public function setEoriNumber($eori_number)
    {
        if (!is_null($eori_number) && (mb_strlen($eori_number) > 20)) {
            throw new \InvalidArgumentException('invalid length for $eori_number when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 20.');
        }
        if (!is_null($eori_number) && (mb_strlen($eori_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $eori_number when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['eori_number'] = $eori_number;

        return $this;
    }

    /**
     * Gets ukims_number
     *
     * @return string
     */
    public function getUkimsNumber()
    {
        return $this->container['ukims_number'];
    }

    /**
     * Sets ukims_number
     *
     * @param string $ukims_number ukims_number
     *
     * @return $this
     */
    public function setUkimsNumber($ukims_number)
    {
        if (!is_null($ukims_number) && (mb_strlen($ukims_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ukims_number when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 50.');
        }
        if (!is_null($ukims_number) && (mb_strlen($ukims_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ukims_number when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 0.');
        }

        $this->container['ukims_number'] = $ukims_number;

        return $this;
    }

    /**
     * Gets pid_number
     *
     * @return string
     */
    public function getPidNumber()
    {
        return $this->container['pid_number'];
    }

    /**
     * Sets pid_number
     *
     * @param string $pid_number pid_number
     *
     * @return $this
     */
    public function setPidNumber($pid_number)
    {
        $this->container['pid_number'] = $pid_number;

        return $this;
    }

    /**
     * Gets order_status_id
     *
     * @return int
     */
    public function getOrderStatusId()
    {
        return $this->container['order_status_id'];
    }

    /**
     * Sets order_status_id
     *
     * @param int $order_status_id order_status_id
     *
     * @return $this
     */
    public function setOrderStatusId($order_status_id)
    {
        $this->container['order_status_id'] = $order_status_id;

        return $this;
    }

    /**
     * Gets number_of_parcels
     *
     * @return int
     */
    public function getNumberOfParcels()
    {
        return $this->container['number_of_parcels'];
    }

    /**
     * Sets number_of_parcels
     *
     * @param int $number_of_parcels number_of_parcels
     *
     * @return $this
     */
    public function setNumberOfParcels($number_of_parcels)
    {

        if (!is_null($number_of_parcels) && ($number_of_parcels > 1000)) {
            throw new \InvalidArgumentException('invalid value for $number_of_parcels when calling ToolkitDataClassesOrdersOrder., must be smaller than or equal to 1000.');
        }
        if (!is_null($number_of_parcels) && ($number_of_parcels < 1)) {
            throw new \InvalidArgumentException('invalid value for $number_of_parcels when calling ToolkitDataClassesOrdersOrder., must be bigger than or equal to 1.');
        }

        $this->container['number_of_parcels'] = $number_of_parcels;

        return $this;
    }

    /**
     * Gets total_items
     *
     * @return int
     */
    public function getTotalItems()
    {
        return $this->container['total_items'];
    }

    /**
     * Sets total_items
     *
     * @param int $total_items total_items
     *
     * @return $this
     */
    public function setTotalItems($total_items)
    {
        $this->container['total_items'] = $total_items;

        return $this;
    }

    /**
     * Gets total_weight
     *
     * @return double
     */
    public function getTotalWeight()
    {
        return $this->container['total_weight'];
    }

    /**
     * Sets total_weight
     *
     * @param double $total_weight total_weight
     *
     * @return $this
     */
    public function setTotalWeight($total_weight)
    {
        $this->container['total_weight'] = $total_weight;

        return $this;
    }

    /**
     * Gets order_value
     *
     * @return double
     */
    public function getOrderValue()
    {
        return $this->container['order_value'];
    }

    /**
     * Sets order_value
     *
     * @param double $order_value order_value
     *
     * @return $this
     */
    public function setOrderValue($order_value)
    {
        $this->container['order_value'] = $order_value;

        return $this;
    }

    /**
     * Gets part
     *
     * @return int
     */
    public function getPart()
    {
        return $this->container['part'];
    }

    /**
     * Sets part
     *
     * @param int $part part
     *
     * @return $this
     */
    public function setPart($part)
    {
        $this->container['part'] = $part;

        return $this;
    }

    /**
     * Gets number_of_parts
     *
     * @return int
     */
    public function getNumberOfParts()
    {
        return $this->container['number_of_parts'];
    }

    /**
     * Sets number_of_parts
     *
     * @param int $number_of_parts number_of_parts
     *
     * @return $this
     */
    public function setNumberOfParts($number_of_parts)
    {
        $this->container['number_of_parts'] = $number_of_parts;

        return $this;
    }

    /**
     * Gets courier_service_type_id
     *
     * @return int
     */
    public function getCourierServiceTypeId()
    {
        return $this->container['courier_service_type_id'];
    }

    /**
     * Sets courier_service_type_id
     *
     * @param int $courier_service_type_id courier_service_type_id
     *
     * @return $this
     */
    public function setCourierServiceTypeId($courier_service_type_id)
    {
        $this->container['courier_service_type_id'] = $courier_service_type_id;

        return $this;
    }

    /**
     * Gets courier_service_id
     *
     * @return int
     */
    public function getCourierServiceId()
    {
        return $this->container['courier_service_id'];
    }

    /**
     * Sets courier_service_id
     *
     * @param int $courier_service_id courier_service_id
     *
     * @return $this
     */
    public function setCourierServiceId($courier_service_id)
    {
        $this->container['courier_service_id'] = $courier_service_id;

        return $this;
    }

    /**
     * Gets courier_service_name
     *
     * @return string
     */
    public function getCourierServiceName()
    {
        return $this->container['courier_service_name'];
    }

    /**
     * Sets courier_service_name
     *
     * @param string $courier_service_name courier_service_name
     *
     * @return $this
     */
    public function setCourierServiceName($courier_service_name)
    {
        $this->container['courier_service_name'] = $courier_service_name;

        return $this;
    }

    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number tracking_number
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string $tracking_url tracking_url
     *
     * @return $this
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets shipping_total_ex_vat
     *
     * @return double
     */
    public function getShippingTotalExVat()
    {
        return $this->container['shipping_total_ex_vat'];
    }

    /**
     * Sets shipping_total_ex_vat
     *
     * @param double $shipping_total_ex_vat shipping_total_ex_vat
     *
     * @return $this
     */
    public function setShippingTotalExVat($shipping_total_ex_vat)
    {
        $this->container['shipping_total_ex_vat'] = $shipping_total_ex_vat;

        return $this;
    }

    /**
     * Gets shipping_total_vat
     *
     * @return double
     */
    public function getShippingTotalVat()
    {
        return $this->container['shipping_total_vat'];
    }

    /**
     * Sets shipping_total_vat
     *
     * @param double $shipping_total_vat shipping_total_vat
     *
     * @return $this
     */
    public function setShippingTotalVat($shipping_total_vat)
    {
        $this->container['shipping_total_vat'] = $shipping_total_vat;

        return $this;
    }

    /**
     * Gets discount_total_ex_vat
     *
     * @return double
     */
    public function getDiscountTotalExVat()
    {
        return $this->container['discount_total_ex_vat'];
    }

    /**
     * Sets discount_total_ex_vat
     *
     * @param double $discount_total_ex_vat discount_total_ex_vat
     *
     * @return $this
     */
    public function setDiscountTotalExVat($discount_total_ex_vat)
    {
        $this->container['discount_total_ex_vat'] = $discount_total_ex_vat;

        return $this;
    }

    /**
     * Gets discount_total_vat
     *
     * @return double
     */
    public function getDiscountTotalVat()
    {
        return $this->container['discount_total_vat'];
    }

    /**
     * Sets discount_total_vat
     *
     * @param double $discount_total_vat discount_total_vat
     *
     * @return $this
     */
    public function setDiscountTotalVat($discount_total_vat)
    {
        $this->container['discount_total_vat'] = $discount_total_vat;

        return $this;
    }

    /**
     * Gets total_vat
     *
     * @return double
     */
    public function getTotalVat()
    {
        return $this->container['total_vat'];
    }

    /**
     * Sets total_vat
     *
     * @param double $total_vat total_vat
     *
     * @return $this
     */
    public function setTotalVat($total_vat)
    {
        $this->container['total_vat'] = $total_vat;

        return $this;
    }

    /**
     * Gets pii_removed
     *
     * @return bool
     */
    public function getPiiRemoved()
    {
        return $this->container['pii_removed'];
    }

    /**
     * Sets pii_removed
     *
     * @param bool $pii_removed pii_removed
     *
     * @return $this
     */
    public function setPiiRemoved($pii_removed)
    {
        $this->container['pii_removed'] = $pii_removed;

        return $this;
    }

    /**
     * Gets shipping_net
     *
     * @return double
     */
    public function getShippingNet()
    {
        return $this->container['shipping_net'];
    }

    /**
     * Sets shipping_net
     *
     * @param double $shipping_net shipping_net
     *
     * @return $this
     */
    public function setShippingNet($shipping_net)
    {
        $this->container['shipping_net'] = $shipping_net;

        return $this;
    }

    /**
     * Gets shipping_tax
     *
     * @return double
     */
    public function getShippingTax()
    {
        return $this->container['shipping_tax'];
    }

    /**
     * Sets shipping_tax
     *
     * @param double $shipping_tax shipping_tax
     *
     * @return $this
     */
    public function setShippingTax($shipping_tax)
    {
        $this->container['shipping_tax'] = $shipping_tax;

        return $this;
    }

    /**
     * Gets shipping_gross
     *
     * @return double
     */
    public function getShippingGross()
    {
        return $this->container['shipping_gross'];
    }

    /**
     * Sets shipping_gross
     *
     * @param double $shipping_gross shipping_gross
     *
     * @return $this
     */
    public function setShippingGross($shipping_gross)
    {
        $this->container['shipping_gross'] = $shipping_gross;

        return $this;
    }

    /**
     * Gets discount_net
     *
     * @return double
     */
    public function getDiscountNet()
    {
        return $this->container['discount_net'];
    }

    /**
     * Sets discount_net
     *
     * @param double $discount_net discount_net
     *
     * @return $this
     */
    public function setDiscountNet($discount_net)
    {
        $this->container['discount_net'] = $discount_net;

        return $this;
    }

    /**
     * Gets discount_tax
     *
     * @return double
     */
    public function getDiscountTax()
    {
        return $this->container['discount_tax'];
    }

    /**
     * Sets discount_tax
     *
     * @param double $discount_tax discount_tax
     *
     * @return $this
     */
    public function setDiscountTax($discount_tax)
    {
        $this->container['discount_tax'] = $discount_tax;

        return $this;
    }

    /**
     * Gets total_order_net
     *
     * @return double
     */
    public function getTotalOrderNet()
    {
        return $this->container['total_order_net'];
    }

    /**
     * Sets total_order_net
     *
     * @param double $total_order_net total_order_net
     *
     * @return $this
     */
    public function setTotalOrderNet($total_order_net)
    {
        $this->container['total_order_net'] = $total_order_net;

        return $this;
    }

    /**
     * Gets total_order_tax
     *
     * @return double
     */
    public function getTotalOrderTax()
    {
        return $this->container['total_order_tax'];
    }

    /**
     * Sets total_order_tax
     *
     * @param double $total_order_tax total_order_tax
     *
     * @return $this
     */
    public function setTotalOrderTax($total_order_tax)
    {
        $this->container['total_order_tax'] = $total_order_tax;

        return $this;
    }

    /**
     * Gets total_order_gross
     *
     * @return double
     */
    public function getTotalOrderGross()
    {
        return $this->container['total_order_gross'];
    }

    /**
     * Sets total_order_gross
     *
     * @param double $total_order_gross total_order_gross
     *
     * @return $this
     */
    public function setTotalOrderGross($total_order_gross)
    {
        $this->container['total_order_gross'] = $total_order_gross;

        return $this;
    }

    /**
     * Gets discount_gross
     *
     * @return double
     */
    public function getDiscountGross()
    {
        return $this->container['discount_gross'];
    }

    /**
     * Sets discount_gross
     *
     * @param double $discount_gross discount_gross
     *
     * @return $this
     */
    public function setDiscountGross($discount_gross)
    {
        $this->container['discount_gross'] = $discount_gross;

        return $this;
    }

    /**
     * Gets warehouse_id
     *
     * @return int
     */
    public function getWarehouseId()
    {
        return $this->container['warehouse_id'];
    }

    /**
     * Sets warehouse_id
     *
     * @param int $warehouse_id warehouse_id
     *
     * @return $this
     */
    public function setWarehouseId($warehouse_id)
    {
        $this->container['warehouse_id'] = $warehouse_id;

        return $this;
    }

    /**
     * Gets warehouse_code
     *
     * @return string
     */
    public function getWarehouseCode()
    {
        return $this->container['warehouse_code'];
    }

    /**
     * Sets warehouse_code
     *
     * @param string $warehouse_code warehouse_code
     *
     * @return $this
     */
    public function setWarehouseCode($warehouse_code)
    {
        $this->container['warehouse_code'] = $warehouse_code;

        return $this;
    }

    /**
     * Gets channel_id
     *
     * @return int
     */
    public function getChannelId()
    {
        return $this->container['channel_id'];
    }

    /**
     * Sets channel_id
     *
     * @param int $channel_id channel_id
     *
     * @return $this
     */
    public function setChannelId($channel_id)
    {
        $this->container['channel_id'] = $channel_id;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesChannelsChannel
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesChannelsChannel $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return int
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param int $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesCurrenciesCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesCurrenciesCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets despatched_by_user
     *
     * @return string
     */
    public function getDespatchedByUser()
    {
        return $this->container['despatched_by_user'];
    }

    /**
     * Sets despatched_by_user
     *
     * @param string $despatched_by_user despatched_by_user
     *
     * @return $this
     */
    public function setDespatchedByUser($despatched_by_user)
    {
        $this->container['despatched_by_user'] = $despatched_by_user;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesOrdersOrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesOrdersOrderItem[] $order_items order_items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets order_name_values
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesOrdersOrderNameValue[]
     */
    public function getOrderNameValues()
    {
        return $this->container['order_name_values'];
    }

    /**
     * Sets order_name_values
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesOrdersOrderNameValue[] $order_name_values order_name_values
     *
     * @return $this
     */
    public function setOrderNameValues($order_name_values)
    {
        $this->container['order_name_values'] = $order_name_values;

        return $this;
    }

    /**
     * Gets order_lock
     *
     * @return bool
     */
    public function getOrderLock()
    {
        return $this->container['order_lock'];
    }

    /**
     * Sets order_lock
     *
     * @param bool $order_lock order_lock
     *
     * @return $this
     */
    public function setOrderLock($order_lock)
    {
        $this->container['order_lock'] = $order_lock;

        return $this;
    }

    /**
     * Gets recipient_type
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesOrdersRecipientType
     */
    public function getRecipientType()
    {
        return $this->container['recipient_type'];
    }

    /**
     * Sets recipient_type
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesOrdersRecipientType $recipient_type recipient_type
     *
     * @return $this
     */
    public function setRecipientType($recipient_type)
    {
        $this->container['recipient_type'] = $recipient_type;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags tags
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets source_order_date
     *
     * @return \DateTime
     */
    public function getSourceOrderDate()
    {
        return $this->container['source_order_date'];
    }

    /**
     * Sets source_order_date
     *
     * @param \DateTime $source_order_date source_order_date
     *
     * @return $this
     */
    public function setSourceOrderDate($source_order_date)
    {
        $this->container['source_order_date'] = $source_order_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


