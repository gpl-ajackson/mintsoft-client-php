<?php
/**
 * ToolkitDataClassesAccountInvoiceItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesAccountInvoiceItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftAccountInvoiceItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Account.InvoiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'courier_service_id' => 'int',
        'invoice_summary_id' => 'int',
        'picking_cost' => 'double',
        'extra_picking_cost' => 'double',
        'postage_cost' => 'double',
        'cost_postage_cost' => 'double',
        'vat_free_postage_cost' => 'double',
        'packaging_cost' => 'double',
        'rework_cost' => 'double',
        'invoice_date' => '\DateTime',
        'comments' => 'string',
        'number_of_picks' => 'int',
        'number_of_carton_picks' => 'int',
        'number_of_pallet_picks' => 'int',
        'admin_fee' => 'double',
        'total_cost' => 'double',
        'total_picking_cost' => 'double',
        'total_postage_cost' => 'double',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'courier_service_id' => 'int32',
        'invoice_summary_id' => 'int32',
        'picking_cost' => 'double',
        'extra_picking_cost' => 'double',
        'postage_cost' => 'double',
        'cost_postage_cost' => 'double',
        'vat_free_postage_cost' => 'double',
        'packaging_cost' => 'double',
        'rework_cost' => 'double',
        'invoice_date' => 'date-time',
        'comments' => null,
        'number_of_picks' => 'int32',
        'number_of_carton_picks' => 'int32',
        'number_of_pallet_picks' => 'int32',
        'admin_fee' => 'double',
        'total_cost' => 'double',
        'total_picking_cost' => 'double',
        'total_postage_cost' => 'double',
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'courier_service_id' => 'CourierServiceId',
        'invoice_summary_id' => 'InvoiceSummaryId',
        'picking_cost' => 'PickingCost',
        'extra_picking_cost' => 'ExtraPickingCost',
        'postage_cost' => 'PostageCost',
        'cost_postage_cost' => 'CostPostageCost',
        'vat_free_postage_cost' => 'VatFreePostageCost',
        'packaging_cost' => 'PackagingCost',
        'rework_cost' => 'ReworkCost',
        'invoice_date' => 'InvoiceDate',
        'comments' => 'Comments',
        'number_of_picks' => 'NumberOfPicks',
        'number_of_carton_picks' => 'NumberOfCartonPicks',
        'number_of_pallet_picks' => 'NumberOfPalletPicks',
        'admin_fee' => 'AdminFee',
        'total_cost' => 'TotalCost',
        'total_picking_cost' => 'TotalPickingCost',
        'total_postage_cost' => 'TotalPostageCost',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'courier_service_id' => 'setCourierServiceId',
        'invoice_summary_id' => 'setInvoiceSummaryId',
        'picking_cost' => 'setPickingCost',
        'extra_picking_cost' => 'setExtraPickingCost',
        'postage_cost' => 'setPostageCost',
        'cost_postage_cost' => 'setCostPostageCost',
        'vat_free_postage_cost' => 'setVatFreePostageCost',
        'packaging_cost' => 'setPackagingCost',
        'rework_cost' => 'setReworkCost',
        'invoice_date' => 'setInvoiceDate',
        'comments' => 'setComments',
        'number_of_picks' => 'setNumberOfPicks',
        'number_of_carton_picks' => 'setNumberOfCartonPicks',
        'number_of_pallet_picks' => 'setNumberOfPalletPicks',
        'admin_fee' => 'setAdminFee',
        'total_cost' => 'setTotalCost',
        'total_picking_cost' => 'setTotalPickingCost',
        'total_postage_cost' => 'setTotalPostageCost',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'courier_service_id' => 'getCourierServiceId',
        'invoice_summary_id' => 'getInvoiceSummaryId',
        'picking_cost' => 'getPickingCost',
        'extra_picking_cost' => 'getExtraPickingCost',
        'postage_cost' => 'getPostageCost',
        'cost_postage_cost' => 'getCostPostageCost',
        'vat_free_postage_cost' => 'getVatFreePostageCost',
        'packaging_cost' => 'getPackagingCost',
        'rework_cost' => 'getReworkCost',
        'invoice_date' => 'getInvoiceDate',
        'comments' => 'getComments',
        'number_of_picks' => 'getNumberOfPicks',
        'number_of_carton_picks' => 'getNumberOfCartonPicks',
        'number_of_pallet_picks' => 'getNumberOfPalletPicks',
        'admin_fee' => 'getAdminFee',
        'total_cost' => 'getTotalCost',
        'total_picking_cost' => 'getTotalPickingCost',
        'total_postage_cost' => 'getTotalPostageCost',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['courier_service_id'] = isset($data['courier_service_id']) ? $data['courier_service_id'] : null;
        $this->container['invoice_summary_id'] = isset($data['invoice_summary_id']) ? $data['invoice_summary_id'] : null;
        $this->container['picking_cost'] = isset($data['picking_cost']) ? $data['picking_cost'] : null;
        $this->container['extra_picking_cost'] = isset($data['extra_picking_cost']) ? $data['extra_picking_cost'] : null;
        $this->container['postage_cost'] = isset($data['postage_cost']) ? $data['postage_cost'] : null;
        $this->container['cost_postage_cost'] = isset($data['cost_postage_cost']) ? $data['cost_postage_cost'] : null;
        $this->container['vat_free_postage_cost'] = isset($data['vat_free_postage_cost']) ? $data['vat_free_postage_cost'] : null;
        $this->container['packaging_cost'] = isset($data['packaging_cost']) ? $data['packaging_cost'] : null;
        $this->container['rework_cost'] = isset($data['rework_cost']) ? $data['rework_cost'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['number_of_picks'] = isset($data['number_of_picks']) ? $data['number_of_picks'] : null;
        $this->container['number_of_carton_picks'] = isset($data['number_of_carton_picks']) ? $data['number_of_carton_picks'] : null;
        $this->container['number_of_pallet_picks'] = isset($data['number_of_pallet_picks']) ? $data['number_of_pallet_picks'] : null;
        $this->container['admin_fee'] = isset($data['admin_fee']) ? $data['admin_fee'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['total_picking_cost'] = isset($data['total_picking_cost']) ? $data['total_picking_cost'] : null;
        $this->container['total_postage_cost'] = isset($data['total_postage_cost']) ? $data['total_postage_cost'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets courier_service_id
     *
     * @return int
     */
    public function getCourierServiceId()
    {
        return $this->container['courier_service_id'];
    }

    /**
     * Sets courier_service_id
     *
     * @param int $courier_service_id courier_service_id
     *
     * @return $this
     */
    public function setCourierServiceId($courier_service_id)
    {
        $this->container['courier_service_id'] = $courier_service_id;

        return $this;
    }

    /**
     * Gets invoice_summary_id
     *
     * @return int
     */
    public function getInvoiceSummaryId()
    {
        return $this->container['invoice_summary_id'];
    }

    /**
     * Sets invoice_summary_id
     *
     * @param int $invoice_summary_id invoice_summary_id
     *
     * @return $this
     */
    public function setInvoiceSummaryId($invoice_summary_id)
    {
        $this->container['invoice_summary_id'] = $invoice_summary_id;

        return $this;
    }

    /**
     * Gets picking_cost
     *
     * @return double
     */
    public function getPickingCost()
    {
        return $this->container['picking_cost'];
    }

    /**
     * Sets picking_cost
     *
     * @param double $picking_cost picking_cost
     *
     * @return $this
     */
    public function setPickingCost($picking_cost)
    {
        $this->container['picking_cost'] = $picking_cost;

        return $this;
    }

    /**
     * Gets extra_picking_cost
     *
     * @return double
     */
    public function getExtraPickingCost()
    {
        return $this->container['extra_picking_cost'];
    }

    /**
     * Sets extra_picking_cost
     *
     * @param double $extra_picking_cost extra_picking_cost
     *
     * @return $this
     */
    public function setExtraPickingCost($extra_picking_cost)
    {
        $this->container['extra_picking_cost'] = $extra_picking_cost;

        return $this;
    }

    /**
     * Gets postage_cost
     *
     * @return double
     */
    public function getPostageCost()
    {
        return $this->container['postage_cost'];
    }

    /**
     * Sets postage_cost
     *
     * @param double $postage_cost postage_cost
     *
     * @return $this
     */
    public function setPostageCost($postage_cost)
    {
        $this->container['postage_cost'] = $postage_cost;

        return $this;
    }

    /**
     * Gets cost_postage_cost
     *
     * @return double
     */
    public function getCostPostageCost()
    {
        return $this->container['cost_postage_cost'];
    }

    /**
     * Sets cost_postage_cost
     *
     * @param double $cost_postage_cost cost_postage_cost
     *
     * @return $this
     */
    public function setCostPostageCost($cost_postage_cost)
    {
        $this->container['cost_postage_cost'] = $cost_postage_cost;

        return $this;
    }

    /**
     * Gets vat_free_postage_cost
     *
     * @return double
     */
    public function getVatFreePostageCost()
    {
        return $this->container['vat_free_postage_cost'];
    }

    /**
     * Sets vat_free_postage_cost
     *
     * @param double $vat_free_postage_cost vat_free_postage_cost
     *
     * @return $this
     */
    public function setVatFreePostageCost($vat_free_postage_cost)
    {
        $this->container['vat_free_postage_cost'] = $vat_free_postage_cost;

        return $this;
    }

    /**
     * Gets packaging_cost
     *
     * @return double
     */
    public function getPackagingCost()
    {
        return $this->container['packaging_cost'];
    }

    /**
     * Sets packaging_cost
     *
     * @param double $packaging_cost packaging_cost
     *
     * @return $this
     */
    public function setPackagingCost($packaging_cost)
    {
        $this->container['packaging_cost'] = $packaging_cost;

        return $this;
    }

    /**
     * Gets rework_cost
     *
     * @return double
     */
    public function getReworkCost()
    {
        return $this->container['rework_cost'];
    }

    /**
     * Sets rework_cost
     *
     * @param double $rework_cost rework_cost
     *
     * @return $this
     */
    public function setReworkCost($rework_cost)
    {
        $this->container['rework_cost'] = $rework_cost;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets number_of_picks
     *
     * @return int
     */
    public function getNumberOfPicks()
    {
        return $this->container['number_of_picks'];
    }

    /**
     * Sets number_of_picks
     *
     * @param int $number_of_picks number_of_picks
     *
     * @return $this
     */
    public function setNumberOfPicks($number_of_picks)
    {
        $this->container['number_of_picks'] = $number_of_picks;

        return $this;
    }

    /**
     * Gets number_of_carton_picks
     *
     * @return int
     */
    public function getNumberOfCartonPicks()
    {
        return $this->container['number_of_carton_picks'];
    }

    /**
     * Sets number_of_carton_picks
     *
     * @param int $number_of_carton_picks number_of_carton_picks
     *
     * @return $this
     */
    public function setNumberOfCartonPicks($number_of_carton_picks)
    {
        $this->container['number_of_carton_picks'] = $number_of_carton_picks;

        return $this;
    }

    /**
     * Gets number_of_pallet_picks
     *
     * @return int
     */
    public function getNumberOfPalletPicks()
    {
        return $this->container['number_of_pallet_picks'];
    }

    /**
     * Sets number_of_pallet_picks
     *
     * @param int $number_of_pallet_picks number_of_pallet_picks
     *
     * @return $this
     */
    public function setNumberOfPalletPicks($number_of_pallet_picks)
    {
        $this->container['number_of_pallet_picks'] = $number_of_pallet_picks;

        return $this;
    }

    /**
     * Gets admin_fee
     *
     * @return double
     */
    public function getAdminFee()
    {
        return $this->container['admin_fee'];
    }

    /**
     * Sets admin_fee
     *
     * @param double $admin_fee admin_fee
     *
     * @return $this
     */
    public function setAdminFee($admin_fee)
    {
        $this->container['admin_fee'] = $admin_fee;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost total_cost
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets total_picking_cost
     *
     * @return double
     */
    public function getTotalPickingCost()
    {
        return $this->container['total_picking_cost'];
    }

    /**
     * Sets total_picking_cost
     *
     * @param double $total_picking_cost total_picking_cost
     *
     * @return $this
     */
    public function setTotalPickingCost($total_picking_cost)
    {
        $this->container['total_picking_cost'] = $total_picking_cost;

        return $this;
    }

    /**
     * Gets total_postage_cost
     *
     * @return double
     */
    public function getTotalPostageCost()
    {
        return $this->container['total_postage_cost'];
    }

    /**
     * Sets total_postage_cost
     *
     * @param double $total_postage_cost total_postage_cost
     *
     * @return $this
     */
    public function setTotalPostageCost($total_postage_cost)
    {
        $this->container['total_postage_cost'] = $total_postage_cost;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


