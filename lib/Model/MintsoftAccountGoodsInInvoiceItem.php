<?php
/**
 * ToolkitDataClassesAccountGoodsInInvoiceItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesAccountGoodsInInvoiceItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftAccountGoodsInInvoiceItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Account.GoodsInInvoiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_summary_id' => 'int',
        'invoice_date' => '\DateTime',
        'asnid' => 'int',
        'quantity' => 'int',
        'note' => 'string',
        'delivery_size_cost' => 'double',
        'number_of_units' => 'int',
        'unit_cost' => 'double',
        'admin_cost' => 'double',
        'total_unit_cost' => 'double',
        'number_of_skus' => 'int',
        'sku_cost' => 'double',
        'total_per_sku_cost' => 'double',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_summary_id' => 'int32',
        'invoice_date' => 'date-time',
        'asnid' => 'int32',
        'quantity' => 'int32',
        'note' => null,
        'delivery_size_cost' => 'double',
        'number_of_units' => 'int32',
        'unit_cost' => 'double',
        'admin_cost' => 'double',
        'total_unit_cost' => 'double',
        'number_of_skus' => 'int32',
        'sku_cost' => 'double',
        'total_per_sku_cost' => 'double',
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_summary_id' => 'InvoiceSummaryId',
        'invoice_date' => 'InvoiceDate',
        'asnid' => 'ASNId',
        'quantity' => 'Quantity',
        'note' => 'Note',
        'delivery_size_cost' => 'DeliverySizeCost',
        'number_of_units' => 'NumberOfUnits',
        'unit_cost' => 'UnitCost',
        'admin_cost' => 'AdminCost',
        'total_unit_cost' => 'TotalUnitCost',
        'number_of_skus' => 'NumberOfSkus',
        'sku_cost' => 'SkuCost',
        'total_per_sku_cost' => 'TotalPerSkuCost',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_summary_id' => 'setInvoiceSummaryId',
        'invoice_date' => 'setInvoiceDate',
        'asnid' => 'setAsnid',
        'quantity' => 'setQuantity',
        'note' => 'setNote',
        'delivery_size_cost' => 'setDeliverySizeCost',
        'number_of_units' => 'setNumberOfUnits',
        'unit_cost' => 'setUnitCost',
        'admin_cost' => 'setAdminCost',
        'total_unit_cost' => 'setTotalUnitCost',
        'number_of_skus' => 'setNumberOfSkus',
        'sku_cost' => 'setSkuCost',
        'total_per_sku_cost' => 'setTotalPerSkuCost',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_summary_id' => 'getInvoiceSummaryId',
        'invoice_date' => 'getInvoiceDate',
        'asnid' => 'getAsnid',
        'quantity' => 'getQuantity',
        'note' => 'getNote',
        'delivery_size_cost' => 'getDeliverySizeCost',
        'number_of_units' => 'getNumberOfUnits',
        'unit_cost' => 'getUnitCost',
        'admin_cost' => 'getAdminCost',
        'total_unit_cost' => 'getTotalUnitCost',
        'number_of_skus' => 'getNumberOfSkus',
        'sku_cost' => 'getSkuCost',
        'total_per_sku_cost' => 'getTotalPerSkuCost',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_summary_id'] = isset($data['invoice_summary_id']) ? $data['invoice_summary_id'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['asnid'] = isset($data['asnid']) ? $data['asnid'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['delivery_size_cost'] = isset($data['delivery_size_cost']) ? $data['delivery_size_cost'] : null;
        $this->container['number_of_units'] = isset($data['number_of_units']) ? $data['number_of_units'] : null;
        $this->container['unit_cost'] = isset($data['unit_cost']) ? $data['unit_cost'] : null;
        $this->container['admin_cost'] = isset($data['admin_cost']) ? $data['admin_cost'] : null;
        $this->container['total_unit_cost'] = isset($data['total_unit_cost']) ? $data['total_unit_cost'] : null;
        $this->container['number_of_skus'] = isset($data['number_of_skus']) ? $data['number_of_skus'] : null;
        $this->container['sku_cost'] = isset($data['sku_cost']) ? $data['sku_cost'] : null;
        $this->container['total_per_sku_cost'] = isset($data['total_per_sku_cost']) ? $data['total_per_sku_cost'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_summary_id
     *
     * @return int
     */
    public function getInvoiceSummaryId()
    {
        return $this->container['invoice_summary_id'];
    }

    /**
     * Sets invoice_summary_id
     *
     * @param int $invoice_summary_id invoice_summary_id
     *
     * @return $this
     */
    public function setInvoiceSummaryId($invoice_summary_id)
    {
        $this->container['invoice_summary_id'] = $invoice_summary_id;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets asnid
     *
     * @return int
     */
    public function getAsnid()
    {
        return $this->container['asnid'];
    }

    /**
     * Sets asnid
     *
     * @param int $asnid asnid
     *
     * @return $this
     */
    public function setAsnid($asnid)
    {
        $this->container['asnid'] = $asnid;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets delivery_size_cost
     *
     * @return double
     */
    public function getDeliverySizeCost()
    {
        return $this->container['delivery_size_cost'];
    }

    /**
     * Sets delivery_size_cost
     *
     * @param double $delivery_size_cost delivery_size_cost
     *
     * @return $this
     */
    public function setDeliverySizeCost($delivery_size_cost)
    {
        $this->container['delivery_size_cost'] = $delivery_size_cost;

        return $this;
    }

    /**
     * Gets number_of_units
     *
     * @return int
     */
    public function getNumberOfUnits()
    {
        return $this->container['number_of_units'];
    }

    /**
     * Sets number_of_units
     *
     * @param int $number_of_units number_of_units
     *
     * @return $this
     */
    public function setNumberOfUnits($number_of_units)
    {
        $this->container['number_of_units'] = $number_of_units;

        return $this;
    }

    /**
     * Gets unit_cost
     *
     * @return double
     */
    public function getUnitCost()
    {
        return $this->container['unit_cost'];
    }

    /**
     * Sets unit_cost
     *
     * @param double $unit_cost unit_cost
     *
     * @return $this
     */
    public function setUnitCost($unit_cost)
    {
        $this->container['unit_cost'] = $unit_cost;

        return $this;
    }

    /**
     * Gets admin_cost
     *
     * @return double
     */
    public function getAdminCost()
    {
        return $this->container['admin_cost'];
    }

    /**
     * Sets admin_cost
     *
     * @param double $admin_cost admin_cost
     *
     * @return $this
     */
    public function setAdminCost($admin_cost)
    {
        $this->container['admin_cost'] = $admin_cost;

        return $this;
    }

    /**
     * Gets total_unit_cost
     *
     * @return double
     */
    public function getTotalUnitCost()
    {
        return $this->container['total_unit_cost'];
    }

    /**
     * Sets total_unit_cost
     *
     * @param double $total_unit_cost total_unit_cost
     *
     * @return $this
     */
    public function setTotalUnitCost($total_unit_cost)
    {
        $this->container['total_unit_cost'] = $total_unit_cost;

        return $this;
    }

    /**
     * Gets number_of_skus
     *
     * @return int
     */
    public function getNumberOfSkus()
    {
        return $this->container['number_of_skus'];
    }

    /**
     * Sets number_of_skus
     *
     * @param int $number_of_skus number_of_skus
     *
     * @return $this
     */
    public function setNumberOfSkus($number_of_skus)
    {
        $this->container['number_of_skus'] = $number_of_skus;

        return $this;
    }

    /**
     * Gets sku_cost
     *
     * @return double
     */
    public function getSkuCost()
    {
        return $this->container['sku_cost'];
    }

    /**
     * Sets sku_cost
     *
     * @param double $sku_cost sku_cost
     *
     * @return $this
     */
    public function setSkuCost($sku_cost)
    {
        $this->container['sku_cost'] = $sku_cost;

        return $this;
    }

    /**
     * Gets total_per_sku_cost
     *
     * @return double
     */
    public function getTotalPerSkuCost()
    {
        return $this->container['total_per_sku_cost'];
    }

    /**
     * Sets total_per_sku_cost
     *
     * @param double $total_per_sku_cost total_per_sku_cost
     *
     * @return $this
     */
    public function setTotalPerSkuCost($total_per_sku_cost)
    {
        $this->container['total_per_sku_cost'] = $total_per_sku_cost;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


