<?php
/**
 * ToolkitDataClassesAccountInvoiceSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesAccountInvoiceSummary Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesAccountInvoiceSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Account.InvoiceSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number_of_parcels' => 'int',
        'number_of_items' => 'int',
        'picking_cost' => 'double',
        'postage_cost' => 'double',
        'vat_free_postage_cost' => 'double',
        'rework_cost' => 'double',
        'packaging_cost' => 'double',
        'generic_invoice_items_cost' => 'double',
        'collections_cost' => 'double',
        'returns_cost' => 'double',
        'goods_in_cost' => 'double',
        'storage_cost' => 'double',
        'admin_fee' => 'double',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number_of_parcels' => 'int32',
        'number_of_items' => 'int32',
        'picking_cost' => 'double',
        'postage_cost' => 'double',
        'vat_free_postage_cost' => 'double',
        'rework_cost' => 'double',
        'packaging_cost' => 'double',
        'generic_invoice_items_cost' => 'double',
        'collections_cost' => 'double',
        'returns_cost' => 'double',
        'goods_in_cost' => 'double',
        'storage_cost' => 'double',
        'admin_fee' => 'double',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number_of_parcels' => 'NumberOfParcels',
        'number_of_items' => 'NumberOfItems',
        'picking_cost' => 'PickingCost',
        'postage_cost' => 'PostageCost',
        'vat_free_postage_cost' => 'VatFreePostageCost',
        'rework_cost' => 'ReworkCost',
        'packaging_cost' => 'PackagingCost',
        'generic_invoice_items_cost' => 'GenericInvoiceItemsCost',
        'collections_cost' => 'CollectionsCost',
        'returns_cost' => 'ReturnsCost',
        'goods_in_cost' => 'GoodsInCost',
        'storage_cost' => 'StorageCost',
        'admin_fee' => 'AdminFee',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number_of_parcels' => 'setNumberOfParcels',
        'number_of_items' => 'setNumberOfItems',
        'picking_cost' => 'setPickingCost',
        'postage_cost' => 'setPostageCost',
        'vat_free_postage_cost' => 'setVatFreePostageCost',
        'rework_cost' => 'setReworkCost',
        'packaging_cost' => 'setPackagingCost',
        'generic_invoice_items_cost' => 'setGenericInvoiceItemsCost',
        'collections_cost' => 'setCollectionsCost',
        'returns_cost' => 'setReturnsCost',
        'goods_in_cost' => 'setGoodsInCost',
        'storage_cost' => 'setStorageCost',
        'admin_fee' => 'setAdminFee',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number_of_parcels' => 'getNumberOfParcels',
        'number_of_items' => 'getNumberOfItems',
        'picking_cost' => 'getPickingCost',
        'postage_cost' => 'getPostageCost',
        'vat_free_postage_cost' => 'getVatFreePostageCost',
        'rework_cost' => 'getReworkCost',
        'packaging_cost' => 'getPackagingCost',
        'generic_invoice_items_cost' => 'getGenericInvoiceItemsCost',
        'collections_cost' => 'getCollectionsCost',
        'returns_cost' => 'getReturnsCost',
        'goods_in_cost' => 'getGoodsInCost',
        'storage_cost' => 'getStorageCost',
        'admin_fee' => 'getAdminFee',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number_of_parcels'] = isset($data['number_of_parcels']) ? $data['number_of_parcels'] : null;
        $this->container['number_of_items'] = isset($data['number_of_items']) ? $data['number_of_items'] : null;
        $this->container['picking_cost'] = isset($data['picking_cost']) ? $data['picking_cost'] : null;
        $this->container['postage_cost'] = isset($data['postage_cost']) ? $data['postage_cost'] : null;
        $this->container['vat_free_postage_cost'] = isset($data['vat_free_postage_cost']) ? $data['vat_free_postage_cost'] : null;
        $this->container['rework_cost'] = isset($data['rework_cost']) ? $data['rework_cost'] : null;
        $this->container['packaging_cost'] = isset($data['packaging_cost']) ? $data['packaging_cost'] : null;
        $this->container['generic_invoice_items_cost'] = isset($data['generic_invoice_items_cost']) ? $data['generic_invoice_items_cost'] : null;
        $this->container['collections_cost'] = isset($data['collections_cost']) ? $data['collections_cost'] : null;
        $this->container['returns_cost'] = isset($data['returns_cost']) ? $data['returns_cost'] : null;
        $this->container['goods_in_cost'] = isset($data['goods_in_cost']) ? $data['goods_in_cost'] : null;
        $this->container['storage_cost'] = isset($data['storage_cost']) ? $data['storage_cost'] : null;
        $this->container['admin_fee'] = isset($data['admin_fee']) ? $data['admin_fee'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number_of_parcels
     *
     * @return int
     */
    public function getNumberOfParcels()
    {
        return $this->container['number_of_parcels'];
    }

    /**
     * Sets number_of_parcels
     *
     * @param int $number_of_parcels number_of_parcels
     *
     * @return $this
     */
    public function setNumberOfParcels($number_of_parcels)
    {
        $this->container['number_of_parcels'] = $number_of_parcels;

        return $this;
    }

    /**
     * Gets number_of_items
     *
     * @return int
     */
    public function getNumberOfItems()
    {
        return $this->container['number_of_items'];
    }

    /**
     * Sets number_of_items
     *
     * @param int $number_of_items number_of_items
     *
     * @return $this
     */
    public function setNumberOfItems($number_of_items)
    {
        $this->container['number_of_items'] = $number_of_items;

        return $this;
    }

    /**
     * Gets picking_cost
     *
     * @return double
     */
    public function getPickingCost()
    {
        return $this->container['picking_cost'];
    }

    /**
     * Sets picking_cost
     *
     * @param double $picking_cost picking_cost
     *
     * @return $this
     */
    public function setPickingCost($picking_cost)
    {
        $this->container['picking_cost'] = $picking_cost;

        return $this;
    }

    /**
     * Gets postage_cost
     *
     * @return double
     */
    public function getPostageCost()
    {
        return $this->container['postage_cost'];
    }

    /**
     * Sets postage_cost
     *
     * @param double $postage_cost postage_cost
     *
     * @return $this
     */
    public function setPostageCost($postage_cost)
    {
        $this->container['postage_cost'] = $postage_cost;

        return $this;
    }

    /**
     * Gets vat_free_postage_cost
     *
     * @return double
     */
    public function getVatFreePostageCost()
    {
        return $this->container['vat_free_postage_cost'];
    }

    /**
     * Sets vat_free_postage_cost
     *
     * @param double $vat_free_postage_cost vat_free_postage_cost
     *
     * @return $this
     */
    public function setVatFreePostageCost($vat_free_postage_cost)
    {
        $this->container['vat_free_postage_cost'] = $vat_free_postage_cost;

        return $this;
    }

    /**
     * Gets rework_cost
     *
     * @return double
     */
    public function getReworkCost()
    {
        return $this->container['rework_cost'];
    }

    /**
     * Sets rework_cost
     *
     * @param double $rework_cost rework_cost
     *
     * @return $this
     */
    public function setReworkCost($rework_cost)
    {
        $this->container['rework_cost'] = $rework_cost;

        return $this;
    }

    /**
     * Gets packaging_cost
     *
     * @return double
     */
    public function getPackagingCost()
    {
        return $this->container['packaging_cost'];
    }

    /**
     * Sets packaging_cost
     *
     * @param double $packaging_cost packaging_cost
     *
     * @return $this
     */
    public function setPackagingCost($packaging_cost)
    {
        $this->container['packaging_cost'] = $packaging_cost;

        return $this;
    }

    /**
     * Gets generic_invoice_items_cost
     *
     * @return double
     */
    public function getGenericInvoiceItemsCost()
    {
        return $this->container['generic_invoice_items_cost'];
    }

    /**
     * Sets generic_invoice_items_cost
     *
     * @param double $generic_invoice_items_cost generic_invoice_items_cost
     *
     * @return $this
     */
    public function setGenericInvoiceItemsCost($generic_invoice_items_cost)
    {
        $this->container['generic_invoice_items_cost'] = $generic_invoice_items_cost;

        return $this;
    }

    /**
     * Gets collections_cost
     *
     * @return double
     */
    public function getCollectionsCost()
    {
        return $this->container['collections_cost'];
    }

    /**
     * Sets collections_cost
     *
     * @param double $collections_cost collections_cost
     *
     * @return $this
     */
    public function setCollectionsCost($collections_cost)
    {
        $this->container['collections_cost'] = $collections_cost;

        return $this;
    }

    /**
     * Gets returns_cost
     *
     * @return double
     */
    public function getReturnsCost()
    {
        return $this->container['returns_cost'];
    }

    /**
     * Sets returns_cost
     *
     * @param double $returns_cost returns_cost
     *
     * @return $this
     */
    public function setReturnsCost($returns_cost)
    {
        $this->container['returns_cost'] = $returns_cost;

        return $this;
    }

    /**
     * Gets goods_in_cost
     *
     * @return double
     */
    public function getGoodsInCost()
    {
        return $this->container['goods_in_cost'];
    }

    /**
     * Sets goods_in_cost
     *
     * @param double $goods_in_cost goods_in_cost
     *
     * @return $this
     */
    public function setGoodsInCost($goods_in_cost)
    {
        $this->container['goods_in_cost'] = $goods_in_cost;

        return $this;
    }

    /**
     * Gets storage_cost
     *
     * @return double
     */
    public function getStorageCost()
    {
        return $this->container['storage_cost'];
    }

    /**
     * Sets storage_cost
     *
     * @param double $storage_cost storage_cost
     *
     * @return $this
     */
    public function setStorageCost($storage_cost)
    {
        $this->container['storage_cost'] = $storage_cost;

        return $this;
    }

    /**
     * Gets admin_fee
     *
     * @return double
     */
    public function getAdminFee()
    {
        return $this->container['admin_fee'];
    }

    /**
     * Sets admin_fee
     *
     * @param double $admin_fee admin_fee
     *
     * @return $this
     */
    public function setAdminFee($admin_fee)
    {
        $this->container['admin_fee'] = $admin_fee;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


