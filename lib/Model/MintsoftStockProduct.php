<?php
/**
 * ToolkitDataClassesStockProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftStockProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku' => 'string',
        'name' => 'string',
        'pallet_sizes' => 'string',
        'packing_instructions' => 'string',
        'description' => 'string',
        'customs_description' => 'string',
        'country_of_manufacture_id' => 'int',
        'country_of_manufacture' => '\Swagger\Client\Model\MintsoftCommonCountry',
        'ean' => 'string',
        'upc' => 'string',
        'low_stock_alert_level' => 'int',
        'weight' => 'double',
        'height' => 'double',
        'width' => 'double',
        'depth' => 'double',
        'volume' => 'double',
        'back_order' => 'bool',
        'bundle' => 'bool',
        'dis_cont' => 'bool',
        'price' => 'double',
        'cost_price' => 'double',
        'vat_exempt' => 'bool',
        'additional_parcels_required' => 'int',
        'units_per_parcel' => 'double',
        'has_batch_number' => 'bool',
        'log_batch_inbound' => 'bool',
        'log_batch_outbound' => 'bool',
        'has_serial_number' => 'bool',
        'log_serial_inbound' => 'bool',
        'log_serial_outbound' => 'bool',
        'has_expiry_date' => 'bool',
        'log_expiry_date_inbound' => 'bool',
        'log_expiry_date_outbound' => 'bool',
        'best_before_date_warning_period_days' => 'int',
        'commodity_code' => '\Swagger\Client\Model\MintsoftStockCommodityCode',
        'handling_time' => 'int',
        'un_number' => 'string',
        'image_url' => 'string',
        'product_hazardous_goods' => '\Swagger\Client\Model\MintsoftStockProductHazardousGoods',
        'product_purchasing_settings' => '\Swagger\Client\Model\MintsoftStockProductPurchasingSettings',
        'product_growth_rates' => '\Swagger\Client\Model\ToolkitDataClassesStockProductGrowthRates[]',
        'external_ful_filment_product' => '\Swagger\Client\Model\MintsoftStockExternalFulFilmentProduct',
        'external_ful_filment_product_inventory' => '\Swagger\Client\Model\ToolkitDataClassesStockExternalFulFilmentProductInventory[]',
        'order_items' => '\Swagger\Client\Model\ToolkitDataClassesOrdersOrderItem[]',
        'subscription' => 'bool',
        'subscription_length' => 'int',
        'subscription_frequency' => 'string',
        'product_in_categories' => '\Swagger\Client\Model\ToolkitDataClassesStockProductInCategory[]',
        'product_prices' => '\Swagger\Client\Model\ToolkitDataClassesStockProductPrice[]',
        'product_suppliers' => '\Swagger\Client\Model\ToolkitDataClassesStockProductInSupplier[]',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku' => null,
        'name' => null,
        'pallet_sizes' => null,
        'packing_instructions' => null,
        'description' => null,
        'customs_description' => null,
        'country_of_manufacture_id' => 'int32',
        'country_of_manufacture' => null,
        'ean' => null,
        'upc' => null,
        'low_stock_alert_level' => 'int32',
        'weight' => 'double',
        'height' => 'double',
        'width' => 'double',
        'depth' => 'double',
        'volume' => 'double',
        'back_order' => null,
        'bundle' => null,
        'dis_cont' => null,
        'price' => 'double',
        'cost_price' => 'double',
        'vat_exempt' => null,
        'additional_parcels_required' => 'int32',
        'units_per_parcel' => 'double',
        'has_batch_number' => null,
        'log_batch_inbound' => null,
        'log_batch_outbound' => null,
        'has_serial_number' => null,
        'log_serial_inbound' => null,
        'log_serial_outbound' => null,
        'has_expiry_date' => null,
        'log_expiry_date_inbound' => null,
        'log_expiry_date_outbound' => null,
        'best_before_date_warning_period_days' => 'int32',
        'commodity_code' => null,
        'handling_time' => 'int32',
        'un_number' => null,
        'image_url' => null,
        'product_hazardous_goods' => null,
        'product_purchasing_settings' => null,
        'product_growth_rates' => null,
        'external_ful_filment_product' => null,
        'external_ful_filment_product_inventory' => null,
        'order_items' => null,
        'subscription' => null,
        'subscription_length' => 'int32',
        'subscription_frequency' => null,
        'product_in_categories' => null,
        'product_prices' => null,
        'product_suppliers' => null,
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku' => 'SKU',
        'name' => 'Name',
        'pallet_sizes' => 'PalletSizes',
        'packing_instructions' => 'PackingInstructions',
        'description' => 'Description',
        'customs_description' => 'CustomsDescription',
        'country_of_manufacture_id' => 'CountryOfManufactureId',
        'country_of_manufacture' => 'CountryOfManufacture',
        'ean' => 'EAN',
        'upc' => 'UPC',
        'low_stock_alert_level' => 'LowStockAlertLevel',
        'weight' => 'Weight',
        'height' => 'Height',
        'width' => 'Width',
        'depth' => 'Depth',
        'volume' => 'Volume',
        'back_order' => 'BackOrder',
        'bundle' => 'Bundle',
        'dis_cont' => 'DisCont',
        'price' => 'Price',
        'cost_price' => 'CostPrice',
        'vat_exempt' => 'VatExempt',
        'additional_parcels_required' => 'AdditionalParcelsRequired',
        'units_per_parcel' => 'UnitsPerParcel',
        'has_batch_number' => 'HasBatchNumber',
        'log_batch_inbound' => 'LogBatchInbound',
        'log_batch_outbound' => 'LogBatchOutbound',
        'has_serial_number' => 'HasSerialNumber',
        'log_serial_inbound' => 'LogSerialInbound',
        'log_serial_outbound' => 'LogSerialOutbound',
        'has_expiry_date' => 'HasExpiryDate',
        'log_expiry_date_inbound' => 'LogExpiryDateInbound',
        'log_expiry_date_outbound' => 'LogExpiryDateOutbound',
        'best_before_date_warning_period_days' => 'BestBeforeDateWarningPeriodDays',
        'commodity_code' => 'CommodityCode',
        'handling_time' => 'HandlingTime',
        'un_number' => 'UnNumber',
        'image_url' => 'ImageURL',
        'product_hazardous_goods' => 'ProductHazardousGoods',
        'product_purchasing_settings' => 'ProductPurchasingSettings',
        'product_growth_rates' => 'ProductGrowthRates',
        'external_ful_filment_product' => 'ExternalFulFilmentProduct',
        'external_ful_filment_product_inventory' => 'ExternalFulFilmentProductInventory',
        'order_items' => 'OrderItems',
        'subscription' => 'Subscription',
        'subscription_length' => 'SubscriptionLength',
        'subscription_frequency' => 'SubscriptionFrequency',
        'product_in_categories' => 'ProductInCategories',
        'product_prices' => 'ProductPrices',
        'product_suppliers' => 'ProductSuppliers',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku' => 'setSku',
        'name' => 'setName',
        'pallet_sizes' => 'setPalletSizes',
        'packing_instructions' => 'setPackingInstructions',
        'description' => 'setDescription',
        'customs_description' => 'setCustomsDescription',
        'country_of_manufacture_id' => 'setCountryOfManufactureId',
        'country_of_manufacture' => 'setCountryOfManufacture',
        'ean' => 'setEan',
        'upc' => 'setUpc',
        'low_stock_alert_level' => 'setLowStockAlertLevel',
        'weight' => 'setWeight',
        'height' => 'setHeight',
        'width' => 'setWidth',
        'depth' => 'setDepth',
        'volume' => 'setVolume',
        'back_order' => 'setBackOrder',
        'bundle' => 'setBundle',
        'dis_cont' => 'setDisCont',
        'price' => 'setPrice',
        'cost_price' => 'setCostPrice',
        'vat_exempt' => 'setVatExempt',
        'additional_parcels_required' => 'setAdditionalParcelsRequired',
        'units_per_parcel' => 'setUnitsPerParcel',
        'has_batch_number' => 'setHasBatchNumber',
        'log_batch_inbound' => 'setLogBatchInbound',
        'log_batch_outbound' => 'setLogBatchOutbound',
        'has_serial_number' => 'setHasSerialNumber',
        'log_serial_inbound' => 'setLogSerialInbound',
        'log_serial_outbound' => 'setLogSerialOutbound',
        'has_expiry_date' => 'setHasExpiryDate',
        'log_expiry_date_inbound' => 'setLogExpiryDateInbound',
        'log_expiry_date_outbound' => 'setLogExpiryDateOutbound',
        'best_before_date_warning_period_days' => 'setBestBeforeDateWarningPeriodDays',
        'commodity_code' => 'setCommodityCode',
        'handling_time' => 'setHandlingTime',
        'un_number' => 'setUnNumber',
        'image_url' => 'setImageUrl',
        'product_hazardous_goods' => 'setProductHazardousGoods',
        'product_purchasing_settings' => 'setProductPurchasingSettings',
        'product_growth_rates' => 'setProductGrowthRates',
        'external_ful_filment_product' => 'setExternalFulFilmentProduct',
        'external_ful_filment_product_inventory' => 'setExternalFulFilmentProductInventory',
        'order_items' => 'setOrderItems',
        'subscription' => 'setSubscription',
        'subscription_length' => 'setSubscriptionLength',
        'subscription_frequency' => 'setSubscriptionFrequency',
        'product_in_categories' => 'setProductInCategories',
        'product_prices' => 'setProductPrices',
        'product_suppliers' => 'setProductSuppliers',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku' => 'getSku',
        'name' => 'getName',
        'pallet_sizes' => 'getPalletSizes',
        'packing_instructions' => 'getPackingInstructions',
        'description' => 'getDescription',
        'customs_description' => 'getCustomsDescription',
        'country_of_manufacture_id' => 'getCountryOfManufactureId',
        'country_of_manufacture' => 'getCountryOfManufacture',
        'ean' => 'getEan',
        'upc' => 'getUpc',
        'low_stock_alert_level' => 'getLowStockAlertLevel',
        'weight' => 'getWeight',
        'height' => 'getHeight',
        'width' => 'getWidth',
        'depth' => 'getDepth',
        'volume' => 'getVolume',
        'back_order' => 'getBackOrder',
        'bundle' => 'getBundle',
        'dis_cont' => 'getDisCont',
        'price' => 'getPrice',
        'cost_price' => 'getCostPrice',
        'vat_exempt' => 'getVatExempt',
        'additional_parcels_required' => 'getAdditionalParcelsRequired',
        'units_per_parcel' => 'getUnitsPerParcel',
        'has_batch_number' => 'getHasBatchNumber',
        'log_batch_inbound' => 'getLogBatchInbound',
        'log_batch_outbound' => 'getLogBatchOutbound',
        'has_serial_number' => 'getHasSerialNumber',
        'log_serial_inbound' => 'getLogSerialInbound',
        'log_serial_outbound' => 'getLogSerialOutbound',
        'has_expiry_date' => 'getHasExpiryDate',
        'log_expiry_date_inbound' => 'getLogExpiryDateInbound',
        'log_expiry_date_outbound' => 'getLogExpiryDateOutbound',
        'best_before_date_warning_period_days' => 'getBestBeforeDateWarningPeriodDays',
        'commodity_code' => 'getCommodityCode',
        'handling_time' => 'getHandlingTime',
        'un_number' => 'getUnNumber',
        'image_url' => 'getImageUrl',
        'product_hazardous_goods' => 'getProductHazardousGoods',
        'product_purchasing_settings' => 'getProductPurchasingSettings',
        'product_growth_rates' => 'getProductGrowthRates',
        'external_ful_filment_product' => 'getExternalFulFilmentProduct',
        'external_ful_filment_product_inventory' => 'getExternalFulFilmentProductInventory',
        'order_items' => 'getOrderItems',
        'subscription' => 'getSubscription',
        'subscription_length' => 'getSubscriptionLength',
        'subscription_frequency' => 'getSubscriptionFrequency',
        'product_in_categories' => 'getProductInCategories',
        'product_prices' => 'getProductPrices',
        'product_suppliers' => 'getProductSuppliers',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['pallet_sizes'] = isset($data['pallet_sizes']) ? $data['pallet_sizes'] : null;
        $this->container['packing_instructions'] = isset($data['packing_instructions']) ? $data['packing_instructions'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['customs_description'] = isset($data['customs_description']) ? $data['customs_description'] : null;
        $this->container['country_of_manufacture_id'] = isset($data['country_of_manufacture_id']) ? $data['country_of_manufacture_id'] : null;
        $this->container['country_of_manufacture'] = isset($data['country_of_manufacture']) ? $data['country_of_manufacture'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['upc'] = isset($data['upc']) ? $data['upc'] : null;
        $this->container['low_stock_alert_level'] = isset($data['low_stock_alert_level']) ? $data['low_stock_alert_level'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['back_order'] = isset($data['back_order']) ? $data['back_order'] : null;
        $this->container['bundle'] = isset($data['bundle']) ? $data['bundle'] : null;
        $this->container['dis_cont'] = isset($data['dis_cont']) ? $data['dis_cont'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['cost_price'] = isset($data['cost_price']) ? $data['cost_price'] : null;
        $this->container['vat_exempt'] = isset($data['vat_exempt']) ? $data['vat_exempt'] : null;
        $this->container['additional_parcels_required'] = isset($data['additional_parcels_required']) ? $data['additional_parcels_required'] : null;
        $this->container['units_per_parcel'] = isset($data['units_per_parcel']) ? $data['units_per_parcel'] : null;
        $this->container['has_batch_number'] = isset($data['has_batch_number']) ? $data['has_batch_number'] : null;
        $this->container['log_batch_inbound'] = isset($data['log_batch_inbound']) ? $data['log_batch_inbound'] : null;
        $this->container['log_batch_outbound'] = isset($data['log_batch_outbound']) ? $data['log_batch_outbound'] : null;
        $this->container['has_serial_number'] = isset($data['has_serial_number']) ? $data['has_serial_number'] : null;
        $this->container['log_serial_inbound'] = isset($data['log_serial_inbound']) ? $data['log_serial_inbound'] : null;
        $this->container['log_serial_outbound'] = isset($data['log_serial_outbound']) ? $data['log_serial_outbound'] : null;
        $this->container['has_expiry_date'] = isset($data['has_expiry_date']) ? $data['has_expiry_date'] : null;
        $this->container['log_expiry_date_inbound'] = isset($data['log_expiry_date_inbound']) ? $data['log_expiry_date_inbound'] : null;
        $this->container['log_expiry_date_outbound'] = isset($data['log_expiry_date_outbound']) ? $data['log_expiry_date_outbound'] : null;
        $this->container['best_before_date_warning_period_days'] = isset($data['best_before_date_warning_period_days']) ? $data['best_before_date_warning_period_days'] : null;
        $this->container['commodity_code'] = isset($data['commodity_code']) ? $data['commodity_code'] : null;
        $this->container['handling_time'] = isset($data['handling_time']) ? $data['handling_time'] : null;
        $this->container['un_number'] = isset($data['un_number']) ? $data['un_number'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['product_hazardous_goods'] = isset($data['product_hazardous_goods']) ? $data['product_hazardous_goods'] : null;
        $this->container['product_purchasing_settings'] = isset($data['product_purchasing_settings']) ? $data['product_purchasing_settings'] : null;
        $this->container['product_growth_rates'] = isset($data['product_growth_rates']) ? $data['product_growth_rates'] : null;
        $this->container['external_ful_filment_product'] = isset($data['external_ful_filment_product']) ? $data['external_ful_filment_product'] : null;
        $this->container['external_ful_filment_product_inventory'] = isset($data['external_ful_filment_product_inventory']) ? $data['external_ful_filment_product_inventory'] : null;
        $this->container['order_items'] = isset($data['order_items']) ? $data['order_items'] : null;
        $this->container['subscription'] = isset($data['subscription']) ? $data['subscription'] : null;
        $this->container['subscription_length'] = isset($data['subscription_length']) ? $data['subscription_length'] : null;
        $this->container['subscription_frequency'] = isset($data['subscription_frequency']) ? $data['subscription_frequency'] : null;
        $this->container['product_in_categories'] = isset($data['product_in_categories']) ? $data['product_in_categories'] : null;
        $this->container['product_prices'] = isset($data['product_prices']) ? $data['product_prices'] : null;
        $this->container['product_suppliers'] = isset($data['product_suppliers']) ? $data['product_suppliers'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        if ((mb_strlen($this->container['sku']) > 75)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be smaller than or equal to 75.";
        }

        if ((mb_strlen($this->container['sku']) < 0)) {
            $invalidProperties[] = "invalid value for 'sku', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 99)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['packing_instructions']) && (mb_strlen($this->container['packing_instructions']) > 250)) {
            $invalidProperties[] = "invalid value for 'packing_instructions', the character length must be smaller than or equal to 250.";
        }

        if (!is_null($this->container['packing_instructions']) && (mb_strlen($this->container['packing_instructions']) < 0)) {
            $invalidProperties[] = "invalid value for 'packing_instructions', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['customs_description']) && (mb_strlen($this->container['customs_description']) > 50)) {
            $invalidProperties[] = "invalid value for 'customs_description', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['customs_description']) && (mb_strlen($this->container['customs_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'customs_description', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['weight'] === null) {
            $invalidProperties[] = "'weight' can't be null";
        }
        if (($this->container['weight'] > 100000)) {
            $invalidProperties[] = "invalid value for 'weight', must be smaller than or equal to 100000.";
        }

        if (($this->container['weight'] < 0)) {
            $invalidProperties[] = "invalid value for 'weight', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['additional_parcels_required']) && ($this->container['additional_parcels_required'] > 1000)) {
            $invalidProperties[] = "invalid value for 'additional_parcels_required', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['additional_parcels_required']) && ($this->container['additional_parcels_required'] < 0)) {
            $invalidProperties[] = "invalid value for 'additional_parcels_required', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['units_per_parcel']) && ($this->container['units_per_parcel'] > 1000000)) {
            $invalidProperties[] = "invalid value for 'units_per_parcel', must be smaller than or equal to 1000000.";
        }

        if (!is_null($this->container['units_per_parcel']) && ($this->container['units_per_parcel'] < 0)) {
            $invalidProperties[] = "invalid value for 'units_per_parcel', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['best_before_date_warning_period_days']) && ($this->container['best_before_date_warning_period_days'] > 365)) {
            $invalidProperties[] = "invalid value for 'best_before_date_warning_period_days', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['best_before_date_warning_period_days']) && ($this->container['best_before_date_warning_period_days'] < 0)) {
            $invalidProperties[] = "invalid value for 'best_before_date_warning_period_days', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['handling_time']) && ($this->container['handling_time'] > 365)) {
            $invalidProperties[] = "invalid value for 'handling_time', must be smaller than or equal to 365.";
        }

        if (!is_null($this->container['handling_time']) && ($this->container['handling_time'] < 0)) {
            $invalidProperties[] = "invalid value for 'handling_time', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['un_number']) && (mb_strlen($this->container['un_number']) > 4)) {
            $invalidProperties[] = "invalid value for 'un_number', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['un_number']) && (mb_strlen($this->container['un_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'un_number', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        if ((mb_strlen($sku) > 75)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 75.');
        }
        if ((mb_strlen($sku) < 0)) {
            throw new \InvalidArgumentException('invalid length for $sku when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 99)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 99.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets pallet_sizes
     *
     * @return string
     */
    public function getPalletSizes()
    {
        return $this->container['pallet_sizes'];
    }

    /**
     * Sets pallet_sizes
     *
     * @param string $pallet_sizes pallet_sizes
     *
     * @return $this
     */
    public function setPalletSizes($pallet_sizes)
    {
        $this->container['pallet_sizes'] = $pallet_sizes;

        return $this;
    }

    /**
     * Gets packing_instructions
     *
     * @return string
     */
    public function getPackingInstructions()
    {
        return $this->container['packing_instructions'];
    }

    /**
     * Sets packing_instructions
     *
     * @param string $packing_instructions packing_instructions
     *
     * @return $this
     */
    public function setPackingInstructions($packing_instructions)
    {
        if (!is_null($packing_instructions) && (mb_strlen($packing_instructions) > 250)) {
            throw new \InvalidArgumentException('invalid length for $packing_instructions when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 250.');
        }
        if (!is_null($packing_instructions) && (mb_strlen($packing_instructions) < 0)) {
            throw new \InvalidArgumentException('invalid length for $packing_instructions when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['packing_instructions'] = $packing_instructions;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets customs_description
     *
     * @return string
     */
    public function getCustomsDescription()
    {
        return $this->container['customs_description'];
    }

    /**
     * Sets customs_description
     *
     * @param string $customs_description customs_description
     *
     * @return $this
     */
    public function setCustomsDescription($customs_description)
    {
        if (!is_null($customs_description) && (mb_strlen($customs_description) > 50)) {
            throw new \InvalidArgumentException('invalid length for $customs_description when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 50.');
        }
        if (!is_null($customs_description) && (mb_strlen($customs_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $customs_description when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['customs_description'] = $customs_description;

        return $this;
    }

    /**
     * Gets country_of_manufacture_id
     *
     * @return int
     */
    public function getCountryOfManufactureId()
    {
        return $this->container['country_of_manufacture_id'];
    }

    /**
     * Sets country_of_manufacture_id
     *
     * @param int $country_of_manufacture_id country_of_manufacture_id
     *
     * @return $this
     */
    public function setCountryOfManufactureId($country_of_manufacture_id)
    {
        $this->container['country_of_manufacture_id'] = $country_of_manufacture_id;

        return $this;
    }

    /**
     * Gets country_of_manufacture
     *
     * @return \Swagger\Client\Model\MintsoftCommonCountry
     */
    public function getCountryOfManufacture()
    {
        return $this->container['country_of_manufacture'];
    }

    /**
     * Sets country_of_manufacture
     *
     * @param \Swagger\Client\Model\MintsoftCommonCountry $country_of_manufacture country_of_manufacture
     *
     * @return $this
     */
    public function setCountryOfManufacture($country_of_manufacture)
    {
        $this->container['country_of_manufacture'] = $country_of_manufacture;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets upc
     *
     * @return string
     */
    public function getUpc()
    {
        return $this->container['upc'];
    }

    /**
     * Sets upc
     *
     * @param string $upc upc
     *
     * @return $this
     */
    public function setUpc($upc)
    {
        $this->container['upc'] = $upc;

        return $this;
    }

    /**
     * Gets low_stock_alert_level
     *
     * @return int
     */
    public function getLowStockAlertLevel()
    {
        return $this->container['low_stock_alert_level'];
    }

    /**
     * Sets low_stock_alert_level
     *
     * @param int $low_stock_alert_level low_stock_alert_level
     *
     * @return $this
     */
    public function setLowStockAlertLevel($low_stock_alert_level)
    {
        $this->container['low_stock_alert_level'] = $low_stock_alert_level;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {

        if (($weight > 100000)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 100000.');
        }
        if (($weight < 0)) {
            throw new \InvalidArgumentException('invalid value for $weight when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return double
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param double $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return double
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param double $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets back_order
     *
     * @return bool
     */
    public function getBackOrder()
    {
        return $this->container['back_order'];
    }

    /**
     * Sets back_order
     *
     * @param bool $back_order back_order
     *
     * @return $this
     */
    public function setBackOrder($back_order)
    {
        $this->container['back_order'] = $back_order;

        return $this;
    }

    /**
     * Gets bundle
     *
     * @return bool
     */
    public function getBundle()
    {
        return $this->container['bundle'];
    }

    /**
     * Sets bundle
     *
     * @param bool $bundle bundle
     *
     * @return $this
     */
    public function setBundle($bundle)
    {
        $this->container['bundle'] = $bundle;

        return $this;
    }

    /**
     * Gets dis_cont
     *
     * @return bool
     */
    public function getDisCont()
    {
        return $this->container['dis_cont'];
    }

    /**
     * Sets dis_cont
     *
     * @param bool $dis_cont dis_cont
     *
     * @return $this
     */
    public function setDisCont($dis_cont)
    {
        $this->container['dis_cont'] = $dis_cont;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets cost_price
     *
     * @return double
     */
    public function getCostPrice()
    {
        return $this->container['cost_price'];
    }

    /**
     * Sets cost_price
     *
     * @param double $cost_price cost_price
     *
     * @return $this
     */
    public function setCostPrice($cost_price)
    {
        $this->container['cost_price'] = $cost_price;

        return $this;
    }

    /**
     * Gets vat_exempt
     *
     * @return bool
     */
    public function getVatExempt()
    {
        return $this->container['vat_exempt'];
    }

    /**
     * Sets vat_exempt
     *
     * @param bool $vat_exempt vat_exempt
     *
     * @return $this
     */
    public function setVatExempt($vat_exempt)
    {
        $this->container['vat_exempt'] = $vat_exempt;

        return $this;
    }

    /**
     * Gets additional_parcels_required
     *
     * @return int
     */
    public function getAdditionalParcelsRequired()
    {
        return $this->container['additional_parcels_required'];
    }

    /**
     * Sets additional_parcels_required
     *
     * @param int $additional_parcels_required additional_parcels_required
     *
     * @return $this
     */
    public function setAdditionalParcelsRequired($additional_parcels_required)
    {

        if (!is_null($additional_parcels_required) && ($additional_parcels_required > 1000)) {
            throw new \InvalidArgumentException('invalid value for $additional_parcels_required when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 1000.');
        }
        if (!is_null($additional_parcels_required) && ($additional_parcels_required < 0)) {
            throw new \InvalidArgumentException('invalid value for $additional_parcels_required when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['additional_parcels_required'] = $additional_parcels_required;

        return $this;
    }

    /**
     * Gets units_per_parcel
     *
     * @return double
     */
    public function getUnitsPerParcel()
    {
        return $this->container['units_per_parcel'];
    }

    /**
     * Sets units_per_parcel
     *
     * @param double $units_per_parcel units_per_parcel
     *
     * @return $this
     */
    public function setUnitsPerParcel($units_per_parcel)
    {

        if (!is_null($units_per_parcel) && ($units_per_parcel > 1000000)) {
            throw new \InvalidArgumentException('invalid value for $units_per_parcel when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 1000000.');
        }
        if (!is_null($units_per_parcel) && ($units_per_parcel < 0)) {
            throw new \InvalidArgumentException('invalid value for $units_per_parcel when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['units_per_parcel'] = $units_per_parcel;

        return $this;
    }

    /**
     * Gets has_batch_number
     *
     * @return bool
     */
    public function getHasBatchNumber()
    {
        return $this->container['has_batch_number'];
    }

    /**
     * Sets has_batch_number
     *
     * @param bool $has_batch_number has_batch_number
     *
     * @return $this
     */
    public function setHasBatchNumber($has_batch_number)
    {
        $this->container['has_batch_number'] = $has_batch_number;

        return $this;
    }

    /**
     * Gets log_batch_inbound
     *
     * @return bool
     */
    public function getLogBatchInbound()
    {
        return $this->container['log_batch_inbound'];
    }

    /**
     * Sets log_batch_inbound
     *
     * @param bool $log_batch_inbound log_batch_inbound
     *
     * @return $this
     */
    public function setLogBatchInbound($log_batch_inbound)
    {
        $this->container['log_batch_inbound'] = $log_batch_inbound;

        return $this;
    }

    /**
     * Gets log_batch_outbound
     *
     * @return bool
     */
    public function getLogBatchOutbound()
    {
        return $this->container['log_batch_outbound'];
    }

    /**
     * Sets log_batch_outbound
     *
     * @param bool $log_batch_outbound log_batch_outbound
     *
     * @return $this
     */
    public function setLogBatchOutbound($log_batch_outbound)
    {
        $this->container['log_batch_outbound'] = $log_batch_outbound;

        return $this;
    }

    /**
     * Gets has_serial_number
     *
     * @return bool
     */
    public function getHasSerialNumber()
    {
        return $this->container['has_serial_number'];
    }

    /**
     * Sets has_serial_number
     *
     * @param bool $has_serial_number has_serial_number
     *
     * @return $this
     */
    public function setHasSerialNumber($has_serial_number)
    {
        $this->container['has_serial_number'] = $has_serial_number;

        return $this;
    }

    /**
     * Gets log_serial_inbound
     *
     * @return bool
     */
    public function getLogSerialInbound()
    {
        return $this->container['log_serial_inbound'];
    }

    /**
     * Sets log_serial_inbound
     *
     * @param bool $log_serial_inbound log_serial_inbound
     *
     * @return $this
     */
    public function setLogSerialInbound($log_serial_inbound)
    {
        $this->container['log_serial_inbound'] = $log_serial_inbound;

        return $this;
    }

    /**
     * Gets log_serial_outbound
     *
     * @return bool
     */
    public function getLogSerialOutbound()
    {
        return $this->container['log_serial_outbound'];
    }

    /**
     * Sets log_serial_outbound
     *
     * @param bool $log_serial_outbound log_serial_outbound
     *
     * @return $this
     */
    public function setLogSerialOutbound($log_serial_outbound)
    {
        $this->container['log_serial_outbound'] = $log_serial_outbound;

        return $this;
    }

    /**
     * Gets has_expiry_date
     *
     * @return bool
     */
    public function getHasExpiryDate()
    {
        return $this->container['has_expiry_date'];
    }

    /**
     * Sets has_expiry_date
     *
     * @param bool $has_expiry_date has_expiry_date
     *
     * @return $this
     */
    public function setHasExpiryDate($has_expiry_date)
    {
        $this->container['has_expiry_date'] = $has_expiry_date;

        return $this;
    }

    /**
     * Gets log_expiry_date_inbound
     *
     * @return bool
     */
    public function getLogExpiryDateInbound()
    {
        return $this->container['log_expiry_date_inbound'];
    }

    /**
     * Sets log_expiry_date_inbound
     *
     * @param bool $log_expiry_date_inbound log_expiry_date_inbound
     *
     * @return $this
     */
    public function setLogExpiryDateInbound($log_expiry_date_inbound)
    {
        $this->container['log_expiry_date_inbound'] = $log_expiry_date_inbound;

        return $this;
    }

    /**
     * Gets log_expiry_date_outbound
     *
     * @return bool
     */
    public function getLogExpiryDateOutbound()
    {
        return $this->container['log_expiry_date_outbound'];
    }

    /**
     * Sets log_expiry_date_outbound
     *
     * @param bool $log_expiry_date_outbound log_expiry_date_outbound
     *
     * @return $this
     */
    public function setLogExpiryDateOutbound($log_expiry_date_outbound)
    {
        $this->container['log_expiry_date_outbound'] = $log_expiry_date_outbound;

        return $this;
    }

    /**
     * Gets best_before_date_warning_period_days
     *
     * @return int
     */
    public function getBestBeforeDateWarningPeriodDays()
    {
        return $this->container['best_before_date_warning_period_days'];
    }

    /**
     * Sets best_before_date_warning_period_days
     *
     * @param int $best_before_date_warning_period_days best_before_date_warning_period_days
     *
     * @return $this
     */
    public function setBestBeforeDateWarningPeriodDays($best_before_date_warning_period_days)
    {

        if (!is_null($best_before_date_warning_period_days) && ($best_before_date_warning_period_days > 365)) {
            throw new \InvalidArgumentException('invalid value for $best_before_date_warning_period_days when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 365.');
        }
        if (!is_null($best_before_date_warning_period_days) && ($best_before_date_warning_period_days < 0)) {
            throw new \InvalidArgumentException('invalid value for $best_before_date_warning_period_days when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['best_before_date_warning_period_days'] = $best_before_date_warning_period_days;

        return $this;
    }

    /**
     * Gets commodity_code
     *
     * @return \Swagger\Client\Model\MintsoftStockCommodityCode
     */
    public function getCommodityCode()
    {
        return $this->container['commodity_code'];
    }

    /**
     * Sets commodity_code
     *
     * @param \Swagger\Client\Model\MintsoftStockCommodityCode $commodity_code commodity_code
     *
     * @return $this
     */
    public function setCommodityCode($commodity_code)
    {
        $this->container['commodity_code'] = $commodity_code;

        return $this;
    }

    /**
     * Gets handling_time
     *
     * @return int
     */
    public function getHandlingTime()
    {
        return $this->container['handling_time'];
    }

    /**
     * Sets handling_time
     *
     * @param int $handling_time handling_time
     *
     * @return $this
     */
    public function setHandlingTime($handling_time)
    {

        if (!is_null($handling_time) && ($handling_time > 365)) {
            throw new \InvalidArgumentException('invalid value for $handling_time when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 365.');
        }
        if (!is_null($handling_time) && ($handling_time < 0)) {
            throw new \InvalidArgumentException('invalid value for $handling_time when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['handling_time'] = $handling_time;

        return $this;
    }

    /**
     * Gets un_number
     *
     * @return string
     */
    public function getUnNumber()
    {
        return $this->container['un_number'];
    }

    /**
     * Sets un_number
     *
     * @param string $un_number un_number
     *
     * @return $this
     */
    public function setUnNumber($un_number)
    {
        if (!is_null($un_number) && (mb_strlen($un_number) > 4)) {
            throw new \InvalidArgumentException('invalid length for $un_number when calling ToolkitDataClassesStockProduct., must be smaller than or equal to 4.');
        }
        if (!is_null($un_number) && (mb_strlen($un_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $un_number when calling ToolkitDataClassesStockProduct., must be bigger than or equal to 0.');
        }

        $this->container['un_number'] = $un_number;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets product_hazardous_goods
     *
     * @return \Swagger\Client\Model\MintsoftStockProductHazardousGoods
     */
    public function getProductHazardousGoods()
    {
        return $this->container['product_hazardous_goods'];
    }

    /**
     * Sets product_hazardous_goods
     *
     * @param \Swagger\Client\Model\MintsoftStockProductHazardousGoods $product_hazardous_goods product_hazardous_goods
     *
     * @return $this
     */
    public function setProductHazardousGoods($product_hazardous_goods)
    {
        $this->container['product_hazardous_goods'] = $product_hazardous_goods;

        return $this;
    }

    /**
     * Gets product_purchasing_settings
     *
     * @return \Swagger\Client\Model\MintsoftStockProductPurchasingSettings
     */
    public function getProductPurchasingSettings()
    {
        return $this->container['product_purchasing_settings'];
    }

    /**
     * Sets product_purchasing_settings
     *
     * @param \Swagger\Client\Model\MintsoftStockProductPurchasingSettings $product_purchasing_settings product_purchasing_settings
     *
     * @return $this
     */
    public function setProductPurchasingSettings($product_purchasing_settings)
    {
        $this->container['product_purchasing_settings'] = $product_purchasing_settings;

        return $this;
    }

    /**
     * Gets product_growth_rates
     *
     * @return \Swagger\Client\Model\MintsoftStockProductGrowthRates[]
     */
    public function getProductGrowthRates()
    {
        return $this->container['product_growth_rates'];
    }

    /**
     * Sets product_growth_rates
     *
     * @param \Swagger\Client\Model\MintsoftStockProductGrowthRates[] $product_growth_rates product_growth_rates
     *
     * @return $this
     */
    public function setProductGrowthRates($product_growth_rates)
    {
        $this->container['product_growth_rates'] = $product_growth_rates;

        return $this;
    }

    /**
     * Gets external_ful_filment_product
     *
     * @return \Swagger\Client\Model\MintsoftStockExternalFulFilmentProduct
     */
    public function getExternalFulFilmentProduct()
    {
        return $this->container['external_ful_filment_product'];
    }

    /**
     * Sets external_ful_filment_product
     *
     * @param \Swagger\Client\Model\MintsoftStockExternalFulFilmentProduct $external_ful_filment_product external_ful_filment_product
     *
     * @return $this
     */
    public function setExternalFulFilmentProduct($external_ful_filment_product)
    {
        $this->container['external_ful_filment_product'] = $external_ful_filment_product;

        return $this;
    }

    /**
     * Gets external_ful_filment_product_inventory
     *
     * @return \Swagger\Client\Model\MintsoftStockExternalFulFilmentProductInventory[]
     */
    public function getExternalFulFilmentProductInventory()
    {
        return $this->container['external_ful_filment_product_inventory'];
    }

    /**
     * Sets external_ful_filment_product_inventory
     *
     * @param \Swagger\Client\Model\MintsoftStockExternalFulFilmentProductInventory[] $external_ful_filment_product_inventory external_ful_filment_product_inventory
     *
     * @return $this
     */
    public function setExternalFulFilmentProductInventory($external_ful_filment_product_inventory)
    {
        $this->container['external_ful_filment_product_inventory'] = $external_ful_filment_product_inventory;

        return $this;
    }

    /**
     * Gets order_items
     *
     * @return \Swagger\Client\Model\MintsoftOrdersOrderItem[]
     */
    public function getOrderItems()
    {
        return $this->container['order_items'];
    }

    /**
     * Sets order_items
     *
     * @param \Swagger\Client\Model\MintsoftOrdersOrderItem[] $order_items order_items
     *
     * @return $this
     */
    public function setOrderItems($order_items)
    {
        $this->container['order_items'] = $order_items;

        return $this;
    }

    /**
     * Gets subscription
     *
     * @return bool
     */
    public function getSubscription()
    {
        return $this->container['subscription'];
    }

    /**
     * Sets subscription
     *
     * @param bool $subscription subscription
     *
     * @return $this
     */
    public function setSubscription($subscription)
    {
        $this->container['subscription'] = $subscription;

        return $this;
    }

    /**
     * Gets subscription_length
     *
     * @return int
     */
    public function getSubscriptionLength()
    {
        return $this->container['subscription_length'];
    }

    /**
     * Sets subscription_length
     *
     * @param int $subscription_length subscription_length
     *
     * @return $this
     */
    public function setSubscriptionLength($subscription_length)
    {
        $this->container['subscription_length'] = $subscription_length;

        return $this;
    }

    /**
     * Gets subscription_frequency
     *
     * @return string
     */
    public function getSubscriptionFrequency()
    {
        return $this->container['subscription_frequency'];
    }

    /**
     * Sets subscription_frequency
     *
     * @param string $subscription_frequency subscription_frequency
     *
     * @return $this
     */
    public function setSubscriptionFrequency($subscription_frequency)
    {
        $this->container['subscription_frequency'] = $subscription_frequency;

        return $this;
    }

    /**
     * Gets product_in_categories
     *
     * @return \Swagger\Client\Model\MintsoftStockProductInCategory[]
     */
    public function getProductInCategories()
    {
        return $this->container['product_in_categories'];
    }

    /**
     * Sets product_in_categories
     *
     * @param \Swagger\Client\Model\MintsoftStockProductInCategory[] $product_in_categories product_in_categories
     *
     * @return $this
     */
    public function setProductInCategories($product_in_categories)
    {
        $this->container['product_in_categories'] = $product_in_categories;

        return $this;
    }

    /**
     * Gets product_prices
     *
     * @return \Swagger\Client\Model\MintsoftStockProductPrice[]
     */
    public function getProductPrices()
    {
        return $this->container['product_prices'];
    }

    /**
     * Sets product_prices
     *
     * @param \Swagger\Client\Model\MintsoftStockProductPrice[] $product_prices product_prices
     *
     * @return $this
     */
    public function setProductPrices($product_prices)
    {
        $this->container['product_prices'] = $product_prices;

        return $this;
    }

    /**
     * Gets product_suppliers
     *
     * @return \Swagger\Client\Model\MintsoftStockProductInSupplier[]
     */
    public function getProductSuppliers()
    {
        return $this->container['product_suppliers'];
    }

    /**
     * Sets product_suppliers
     *
     * @param \Swagger\Client\Model\MintsoftStockProductInSupplier[] $product_suppliers product_suppliers
     *
     * @return $this
     */
    public function setProductSuppliers($product_suppliers)
    {
        $this->container['product_suppliers'] = $product_suppliers;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


