<?php
/**
 * ToolkitDataClassesStockExternalFulFilmentProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesStockExternalFulFilmentProduct Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MintsoftStockExternalFulFilmentProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Stock.ExternalFulFilmentProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'external_fulfiler' => 'string',
        'identifier' => 'string',
        'alt_identifier' => 'string',
        'carton_label_quantity' => 'int',
        'total_quantity' => 'int',
        'quantity_last_updated' => '\DateTime',
        'external_ful_filment_product_inventory' => '\Swagger\Client\Model\MintsoftStockExternalFulFilmentProductInventory[]',
        'product_id' => 'int',
        'product' => '\Swagger\Client\Model\MintsoftStockProduct',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'external_fulfiler' => null,
        'identifier' => null,
        'alt_identifier' => null,
        'carton_label_quantity' => 'int32',
        'total_quantity' => 'int32',
        'quantity_last_updated' => 'date-time',
        'external_ful_filment_product_inventory' => null,
        'product_id' => 'int32',
        'product' => null,
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'external_fulfiler' => 'ExternalFulfiler',
        'identifier' => 'Identifier',
        'alt_identifier' => 'AltIdentifier',
        'carton_label_quantity' => 'CartonLabelQuantity',
        'total_quantity' => 'TotalQuantity',
        'quantity_last_updated' => 'QuantityLastUpdated',
        'external_ful_filment_product_inventory' => 'ExternalFulFilmentProductInventory',
        'product_id' => 'ProductId',
        'product' => 'Product',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'external_fulfiler' => 'setExternalFulfiler',
        'identifier' => 'setIdentifier',
        'alt_identifier' => 'setAltIdentifier',
        'carton_label_quantity' => 'setCartonLabelQuantity',
        'total_quantity' => 'setTotalQuantity',
        'quantity_last_updated' => 'setQuantityLastUpdated',
        'external_ful_filment_product_inventory' => 'setExternalFulFilmentProductInventory',
        'product_id' => 'setProductId',
        'product' => 'setProduct',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'external_fulfiler' => 'getExternalFulfiler',
        'identifier' => 'getIdentifier',
        'alt_identifier' => 'getAltIdentifier',
        'carton_label_quantity' => 'getCartonLabelQuantity',
        'total_quantity' => 'getTotalQuantity',
        'quantity_last_updated' => 'getQuantityLastUpdated',
        'external_ful_filment_product_inventory' => 'getExternalFulFilmentProductInventory',
        'product_id' => 'getProductId',
        'product' => 'getProduct',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['external_fulfiler'] = isset($data['external_fulfiler']) ? $data['external_fulfiler'] : null;
        $this->container['identifier'] = isset($data['identifier']) ? $data['identifier'] : null;
        $this->container['alt_identifier'] = isset($data['alt_identifier']) ? $data['alt_identifier'] : null;
        $this->container['carton_label_quantity'] = isset($data['carton_label_quantity']) ? $data['carton_label_quantity'] : null;
        $this->container['total_quantity'] = isset($data['total_quantity']) ? $data['total_quantity'] : null;
        $this->container['quantity_last_updated'] = isset($data['quantity_last_updated']) ? $data['quantity_last_updated'] : null;
        $this->container['external_ful_filment_product_inventory'] = isset($data['external_ful_filment_product_inventory']) ? $data['external_ful_filment_product_inventory'] : null;
        $this->container['product_id'] = isset($data['product_id']) ? $data['product_id'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['identifier']) && (mb_strlen($this->container['identifier']) < 0)) {
            $invalidProperties[] = "invalid value for 'identifier', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['alt_identifier']) && (mb_strlen($this->container['alt_identifier']) > 50)) {
            $invalidProperties[] = "invalid value for 'alt_identifier', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['alt_identifier']) && (mb_strlen($this->container['alt_identifier']) < 0)) {
            $invalidProperties[] = "invalid value for 'alt_identifier', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets external_fulfiler
     *
     * @return string
     */
    public function getExternalFulfiler()
    {
        return $this->container['external_fulfiler'];
    }

    /**
     * Sets external_fulfiler
     *
     * @param string $external_fulfiler external_fulfiler
     *
     * @return $this
     */
    public function setExternalFulfiler($external_fulfiler)
    {
        $this->container['external_fulfiler'] = $external_fulfiler;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier identifier
     *
     * @return $this
     */
    public function setIdentifier($identifier)
    {
        if (!is_null($identifier) && (mb_strlen($identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling ToolkitDataClassesStockExternalFulFilmentProduct., must be smaller than or equal to 50.');
        }
        if (!is_null($identifier) && (mb_strlen($identifier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $identifier when calling ToolkitDataClassesStockExternalFulFilmentProduct., must be bigger than or equal to 0.');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets alt_identifier
     *
     * @return string
     */
    public function getAltIdentifier()
    {
        return $this->container['alt_identifier'];
    }

    /**
     * Sets alt_identifier
     *
     * @param string $alt_identifier alt_identifier
     *
     * @return $this
     */
    public function setAltIdentifier($alt_identifier)
    {
        if (!is_null($alt_identifier) && (mb_strlen($alt_identifier) > 50)) {
            throw new \InvalidArgumentException('invalid length for $alt_identifier when calling ToolkitDataClassesStockExternalFulFilmentProduct., must be smaller than or equal to 50.');
        }
        if (!is_null($alt_identifier) && (mb_strlen($alt_identifier) < 0)) {
            throw new \InvalidArgumentException('invalid length for $alt_identifier when calling ToolkitDataClassesStockExternalFulFilmentProduct., must be bigger than or equal to 0.');
        }

        $this->container['alt_identifier'] = $alt_identifier;

        return $this;
    }

    /**
     * Gets carton_label_quantity
     *
     * @return int
     */
    public function getCartonLabelQuantity()
    {
        return $this->container['carton_label_quantity'];
    }

    /**
     * Sets carton_label_quantity
     *
     * @param int $carton_label_quantity carton_label_quantity
     *
     * @return $this
     */
    public function setCartonLabelQuantity($carton_label_quantity)
    {
        $this->container['carton_label_quantity'] = $carton_label_quantity;

        return $this;
    }

    /**
     * Gets total_quantity
     *
     * @return int
     */
    public function getTotalQuantity()
    {
        return $this->container['total_quantity'];
    }

    /**
     * Sets total_quantity
     *
     * @param int $total_quantity total_quantity
     *
     * @return $this
     */
    public function setTotalQuantity($total_quantity)
    {
        $this->container['total_quantity'] = $total_quantity;

        return $this;
    }

    /**
     * Gets quantity_last_updated
     *
     * @return \DateTime
     */
    public function getQuantityLastUpdated()
    {
        return $this->container['quantity_last_updated'];
    }

    /**
     * Sets quantity_last_updated
     *
     * @param \DateTime $quantity_last_updated quantity_last_updated
     *
     * @return $this
     */
    public function setQuantityLastUpdated($quantity_last_updated)
    {
        $this->container['quantity_last_updated'] = $quantity_last_updated;

        return $this;
    }

    /**
     * Gets external_ful_filment_product_inventory
     *
     * @return \Swagger\Client\Model\MintsoftStockExternalFulFilmentProductInventory[]
     */
    public function getExternalFulFilmentProductInventory()
    {
        return $this->container['external_ful_filment_product_inventory'];
    }

    /**
     * Sets external_ful_filment_product_inventory
     *
     * @param \Swagger\Client\Model\MintsoftStockExternalFulFilmentProductInventory[] $external_ful_filment_product_inventory external_ful_filment_product_inventory
     *
     * @return $this
     */
    public function setExternalFulFilmentProductInventory($external_ful_filment_product_inventory)
    {
        $this->container['external_ful_filment_product_inventory'] = $external_ful_filment_product_inventory;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return int
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param int $product_id product_id
     *
     * @return $this
     */
    public function setProductId($product_id)
    {
        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Swagger\Client\Model\MintsoftStockProduct
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Swagger\Client\Model\MintsoftStockProduct $product product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     * @throws \JsonException
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR | JSON_PRETTY_PRINT);
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}


