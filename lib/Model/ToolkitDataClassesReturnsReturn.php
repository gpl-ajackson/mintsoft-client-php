<?php
/**
 * ToolkitDataClassesReturnsReturn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ToolkitDataClassesReturnsReturn Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ToolkitDataClassesReturnsReturn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Toolkit.DataClasses.Returns.Return';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_id' => 'int',
        'advanced_external_return' => 'bool',
        'confirmed' => 'bool',
        'exchanged' => 'bool',
        'refunded' => 'bool',
        'exchanged_order_id' => 'int',
        'invoiced' => 'bool',
        'reference' => 'string',
        'return_items' => '\Swagger\Client\Model\ToolkitDataClassesReturnsReturnItem[]',
        'return_name_values' => '\Swagger\Client\Model\ToolkitDataClassesReturnsReturnNameValue[]',
        'order_number' => 'string',
        'client_id' => 'int',
        'id' => 'int',
        'last_updated' => '\DateTime',
        'last_updated_by_user' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_id' => 'int32',
        'advanced_external_return' => null,
        'confirmed' => null,
        'exchanged' => null,
        'refunded' => null,
        'exchanged_order_id' => 'int32',
        'invoiced' => null,
        'reference' => null,
        'return_items' => null,
        'return_name_values' => null,
        'order_number' => null,
        'client_id' => 'int32',
        'id' => 'int32',
        'last_updated' => 'date-time',
        'last_updated_by_user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_id' => 'OrderId',
        'advanced_external_return' => 'AdvancedExternalReturn',
        'confirmed' => 'Confirmed',
        'exchanged' => 'Exchanged',
        'refunded' => 'Refunded',
        'exchanged_order_id' => 'ExchangedOrderId',
        'invoiced' => 'Invoiced',
        'reference' => 'Reference',
        'return_items' => 'ReturnItems',
        'return_name_values' => 'ReturnNameValues',
        'order_number' => 'OrderNumber',
        'client_id' => 'ClientId',
        'id' => 'ID',
        'last_updated' => 'LastUpdated',
        'last_updated_by_user' => 'LastUpdatedByUser'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_id' => 'setOrderId',
        'advanced_external_return' => 'setAdvancedExternalReturn',
        'confirmed' => 'setConfirmed',
        'exchanged' => 'setExchanged',
        'refunded' => 'setRefunded',
        'exchanged_order_id' => 'setExchangedOrderId',
        'invoiced' => 'setInvoiced',
        'reference' => 'setReference',
        'return_items' => 'setReturnItems',
        'return_name_values' => 'setReturnNameValues',
        'order_number' => 'setOrderNumber',
        'client_id' => 'setClientId',
        'id' => 'setId',
        'last_updated' => 'setLastUpdated',
        'last_updated_by_user' => 'setLastUpdatedByUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_id' => 'getOrderId',
        'advanced_external_return' => 'getAdvancedExternalReturn',
        'confirmed' => 'getConfirmed',
        'exchanged' => 'getExchanged',
        'refunded' => 'getRefunded',
        'exchanged_order_id' => 'getExchangedOrderId',
        'invoiced' => 'getInvoiced',
        'reference' => 'getReference',
        'return_items' => 'getReturnItems',
        'return_name_values' => 'getReturnNameValues',
        'order_number' => 'getOrderNumber',
        'client_id' => 'getClientId',
        'id' => 'getId',
        'last_updated' => 'getLastUpdated',
        'last_updated_by_user' => 'getLastUpdatedByUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_id'] = isset($data['order_id']) ? $data['order_id'] : null;
        $this->container['advanced_external_return'] = isset($data['advanced_external_return']) ? $data['advanced_external_return'] : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : null;
        $this->container['exchanged'] = isset($data['exchanged']) ? $data['exchanged'] : null;
        $this->container['refunded'] = isset($data['refunded']) ? $data['refunded'] : null;
        $this->container['exchanged_order_id'] = isset($data['exchanged_order_id']) ? $data['exchanged_order_id'] : null;
        $this->container['invoiced'] = isset($data['invoiced']) ? $data['invoiced'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['return_items'] = isset($data['return_items']) ? $data['return_items'] : null;
        $this->container['return_name_values'] = isset($data['return_name_values']) ? $data['return_name_values'] : null;
        $this->container['order_number'] = isset($data['order_number']) ? $data['order_number'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['last_updated_by_user'] = isset($data['last_updated_by_user']) ? $data['last_updated_by_user'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_id
     *
     * @return int
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param int $order_id order_id
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets advanced_external_return
     *
     * @return bool
     */
    public function getAdvancedExternalReturn()
    {
        return $this->container['advanced_external_return'];
    }

    /**
     * Sets advanced_external_return
     *
     * @param bool $advanced_external_return advanced_external_return
     *
     * @return $this
     */
    public function setAdvancedExternalReturn($advanced_external_return)
    {
        $this->container['advanced_external_return'] = $advanced_external_return;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets exchanged
     *
     * @return bool
     */
    public function getExchanged()
    {
        return $this->container['exchanged'];
    }

    /**
     * Sets exchanged
     *
     * @param bool $exchanged exchanged
     *
     * @return $this
     */
    public function setExchanged($exchanged)
    {
        $this->container['exchanged'] = $exchanged;

        return $this;
    }

    /**
     * Gets refunded
     *
     * @return bool
     */
    public function getRefunded()
    {
        return $this->container['refunded'];
    }

    /**
     * Sets refunded
     *
     * @param bool $refunded refunded
     *
     * @return $this
     */
    public function setRefunded($refunded)
    {
        $this->container['refunded'] = $refunded;

        return $this;
    }

    /**
     * Gets exchanged_order_id
     *
     * @return int
     */
    public function getExchangedOrderId()
    {
        return $this->container['exchanged_order_id'];
    }

    /**
     * Sets exchanged_order_id
     *
     * @param int $exchanged_order_id exchanged_order_id
     *
     * @return $this
     */
    public function setExchangedOrderId($exchanged_order_id)
    {
        $this->container['exchanged_order_id'] = $exchanged_order_id;

        return $this;
    }

    /**
     * Gets invoiced
     *
     * @return bool
     */
    public function getInvoiced()
    {
        return $this->container['invoiced'];
    }

    /**
     * Sets invoiced
     *
     * @param bool $invoiced invoiced
     *
     * @return $this
     */
    public function setInvoiced($invoiced)
    {
        $this->container['invoiced'] = $invoiced;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets return_items
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesReturnsReturnItem[]
     */
    public function getReturnItems()
    {
        return $this->container['return_items'];
    }

    /**
     * Sets return_items
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesReturnsReturnItem[] $return_items return_items
     *
     * @return $this
     */
    public function setReturnItems($return_items)
    {
        $this->container['return_items'] = $return_items;

        return $this;
    }

    /**
     * Gets return_name_values
     *
     * @return \Swagger\Client\Model\ToolkitDataClassesReturnsReturnNameValue[]
     */
    public function getReturnNameValues()
    {
        return $this->container['return_name_values'];
    }

    /**
     * Sets return_name_values
     *
     * @param \Swagger\Client\Model\ToolkitDataClassesReturnsReturnNameValue[] $return_name_values return_name_values
     *
     * @return $this
     */
    public function setReturnNameValues($return_name_values)
    {
        $this->container['return_name_values'] = $return_name_values;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return string
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param string $order_number order_number
     *
     * @return $this
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return int
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param int $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets last_updated_by_user
     *
     * @return string
     */
    public function getLastUpdatedByUser()
    {
        return $this->container['last_updated_by_user'];
    }

    /**
     * Sets last_updated_by_user
     *
     * @param string $last_updated_by_user last_updated_by_user
     *
     * @return $this
     */
    public function setLastUpdatedByUser($last_updated_by_user)
    {
        $this->container['last_updated_by_user'] = $last_updated_by_user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


