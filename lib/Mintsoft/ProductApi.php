<?php
/**
 * ProductApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.47-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Mintsoft;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * ProductApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation productAddAddAlt
     *
     * Add Alt Code
     *
     * @param  int $id Product ID (required)
     * @param  string $sku The Alternative SKU you want to add (required)
     * @param  string $connect_mapping_type The Type e.g. Amazon, Ebay, API etc (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productAddAddAlt($id, $sku, $connect_mapping_type)
    {
        $this->productAddAddAltWithHttpInfo($id, $sku, $connect_mapping_type);
    }

    /**
     * Operation productAddAddAltWithHttpInfo
     *
     * Add Alt Code
     *
     * @param  int $id Product ID (required)
     * @param  string $sku The Alternative SKU you want to add (required)
     * @param  string $connect_mapping_type The Type e.g. Amazon, Ebay, API etc (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productAddAddAltWithHttpInfo($id, $sku, $connect_mapping_type)
    {
        $returnType = '';
        $request = $this->productAddAddAltRequest($id, $sku, $connect_mapping_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productAddAddAltAsync
     *
     * Add Alt Code
     *
     * @param  int $id Product ID (required)
     * @param  string $sku The Alternative SKU you want to add (required)
     * @param  string $connect_mapping_type The Type e.g. Amazon, Ebay, API etc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productAddAddAltAsync($id, $sku, $connect_mapping_type)
    {
        return $this->productAddAddAltAsyncWithHttpInfo($id, $sku, $connect_mapping_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productAddAddAltAsyncWithHttpInfo
     *
     * Add Alt Code
     *
     * @param  int $id Product ID (required)
     * @param  string $sku The Alternative SKU you want to add (required)
     * @param  string $connect_mapping_type The Type e.g. Amazon, Ebay, API etc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productAddAddAltAsyncWithHttpInfo($id, $sku, $connect_mapping_type)
    {
        $returnType = '';
        $request = $this->productAddAddAltRequest($id, $sku, $connect_mapping_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productAddAddAlt'
     *
     * @param  int $id Product ID (required)
     * @param  string $sku The Alternative SKU you want to add (required)
     * @param  string $connect_mapping_type The Type e.g. Amazon, Ebay, API etc (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productAddAddAltRequest($id, $sku, $connect_mapping_type)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productAddAddAlt'
            );
        }
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling productAddAddAlt'
            );
        }
        // verify the required parameter 'connect_mapping_type' is set
        if ($connect_mapping_type === null || (is_array($connect_mapping_type) && count($connect_mapping_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $connect_mapping_type when calling productAddAddAlt'
            );
        }

        $resourcePath = '/api/Product/{id}/AltCodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sku !== null) {
            $queryParams['SKU'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($connect_mapping_type !== null) {
            $queryParams['ConnectMappingType'] = ObjectSerializer::toQueryValue($connect_mapping_type);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productBulkAddCartons
     *
     * Bulk Add Cartons
     *
     * @param  int $id Product ID (required)
     * @param  \Swagger\Client\Model\MintsoftStockProductContainer[] $cartons Array of Cartons for product (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productBulkAddCartons($id, $cartons)
    {
        $this->productBulkAddCartonsWithHttpInfo($id, $cartons);
    }

    /**
     * Operation productBulkAddCartonsWithHttpInfo
     *
     * Bulk Add Cartons
     *
     * @param  int $id Product ID (required)
     * @param  \Swagger\Client\Model\MintsoftStockProductContainer[] $cartons Array of Cartons for product (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productBulkAddCartonsWithHttpInfo($id, $cartons)
    {
        $returnType = '';
        $request = $this->productBulkAddCartonsRequest($id, $cartons);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productBulkAddCartonsAsync
     *
     * Bulk Add Cartons
     *
     * @param  int $id Product ID (required)
     * @param  \Swagger\Client\Model\MintsoftStockProductContainer[] $cartons Array of Cartons for product (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productBulkAddCartonsAsync($id, $cartons)
    {
        return $this->productBulkAddCartonsAsyncWithHttpInfo($id, $cartons)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productBulkAddCartonsAsyncWithHttpInfo
     *
     * Bulk Add Cartons
     *
     * @param  int $id Product ID (required)
     * @param  \Swagger\Client\Model\MintsoftStockProductContainer[] $cartons Array of Cartons for product (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productBulkAddCartonsAsyncWithHttpInfo($id, $cartons)
    {
        $returnType = '';
        $request = $this->productBulkAddCartonsRequest($id, $cartons);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productBulkAddCartons'
     *
     * @param  int $id Product ID (required)
     * @param  \Swagger\Client\Model\MintsoftStockProductContainer[] $cartons Array of Cartons for product (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productBulkAddCartonsRequest($id, $cartons)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productBulkAddCartons'
            );
        }
        // verify the required parameter 'cartons' is set
        if ($cartons === null || (is_array($cartons) && count($cartons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cartons when calling productBulkAddCartons'
            );
        }

        $resourcePath = '/api/Product/{id}/Cartons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($cartons)) {
            $_tempBody = $cartons;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productBulkOnHandStockUpdate
     *
     * Bulk On Hand Stock Update
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBulkOnHandStockUpdate[] $records Update Requests (required)
     * @param  int $client_id Client ID (optional)
     *
     * @return \Swagger\Client\Model\MintsoftProductsAPIBulkStockUpdateResult[]
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productBulkOnHandStockUpdate($records, $client_id = null)
    {
        list($response) = $this->productBulkOnHandStockUpdateWithHttpInfo($records, $client_id);
        return $response;
    }

    /**
     * Operation productBulkOnHandStockUpdateWithHttpInfo
     *
     * Bulk On Hand Stock Update
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBulkOnHandStockUpdate[] $records Update Requests (required)
     * @param  int $client_id Client ID (optional)
     *
     * @return array of \Swagger\Client\Model\MintsoftProductsAPIBulkStockUpdateResult[], HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productBulkOnHandStockUpdateWithHttpInfo($records, $client_id = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftProductsAPIBulkStockUpdateResult[]';
        $request = $this->productBulkOnHandStockUpdateRequest($records, $client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MintsoftProductsAPIBulkStockUpdateResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productBulkOnHandStockUpdateAsync
     *
     * Bulk On Hand Stock Update
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBulkOnHandStockUpdate[] $records Update Requests (required)
     * @param  int $client_id Client ID (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productBulkOnHandStockUpdateAsync($records, $client_id = null)
    {
        return $this->productBulkOnHandStockUpdateAsyncWithHttpInfo($records, $client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productBulkOnHandStockUpdateAsyncWithHttpInfo
     *
     * Bulk On Hand Stock Update
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBulkOnHandStockUpdate[] $records Update Requests (required)
     * @param  int $client_id Client ID (optional)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productBulkOnHandStockUpdateAsyncWithHttpInfo($records, $client_id = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftProductsAPIBulkStockUpdateResult[]';
        $request = $this->productBulkOnHandStockUpdateRequest($records, $client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productBulkOnHandStockUpdate'
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBulkOnHandStockUpdate[] $records Update Requests (required)
     * @param  int $client_id Client ID (optional)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productBulkOnHandStockUpdateRequest($records, $client_id = null)
    {
        // verify the required parameter 'records' is set
        if ($records === null || (is_array($records) && count($records) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $records when calling productBulkOnHandStockUpdate'
            );
        }

        $resourcePath = '/api/Product/BulkOnHandStockUpdate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($client_id !== null) {
            $queryParams['ClientId'] = ObjectSerializer::toQueryValue($client_id);
        }


        // body params
        $_tempBody = null;
        if (isset($records)) {
            $_tempBody = $records;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productCreateBundle
     *
     * Create New Bundle
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBundle $bundle Bundle (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateBundle($bundle)
    {
        $this->productCreateBundleWithHttpInfo($bundle);
    }

    /**
     * Operation productCreateBundleWithHttpInfo
     *
     * Create New Bundle
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBundle $bundle Bundle (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateBundleWithHttpInfo($bundle)
    {
        $returnType = '';
        $request = $this->productCreateBundleRequest($bundle);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productCreateBundleAsync
     *
     * Create New Bundle
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBundle $bundle Bundle (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateBundleAsync($bundle)
    {
        return $this->productCreateBundleAsyncWithHttpInfo($bundle)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productCreateBundleAsyncWithHttpInfo
     *
     * Create New Bundle
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBundle $bundle Bundle (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateBundleAsyncWithHttpInfo($bundle)
    {
        $returnType = '';
        $request = $this->productCreateBundleRequest($bundle);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productCreateBundle'
     *
     * @param  \Swagger\Client\Model\MintsoftStockAPIBundle $bundle Bundle (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productCreateBundleRequest($bundle)
    {
        // verify the required parameter 'bundle' is set
        if ($bundle === null || (is_array($bundle) && count($bundle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bundle when calling productCreateBundle'
            );
        }

        $resourcePath = '/api/Product/Bundle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($bundle)) {
            $_tempBody = $bundle;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productCreateProduct
     *
     * Create New Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product ID (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateProduct($product)
    {
        $this->productCreateProductWithHttpInfo($product);
    }

    /**
     * Operation productCreateProductWithHttpInfo
     *
     * Create New Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product ID (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateProductWithHttpInfo($product)
    {
        $returnType = '';
        $request = $this->productCreateProductRequest($product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productCreateProductAsync
     *
     * Create New Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product ID (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateProductAsync($product)
    {
        return $this->productCreateProductAsyncWithHttpInfo($product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productCreateProductAsyncWithHttpInfo
     *
     * Create New Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product ID (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateProductAsyncWithHttpInfo($product)
    {
        $returnType = '';
        $request = $this->productCreateProductRequest($product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productCreateProduct'
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product ID (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productCreateProductRequest($product)
    {
        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productCreateProduct'
            );
        }

        $resourcePath = '/api/Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productCreateSupplier
     *
     * Create New Product Supplier
     *
     * @param  \Swagger\Client\Model\MintsoftStockProductSupplier $product_supplier ProductSupplier (required)
     *
     * @return \Swagger\Client\Model\MintsoftCommonToolkitResult
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateSupplier($product_supplier)
    {
        list($response) = $this->productCreateSupplierWithHttpInfo($product_supplier);
        return $response;
    }

    /**
     * Operation productCreateSupplierWithHttpInfo
     *
     * Create New Product Supplier
     *
     * @param  \Swagger\Client\Model\MintsoftStockProductSupplier $product_supplier ProductSupplier (required)
     *
     * @return array of \Swagger\Client\Model\MintsoftCommonToolkitResult, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productCreateSupplierWithHttpInfo($product_supplier)
    {
        $returnType = '\Swagger\Client\Model\MintsoftCommonToolkitResult';
        $request = $this->productCreateSupplierRequest($product_supplier);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MintsoftCommonToolkitResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productCreateSupplierAsync
     *
     * Create New Product Supplier
     *
     * @param  \Swagger\Client\Model\MintsoftStockProductSupplier $product_supplier ProductSupplier (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateSupplierAsync($product_supplier)
    {
        return $this->productCreateSupplierAsyncWithHttpInfo($product_supplier)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productCreateSupplierAsyncWithHttpInfo
     *
     * Create New Product Supplier
     *
     * @param  \Swagger\Client\Model\MintsoftStockProductSupplier $product_supplier ProductSupplier (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productCreateSupplierAsyncWithHttpInfo($product_supplier)
    {
        $returnType = '\Swagger\Client\Model\MintsoftCommonToolkitResult';
        $request = $this->productCreateSupplierRequest($product_supplier);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productCreateSupplier'
     *
     * @param  \Swagger\Client\Model\MintsoftStockProductSupplier $product_supplier ProductSupplier (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productCreateSupplierRequest($product_supplier)
    {
        // verify the required parameter 'product_supplier' is set
        if ($product_supplier === null || (is_array($product_supplier) && count($product_supplier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product_supplier when calling productCreateSupplier'
            );
        }

        $resourcePath = '/api/Product/Suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($product_supplier)) {
            $_tempBody = $product_supplier;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productDeleteCarton
     *
     * Delete Carton
     *
     * @param  int $id Product ID (required)
     * @param  int $carton_id ID of Carton to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productDeleteCarton($id, $carton_id)
    {
        $this->productDeleteCartonWithHttpInfo($id, $carton_id);
    }

    /**
     * Operation productDeleteCartonWithHttpInfo
     *
     * Delete Carton
     *
     * @param  int $id Product ID (required)
     * @param  int $carton_id ID of Carton to delete (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productDeleteCartonWithHttpInfo($id, $carton_id)
    {
        $returnType = '';
        $request = $this->productDeleteCartonRequest($id, $carton_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productDeleteCartonAsync
     *
     * Delete Carton
     *
     * @param  int $id Product ID (required)
     * @param  int $carton_id ID of Carton to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteCartonAsync($id, $carton_id)
    {
        return $this->productDeleteCartonAsyncWithHttpInfo($id, $carton_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productDeleteCartonAsyncWithHttpInfo
     *
     * Delete Carton
     *
     * @param  int $id Product ID (required)
     * @param  int $carton_id ID of Carton to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteCartonAsyncWithHttpInfo($id, $carton_id)
    {
        $returnType = '';
        $request = $this->productDeleteCartonRequest($id, $carton_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productDeleteCarton'
     *
     * @param  int $id Product ID (required)
     * @param  int $carton_id ID of Carton to delete (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productDeleteCartonRequest($id, $carton_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productDeleteCarton'
            );
        }
        // verify the required parameter 'carton_id' is set
        if ($carton_id === null || (is_array($carton_id) && count($carton_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carton_id when calling productDeleteCarton'
            );
        }

        $resourcePath = '/api/Product/{id}/Carton/{cartonId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($carton_id !== null) {
            $resourcePath = str_replace(
                '{' . 'cartonId' . '}',
                ObjectSerializer::toPathValue($carton_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productDeleteProduct
     *
     * Delete a Product
     *
     * @param  int $id Product Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productDeleteProduct($id)
    {
        $this->productDeleteProductWithHttpInfo($id);
    }

    /**
     * Operation productDeleteProductWithHttpInfo
     *
     * Delete a Product
     *
     * @param  int $id Product Id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productDeleteProductWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productDeleteProductRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productDeleteProductAsync
     *
     * Delete a Product
     *
     * @param  int $id Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteProductAsync($id)
    {
        return $this->productDeleteProductAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productDeleteProductAsyncWithHttpInfo
     *
     * Delete a Product
     *
     * @param  int $id Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productDeleteProductAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productDeleteProductRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productDeleteProduct'
     *
     * @param  int $id Product Id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productDeleteProductRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productDeleteProduct'
            );
        }

        $resourcePath = '/api/Product/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productDeleteProductPrices
     *
     * Delete Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Product Prices (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productDeleteProductPrices($prices)
    {
        $this->productDeleteProductPricesWithHttpInfo($prices);
    }

    /**
     * Operation productDeleteProductPricesWithHttpInfo
     *
     * Delete Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Product Prices (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productDeleteProductPricesWithHttpInfo($prices)
    {
        $returnType = '';
        $request = $this->productDeleteProductPricesRequest($prices);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productDeleteProductPricesAsync
     *
     * Delete Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Product Prices (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productDeleteProductPricesAsync($prices)
    {
        return $this->productDeleteProductPricesAsyncWithHttpInfo($prices)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productDeleteProductPricesAsyncWithHttpInfo
     *
     * Delete Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Product Prices (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productDeleteProductPricesAsyncWithHttpInfo($prices)
    {
        $returnType = '';
        $request = $this->productDeleteProductPricesRequest($prices);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productDeleteProductPrices'
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Product Prices (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productDeleteProductPricesRequest($prices)
    {
        // verify the required parameter 'prices' is set
        if ($prices === null || (is_array($prices) && count($prices) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prices when calling productDeleteProductPrices'
            );
        }

        $resourcePath = '/api/Product/ProductPrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prices)) {
            $_tempBody = $prices;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGet
     *
     * Get Product
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGet($id)
    {
        $this->productGetWithHttpInfo($id);
    }

    /**
     * Operation productGetWithHttpInfo
     *
     * Get Product
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetAsync
     *
     * Get Product
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsync($id)
    {
        return $this->productGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetAsyncWithHttpInfo
     *
     * Get Product
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGet'
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGet'
            );
        }

        $resourcePath = '/api/Product/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetAltCodes
     *
     * Get Alt Codes
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetAltCodes($id)
    {
        $this->productGetAltCodesWithHttpInfo($id);
    }

    /**
     * Operation productGetAltCodesWithHttpInfo
     *
     * Get Alt Codes
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetAltCodesWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetAltCodesRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetAltCodesAsync
     *
     * Get Alt Codes
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAltCodesAsync($id)
    {
        return $this->productGetAltCodesAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetAltCodesAsyncWithHttpInfo
     *
     * Get Alt Codes
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetAltCodesAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetAltCodesRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetAltCodes'
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetAltCodesRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetAltCodes'
            );
        }

        $resourcePath = '/api/Product/{id}/AltCodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetBundle
     *
     * Get Bundle
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetBundle($id)
    {
        $this->productGetBundleWithHttpInfo($id);
    }

    /**
     * Operation productGetBundleWithHttpInfo
     *
     * Get Bundle
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetBundleWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetBundleRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetBundleAsync
     *
     * Get Bundle
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetBundleAsync($id)
    {
        return $this->productGetBundleAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetBundleAsyncWithHttpInfo
     *
     * Get Bundle
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetBundleAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetBundleRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetBundle'
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetBundleRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetBundle'
            );
        }

        $resourcePath = '/api/Product/{id}/Bundle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetCartons
     *
     * Get Cartons
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetCartons($id)
    {
        $this->productGetCartonsWithHttpInfo($id);
    }

    /**
     * Operation productGetCartonsWithHttpInfo
     *
     * Get Cartons
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetCartonsWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetCartonsRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetCartonsAsync
     *
     * Get Cartons
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetCartonsAsync($id)
    {
        return $this->productGetCartonsAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetCartonsAsyncWithHttpInfo
     *
     * Get Cartons
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetCartonsAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetCartonsRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetCartons'
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetCartonsRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetCartons'
            );
        }

        $resourcePath = '/api/Product/{id}/Cartons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetInventory
     *
     * Get Inventory Records
     *
     * @param  int $id Product ID (required)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetInventory($id, $breakdown = null)
    {
        $this->productGetInventoryWithHttpInfo($id, $breakdown);
    }

    /**
     * Operation productGetInventoryWithHttpInfo
     *
     * Get Inventory Records
     *
     * @param  int $id Product ID (required)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetInventoryWithHttpInfo($id, $breakdown = null)
    {
        $returnType = '';
        $request = $this->productGetInventoryRequest($id, $breakdown);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetInventoryAsync
     *
     * Get Inventory Records
     *
     * @param  int $id Product ID (required)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryAsync($id, $breakdown = null)
    {
        return $this->productGetInventoryAsyncWithHttpInfo($id, $breakdown)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetInventoryAsyncWithHttpInfo
     *
     * Get Inventory Records
     *
     * @param  int $id Product ID (required)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryAsyncWithHttpInfo($id, $breakdown = null)
    {
        $returnType = '';
        $request = $this->productGetInventoryRequest($id, $breakdown);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetInventory'
     *
     * @param  int $id Product ID (required)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetInventoryRequest($id, $breakdown = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetInventory'
            );
        }

        $resourcePath = '/api/Product/{id}/Inventory';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($breakdown !== null) {
            $queryParams['breakdown'] = ObjectSerializer::toQueryValue($breakdown);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetInventoryPreOrderBreakdown
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and WarehouseId
     *
     * @param  int $id Product ID (required)
     * @param  int $warehouse_id WarehouseId ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetInventoryPreOrderBreakdown($id, $warehouse_id)
    {
        $this->productGetInventoryPreOrderBreakdownWithHttpInfo($id, $warehouse_id);
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownWithHttpInfo
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and WarehouseId
     *
     * @param  int $id Product ID (required)
     * @param  int $warehouse_id WarehouseId ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetInventoryPreOrderBreakdownWithHttpInfo($id, $warehouse_id)
    {
        $returnType = '';
        $request = $this->productGetInventoryPreOrderBreakdownRequest($id, $warehouse_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAsync
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and WarehouseId
     *
     * @param  int $id Product ID (required)
     * @param  int $warehouse_id WarehouseId ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryPreOrderBreakdownAsync($id, $warehouse_id)
    {
        return $this->productGetInventoryPreOrderBreakdownAsyncWithHttpInfo($id, $warehouse_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAsyncWithHttpInfo
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and WarehouseId
     *
     * @param  int $id Product ID (required)
     * @param  int $warehouse_id WarehouseId ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryPreOrderBreakdownAsyncWithHttpInfo($id, $warehouse_id)
    {
        $returnType = '';
        $request = $this->productGetInventoryPreOrderBreakdownRequest($id, $warehouse_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetInventoryPreOrderBreakdown'
     *
     * @param  int $id Product ID (required)
     * @param  int $warehouse_id WarehouseId ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetInventoryPreOrderBreakdownRequest($id, $warehouse_id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetInventoryPreOrderBreakdown'
            );
        }
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling productGetInventoryPreOrderBreakdown'
            );
        }

        $resourcePath = '/api/Product/{id}/Inventory/PreOrderBreakdown';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_id !== null) {
            $queryParams['WarehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAllWarehouses
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and All Warehouses
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetInventoryPreOrderBreakdownAllWarehouses($id)
    {
        $this->productGetInventoryPreOrderBreakdownAllWarehousesWithHttpInfo($id);
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAllWarehousesWithHttpInfo
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and All Warehouses
     *
     * @param  int $id Product ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetInventoryPreOrderBreakdownAllWarehousesWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetInventoryPreOrderBreakdownAllWarehousesRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAllWarehousesAsync
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and All Warehouses
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryPreOrderBreakdownAllWarehousesAsync($id)
    {
        return $this->productGetInventoryPreOrderBreakdownAllWarehousesAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetInventoryPreOrderBreakdownAllWarehousesAsyncWithHttpInfo
     *
     * Get an Inventory Pre Order Breakdown for a specified Product and All Warehouses
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetInventoryPreOrderBreakdownAllWarehousesAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->productGetInventoryPreOrderBreakdownAllWarehousesRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetInventoryPreOrderBreakdownAllWarehouses'
     *
     * @param  int $id Product ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetInventoryPreOrderBreakdownAllWarehousesRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetInventoryPreOrderBreakdownAllWarehouses'
            );
        }

        $resourcePath = '/api/Product/{id}/Inventory/PreOrderBreakdown/All';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetProductChanges
     *
     * Products Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetProductChanges($from_date)
    {
        $this->productGetProductChangesWithHttpInfo($from_date);
    }

    /**
     * Operation productGetProductChangesWithHttpInfo
     *
     * Products Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetProductChangesWithHttpInfo($from_date)
    {
        $returnType = '';
        $request = $this->productGetProductChangesRequest($from_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetProductChangesAsync
     *
     * Products Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetProductChangesAsync($from_date)
    {
        return $this->productGetProductChangesAsyncWithHttpInfo($from_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetProductChangesAsyncWithHttpInfo
     *
     * Products Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetProductChangesAsyncWithHttpInfo($from_date)
    {
        $returnType = '';
        $request = $this->productGetProductChangesRequest($from_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetProductChanges'
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetProductChangesRequest($from_date)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling productGetProductChanges'
            );
        }

        $resourcePath = '/api/Product/UpdatedSince';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['FromDate'] = ObjectSerializer::toQueryValue($from_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetStockFlow
     *
     * Get Stock Flow Records
     *
     * @param  int $id Product ID (required)
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetStockFlow($id, $from_date, $to_date, $include_details = null)
    {
        $this->productGetStockFlowWithHttpInfo($id, $from_date, $to_date, $include_details);
    }

    /**
     * Operation productGetStockFlowWithHttpInfo
     *
     * Get Stock Flow Records
     *
     * @param  int $id Product ID (required)
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetStockFlowWithHttpInfo($id, $from_date, $to_date, $include_details = null)
    {
        $returnType = '';
        $request = $this->productGetStockFlowRequest($id, $from_date, $to_date, $include_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetStockFlowAsync
     *
     * Get Stock Flow Records
     *
     * @param  int $id Product ID (required)
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockFlowAsync($id, $from_date, $to_date, $include_details = null)
    {
        return $this->productGetStockFlowAsyncWithHttpInfo($id, $from_date, $to_date, $include_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetStockFlowAsyncWithHttpInfo
     *
     * Get Stock Flow Records
     *
     * @param  int $id Product ID (required)
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockFlowAsyncWithHttpInfo($id, $from_date, $to_date, $include_details = null)
    {
        $returnType = '';
        $request = $this->productGetStockFlowRequest($id, $from_date, $to_date, $include_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetStockFlow'
     *
     * @param  int $id Product ID (required)
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetStockFlowRequest($id, $from_date, $to_date, $include_details = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetStockFlow'
            );
        }
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling productGetStockFlow'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling productGetStockFlow'
            );
        }

        $resourcePath = '/api/Product/{id}/StockFlow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['FromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['ToDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($include_details !== null) {
            $queryParams['IncludeDetails'] = ObjectSerializer::toQueryValue($include_details);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetStockFlowFiltered
     *
     * Get Stock Flow Records - Filtered
     *
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  int $id Product ID - Can be 0 if Supplying SKU (required)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  int $warehouse_id WarehouseId e.g. 3 (optional)
     * @param  string $types Types of Flows to show e.g. ALL,IN, OUT, ALLOCATE, UNALLOCATE,TRANSFER, SCRAP - Multiple can be ; list e.g. IN;OUT (optional)
     * @param  bool $include_orders Include Flows that relate to Orders (optional)
     * @param  bool $include_returns Include Flows that relate to Returns (optional)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetStockFlowFiltered($from_date, $to_date, $id, $sku = null, $warehouse_id = null, $types = null, $include_orders = null, $include_returns = null, $include_details = null)
    {
        $this->productGetStockFlowFilteredWithHttpInfo($from_date, $to_date, $id, $sku, $warehouse_id, $types, $include_orders, $include_returns, $include_details);
    }

    /**
     * Operation productGetStockFlowFilteredWithHttpInfo
     *
     * Get Stock Flow Records - Filtered
     *
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  int $id Product ID - Can be 0 if Supplying SKU (required)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  int $warehouse_id WarehouseId e.g. 3 (optional)
     * @param  string $types Types of Flows to show e.g. ALL,IN, OUT, ALLOCATE, UNALLOCATE,TRANSFER, SCRAP - Multiple can be ; list e.g. IN;OUT (optional)
     * @param  bool $include_orders Include Flows that relate to Orders (optional)
     * @param  bool $include_returns Include Flows that relate to Returns (optional)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetStockFlowFilteredWithHttpInfo($from_date, $to_date, $id, $sku = null, $warehouse_id = null, $types = null, $include_orders = null, $include_returns = null, $include_details = null)
    {
        $returnType = '';
        $request = $this->productGetStockFlowFilteredRequest($from_date, $to_date, $id, $sku, $warehouse_id, $types, $include_orders, $include_returns, $include_details);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetStockFlowFilteredAsync
     *
     * Get Stock Flow Records - Filtered
     *
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  int $id Product ID - Can be 0 if Supplying SKU (required)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  int $warehouse_id WarehouseId e.g. 3 (optional)
     * @param  string $types Types of Flows to show e.g. ALL,IN, OUT, ALLOCATE, UNALLOCATE,TRANSFER, SCRAP - Multiple can be ; list e.g. IN;OUT (optional)
     * @param  bool $include_orders Include Flows that relate to Orders (optional)
     * @param  bool $include_returns Include Flows that relate to Returns (optional)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockFlowFilteredAsync($from_date, $to_date, $id, $sku = null, $warehouse_id = null, $types = null, $include_orders = null, $include_returns = null, $include_details = null)
    {
        return $this->productGetStockFlowFilteredAsyncWithHttpInfo($from_date, $to_date, $id, $sku, $warehouse_id, $types, $include_orders, $include_returns, $include_details)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetStockFlowFilteredAsyncWithHttpInfo
     *
     * Get Stock Flow Records - Filtered
     *
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  int $id Product ID - Can be 0 if Supplying SKU (required)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  int $warehouse_id WarehouseId e.g. 3 (optional)
     * @param  string $types Types of Flows to show e.g. ALL,IN, OUT, ALLOCATE, UNALLOCATE,TRANSFER, SCRAP - Multiple can be ; list e.g. IN;OUT (optional)
     * @param  bool $include_orders Include Flows that relate to Orders (optional)
     * @param  bool $include_returns Include Flows that relate to Returns (optional)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockFlowFilteredAsyncWithHttpInfo($from_date, $to_date, $id, $sku = null, $warehouse_id = null, $types = null, $include_orders = null, $include_returns = null, $include_details = null)
    {
        $returnType = '';
        $request = $this->productGetStockFlowFilteredRequest($from_date, $to_date, $id, $sku, $warehouse_id, $types, $include_orders, $include_returns, $include_details);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetStockFlowFiltered'
     *
     * @param  \DateTime $from_date From Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  \DateTime $to_date To Date e.g. 2011-10-05T22:26:12-04:00 (required)
     * @param  int $id Product ID - Can be 0 if Supplying SKU (required)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  int $warehouse_id WarehouseId e.g. 3 (optional)
     * @param  string $types Types of Flows to show e.g. ALL,IN, OUT, ALLOCATE, UNALLOCATE,TRANSFER, SCRAP - Multiple can be ; list e.g. IN;OUT (optional)
     * @param  bool $include_orders Include Flows that relate to Orders (optional)
     * @param  bool $include_returns Include Flows that relate to Returns (optional)
     * @param  bool $include_details Include StockFlowDetails (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetStockFlowFilteredRequest($from_date, $to_date, $id, $sku = null, $warehouse_id = null, $types = null, $include_orders = null, $include_returns = null, $include_details = null)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling productGetStockFlowFiltered'
            );
        }
        // verify the required parameter 'to_date' is set
        if ($to_date === null || (is_array($to_date) && count($to_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to_date when calling productGetStockFlowFiltered'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling productGetStockFlowFiltered'
            );
        }

        $resourcePath = '/api/Product/{id}/StockFlow/Filtered';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['FromDate'] = ObjectSerializer::toQueryValue($from_date);
        }
        // query params
        if ($to_date !== null) {
            $queryParams['ToDate'] = ObjectSerializer::toQueryValue($to_date);
        }
        // query params
        if ($sku !== null) {
            $queryParams['SKU'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($warehouse_id !== null) {
            $queryParams['WarehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($types !== null) {
            $queryParams['Types'] = ObjectSerializer::toQueryValue($types);
        }
        // query params
        if ($include_orders !== null) {
            $queryParams['IncludeOrders'] = ObjectSerializer::toQueryValue($include_orders);
        }
        // query params
        if ($include_returns !== null) {
            $queryParams['IncludeReturns'] = ObjectSerializer::toQueryValue($include_returns);
        }
        // query params
        if ($include_details !== null) {
            $queryParams['IncludeDetails'] = ObjectSerializer::toQueryValue($include_details);
        }

        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetStockLevels
     *
     * Get Stock Levels
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3, 0 for all warehouses together, blank for all warehouses one by one) (optional)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     * @param  int $product_id Product Id - Optional. (optional)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  bool $include_subclients Include results for sub clients if user is master client (this feature is currently disabled for most users) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetStockLevels($warehouse_id = null, $breakdown = null, $product_id = null, $sku = null, $include_subclients = null)
    {
        $this->productGetStockLevelsWithHttpInfo($warehouse_id, $breakdown, $product_id, $sku, $include_subclients);
    }

    /**
     * Operation productGetStockLevelsWithHttpInfo
     *
     * Get Stock Levels
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3, 0 for all warehouses together, blank for all warehouses one by one) (optional)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     * @param  int $product_id Product Id - Optional. (optional)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  bool $include_subclients Include results for sub clients if user is master client (this feature is currently disabled for most users) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetStockLevelsWithHttpInfo($warehouse_id = null, $breakdown = null, $product_id = null, $sku = null, $include_subclients = null)
    {
        $returnType = '';
        $request = $this->productGetStockLevelsRequest($warehouse_id, $breakdown, $product_id, $sku, $include_subclients);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetStockLevelsAsync
     *
     * Get Stock Levels
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3, 0 for all warehouses together, blank for all warehouses one by one) (optional)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     * @param  int $product_id Product Id - Optional. (optional)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  bool $include_subclients Include results for sub clients if user is master client (this feature is currently disabled for most users) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockLevelsAsync($warehouse_id = null, $breakdown = null, $product_id = null, $sku = null, $include_subclients = null)
    {
        return $this->productGetStockLevelsAsyncWithHttpInfo($warehouse_id, $breakdown, $product_id, $sku, $include_subclients)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetStockLevelsAsyncWithHttpInfo
     *
     * Get Stock Levels
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3, 0 for all warehouses together, blank for all warehouses one by one) (optional)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     * @param  int $product_id Product Id - Optional. (optional)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  bool $include_subclients Include results for sub clients if user is master client (this feature is currently disabled for most users) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockLevelsAsyncWithHttpInfo($warehouse_id = null, $breakdown = null, $product_id = null, $sku = null, $include_subclients = null)
    {
        $returnType = '';
        $request = $this->productGetStockLevelsRequest($warehouse_id, $breakdown, $product_id, $sku, $include_subclients);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetStockLevels'
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3, 0 for all warehouses together, blank for all warehouses one by one) (optional)
     * @param  bool $breakdown Include a Breakdown of that StockHolding by Batch, Serial, BestBefore etc (optional)
     * @param  int $product_id Product Id - Optional. (optional)
     * @param  string $sku Product SKU - Optional (optional)
     * @param  bool $include_subclients Include results for sub clients if user is master client (this feature is currently disabled for most users) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetStockLevelsRequest($warehouse_id = null, $breakdown = null, $product_id = null, $sku = null, $include_subclients = null)
    {

        $resourcePath = '/api/Product/StockLevels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_id !== null) {
            $queryParams['WarehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($breakdown !== null) {
            $queryParams['Breakdown'] = ObjectSerializer::toQueryValue($breakdown);
        }
        // query params
        if ($product_id !== null) {
            $queryParams['ProductId'] = ObjectSerializer::toQueryValue($product_id);
        }
        // query params
        if ($sku !== null) {
            $queryParams['SKU'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($include_subclients !== null) {
            $queryParams['IncludeSubclients'] = ObjectSerializer::toQueryValue($include_subclients);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productGetStockLevelsUpdatedSince
     *
     * Products StockLevels Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productGetStockLevelsUpdatedSince($from_date)
    {
        $this->productGetStockLevelsUpdatedSinceWithHttpInfo($from_date);
    }

    /**
     * Operation productGetStockLevelsUpdatedSinceWithHttpInfo
     *
     * Products StockLevels Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productGetStockLevelsUpdatedSinceWithHttpInfo($from_date)
    {
        $returnType = '';
        $request = $this->productGetStockLevelsUpdatedSinceRequest($from_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productGetStockLevelsUpdatedSinceAsync
     *
     * Products StockLevels Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockLevelsUpdatedSinceAsync($from_date)
    {
        return $this->productGetStockLevelsUpdatedSinceAsyncWithHttpInfo($from_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productGetStockLevelsUpdatedSinceAsyncWithHttpInfo
     *
     * Products StockLevels Updated Since
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productGetStockLevelsUpdatedSinceAsyncWithHttpInfo($from_date)
    {
        $returnType = '';
        $request = $this->productGetStockLevelsUpdatedSinceRequest($from_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productGetStockLevelsUpdatedSince'
     *
     * @param  \DateTime $from_date The Date (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productGetStockLevelsUpdatedSinceRequest($from_date)
    {
        // verify the required parameter 'from_date' is set
        if ($from_date === null || (is_array($from_date) && count($from_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from_date when calling productGetStockLevelsUpdatedSince'
            );
        }

        $resourcePath = '/api/Product/StockLevels/UpdatedSince';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['FromDate'] = ObjectSerializer::toQueryValue($from_date);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productListProducts
     *
     * @param  int $page_no page_no (optional)
     * @param  int $limit limit (optional)
     * @param  int $client_id client_id (optional)
     * @param  \DateTime $since_last_updated since_last_updated (optional)
     *
     * @return \Swagger\Client\Model\MintsoftStockProduct[]
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productListProducts($page_no = null, $limit = null, $client_id = null, $since_last_updated = null)
    {
        list($response) = $this->productListProductsWithHttpInfo($page_no, $limit, $client_id, $since_last_updated);
        return $response;
    }

    /**
     * Operation productListProductsWithHttpInfo
     *
     * @param  int $page_no (optional)
     * @param  int $limit (optional)
     * @param  int $client_id (optional)
     * @param  \DateTime $since_last_updated (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MintsoftStockProduct[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productListProductsWithHttpInfo($page_no = null, $limit = null, $client_id = null, $since_last_updated = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftStockProduct[]';
        $request = $this->productListProductsRequest($page_no, $limit, $client_id, $since_last_updated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MintsoftStockProduct[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productListProductsAsync
     *
     * 
     *
     * @param  int $page_no (optional)
     * @param  int $limit (optional)
     * @param  int $client_id (optional)
     * @param  \DateTime $since_last_updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productListProductsAsync($page_no = null, $limit = null, $client_id = null, $since_last_updated = null)
    {
        return $this->productListProductsAsyncWithHttpInfo($page_no, $limit, $client_id, $since_last_updated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productListProductsAsyncWithHttpInfo
     *
     * 
     *
     * @param  int $page_no (optional)
     * @param  int $limit (optional)
     * @param  int $client_id (optional)
     * @param  \DateTime $since_last_updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productListProductsAsyncWithHttpInfo($page_no = null, $limit = null, $client_id = null, $since_last_updated = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftStockProduct[]';
        $request = $this->productListProductsRequest($page_no, $limit, $client_id, $since_last_updated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productListProducts'
     *
     * @param  int $page_no (optional)
     * @param  int $limit (optional)
     * @param  int $client_id (optional)
     * @param  \DateTime $since_last_updated (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productListProductsRequest($page_no = null, $limit = null, $client_id = null, $since_last_updated = null)
    {

        $resourcePath = '/api/Product/List';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_no !== null) {
            $queryParams['PageNo'] = ObjectSerializer::toQueryValue($page_no);
        }
        // query params
        if ($limit !== null) {
            $queryParams['Limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['ClientId'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($since_last_updated !== null) {
            $queryParams['SinceLastUpdated'] = ObjectSerializer::toQueryValue($since_last_updated);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productListSuppliers
     *
     * List Product Suppliers
     *
     * @param  int $client_id Filter by Client Id - Admin User Only (optional)
     * @param  int $page_no Page No - Default 1 (optional)
     * @param  int $limit Number of Results to Return - Default 100 - Max 100 (optional)
     *
     * @return \Swagger\Client\Model\MintsoftStockProductSupplier[]
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productListSuppliers($client_id = null, $page_no = null, $limit = null)
    {
        list($response) = $this->productListSuppliersWithHttpInfo($client_id, $page_no, $limit);
        return $response;
    }

    /**
     * Operation productListSuppliersWithHttpInfo
     *
     * List Product Suppliers
     *
     * @param  int $client_id Filter by Client Id - Admin User Only (optional)
     * @param  int $page_no Page No - Default 1 (optional)
     * @param  int $limit Number of Results to Return - Default 100 - Max 100 (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\MintsoftStockProductSupplier[], HTTP status code, HTTP response headers (array of strings)
     */
    public function productListSuppliersWithHttpInfo($client_id = null, $page_no = null, $limit = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftStockProductSupplier[]';
        $request = $this->productListSuppliersRequest($client_id, $page_no, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\MintsoftStockProductSupplier[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation productListSuppliersAsync
     *
     * List Product Suppliers
     *
     * @param  int $client_id Filter by Client Id - Admin User Only (optional)
     * @param  int $page_no Page No - Default 1 (optional)
     * @param  int $limit Number of Results to Return - Default 100 - Max 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productListSuppliersAsync($client_id = null, $page_no = null, $limit = null)
    {
        return $this->productListSuppliersAsyncWithHttpInfo($client_id, $page_no, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productListSuppliersAsyncWithHttpInfo
     *
     * List Product Suppliers
     *
     * @param  int $client_id Filter by Client Id - Admin User Only (optional)
     * @param  int $page_no Page No - Default 1 (optional)
     * @param  int $limit Number of Results to Return - Default 100 - Max 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productListSuppliersAsyncWithHttpInfo($client_id = null, $page_no = null, $limit = null)
    {
        $returnType = '\Swagger\Client\Model\MintsoftStockProductSupplier[]';
        $request = $this->productListSuppliersRequest($client_id, $page_no, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productListSuppliers'
     *
     * @param  int $client_id Filter by Client Id - Admin User Only (optional)
     * @param  int $page_no Page No - Default 1 (optional)
     * @param  int $limit Number of Results to Return - Default 100 - Max 100 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productListSuppliersRequest($client_id = null, $page_no = null, $limit = null)
    {

        $resourcePath = '/api/Product/Suppliers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($client_id !== null) {
            $queryParams['ClientId'] = ObjectSerializer::toQueryValue($client_id);
        }
        // query params
        if ($page_no !== null) {
            $queryParams['PageNo'] = ObjectSerializer::toQueryValue($page_no);
        }
        // query params
        if ($limit !== null) {
            $queryParams['Limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productLookupProductId
     *
     * Lookup Product Id
     *
     * @param  string $sku SKU to search (required)
     * @param  string $connect_mapping_type Can be left blank if not searching Alt SKUs. e.g. Amazon, Ebay etc (optional)
     * @param  int $client_id Default 0 - Only needs to be supplied by Admin or Client Master Users (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productLookupProductId($sku, $connect_mapping_type = null, $client_id = null)
    {
        $this->productLookupProductIdWithHttpInfo($sku, $connect_mapping_type, $client_id);
    }

    /**
     * Operation productLookupProductIdWithHttpInfo
     *
     * Lookup Product Id
     *
     * @param  string $sku SKU to search (required)
     * @param  string $connect_mapping_type Can be left blank if not searching Alt SKUs. e.g. Amazon, Ebay etc (optional)
     * @param  int $client_id Default 0 - Only needs to be supplied by Admin or Client Master Users (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productLookupProductIdWithHttpInfo($sku, $connect_mapping_type = null, $client_id = null)
    {
        $returnType = '';
        $request = $this->productLookupProductIdRequest($sku, $connect_mapping_type, $client_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productLookupProductIdAsync
     *
     * Lookup Product Id
     *
     * @param  string $sku SKU to search (required)
     * @param  string $connect_mapping_type Can be left blank if not searching Alt SKUs. e.g. Amazon, Ebay etc (optional)
     * @param  int $client_id Default 0 - Only needs to be supplied by Admin or Client Master Users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productLookupProductIdAsync($sku, $connect_mapping_type = null, $client_id = null)
    {
        return $this->productLookupProductIdAsyncWithHttpInfo($sku, $connect_mapping_type, $client_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productLookupProductIdAsyncWithHttpInfo
     *
     * Lookup Product Id
     *
     * @param  string $sku SKU to search (required)
     * @param  string $connect_mapping_type Can be left blank if not searching Alt SKUs. e.g. Amazon, Ebay etc (optional)
     * @param  int $client_id Default 0 - Only needs to be supplied by Admin or Client Master Users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productLookupProductIdAsyncWithHttpInfo($sku, $connect_mapping_type = null, $client_id = null)
    {
        $returnType = '';
        $request = $this->productLookupProductIdRequest($sku, $connect_mapping_type, $client_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productLookupProductId'
     *
     * @param  string $sku SKU to search (required)
     * @param  string $connect_mapping_type Can be left blank if not searching Alt SKUs. e.g. Amazon, Ebay etc (optional)
     * @param  int $client_id Default 0 - Only needs to be supplied by Admin or Client Master Users (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productLookupProductIdRequest($sku, $connect_mapping_type = null, $client_id = null)
    {
        // verify the required parameter 'sku' is set
        if ($sku === null || (is_array($sku) && count($sku) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sku when calling productLookupProductId'
            );
        }

        $resourcePath = '/api/Product/LookupProductId';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sku !== null) {
            $queryParams['SKU'] = ObjectSerializer::toQueryValue($sku);
        }
        // query params
        if ($connect_mapping_type !== null) {
            $queryParams['ConnectMappingType'] = ObjectSerializer::toQueryValue($connect_mapping_type);
        }
        // query params
        if ($client_id !== null) {
            $queryParams['ClientId'] = ObjectSerializer::toQueryValue($client_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSearchBarcode
     *
     * Search Product Barcode
     *
     * @param  string $barcode Product Barcode can be SKU, EAN, UPC based (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productSearchBarcode($barcode)
    {
        $this->productSearchBarcodeWithHttpInfo($barcode);
    }

    /**
     * Operation productSearchBarcodeWithHttpInfo
     *
     * Search Product Barcode
     *
     * @param  string $barcode Product Barcode can be SKU, EAN, UPC based (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSearchBarcodeWithHttpInfo($barcode)
    {
        $returnType = '';
        $request = $this->productSearchBarcodeRequest($barcode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productSearchBarcodeAsync
     *
     * Search Product Barcode
     *
     * @param  string $barcode Product Barcode can be SKU, EAN, UPC based (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSearchBarcodeAsync($barcode)
    {
        return $this->productSearchBarcodeAsyncWithHttpInfo($barcode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSearchBarcodeAsyncWithHttpInfo
     *
     * Search Product Barcode
     *
     * @param  string $barcode Product Barcode can be SKU, EAN, UPC based (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSearchBarcodeAsyncWithHttpInfo($barcode)
    {
        $returnType = '';
        $request = $this->productSearchBarcodeRequest($barcode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSearchBarcode'
     *
     * @param  string $barcode Product Barcode can be SKU, EAN, UPC based (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productSearchBarcodeRequest($barcode)
    {
        // verify the required parameter 'barcode' is set
        if ($barcode === null || (is_array($barcode) && count($barcode) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $barcode when calling productSearchBarcode'
            );
        }

        $resourcePath = '/api/Product/SearchBarcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($barcode !== null) {
            $queryParams['Barcode'] = ObjectSerializer::toQueryValue($barcode);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productSearchProducts
     *
     * Product Search by SKU/Name
     *
     * @param  string $search Text to Search (required)
     * @param  bool $include_bundles Include Bundles in the search (optional)
     * @param  bool $include_discontinued Include products that have been discontinued in the search (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productSearchProducts($search, $include_bundles = null, $include_discontinued = null)
    {
        $this->productSearchProductsWithHttpInfo($search, $include_bundles, $include_discontinued);
    }

    /**
     * Operation productSearchProductsWithHttpInfo
     *
     * Product Search by SKU/Name
     *
     * @param  string $search Text to Search (required)
     * @param  bool $include_bundles Include Bundles in the search (optional)
     * @param  bool $include_discontinued Include products that have been discontinued in the search (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productSearchProductsWithHttpInfo($search, $include_bundles = null, $include_discontinued = null)
    {
        $returnType = '';
        $request = $this->productSearchProductsRequest($search, $include_bundles, $include_discontinued);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productSearchProductsAsync
     *
     * Product Search by SKU/Name
     *
     * @param  string $search Text to Search (required)
     * @param  bool $include_bundles Include Bundles in the search (optional)
     * @param  bool $include_discontinued Include products that have been discontinued in the search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSearchProductsAsync($search, $include_bundles = null, $include_discontinued = null)
    {
        return $this->productSearchProductsAsyncWithHttpInfo($search, $include_bundles, $include_discontinued)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productSearchProductsAsyncWithHttpInfo
     *
     * Product Search by SKU/Name
     *
     * @param  string $search Text to Search (required)
     * @param  bool $include_bundles Include Bundles in the search (optional)
     * @param  bool $include_discontinued Include products that have been discontinued in the search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productSearchProductsAsyncWithHttpInfo($search, $include_bundles = null, $include_discontinued = null)
    {
        $returnType = '';
        $request = $this->productSearchProductsRequest($search, $include_bundles, $include_discontinued);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productSearchProducts'
     *
     * @param  string $search Text to Search (required)
     * @param  bool $include_bundles Include Bundles in the search (optional)
     * @param  bool $include_discontinued Include products that have been discontinued in the search (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productSearchProductsRequest($search, $include_bundles = null, $include_discontinued = null)
    {
        // verify the required parameter 'search' is set
        if ($search === null || (is_array($search) && count($search) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $search when calling productSearchProducts'
            );
        }

        $resourcePath = '/api/Product/Search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search !== null) {
            $queryParams['Search'] = ObjectSerializer::toQueryValue($search);
        }
        // query params
        if ($include_bundles !== null) {
            $queryParams['IncludeBundles'] = ObjectSerializer::toQueryValue($include_bundles);
        }
        // query params
        if ($include_discontinued !== null) {
            $queryParams['IncludeDiscontinued'] = ObjectSerializer::toQueryValue($include_discontinued);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productStockLevelsByWarehouse
     *
     * Get Stock Levels By Warehouse
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3) (required)
     * @param  \DateTime $last_updated_since Filter list by LastUpdated time supplied so you only get one&#39;s that have changed since the supplied datetime (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function productStockLevelsByWarehouse($warehouse_id, $last_updated_since)
    {
        $this->productStockLevelsByWarehouseWithHttpInfo($warehouse_id, $last_updated_since);
    }

    /**
     * Operation productStockLevelsByWarehouseWithHttpInfo
     *
     * Get Stock Levels By Warehouse
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3) (required)
     * @param  \DateTime $last_updated_since Filter list by LastUpdated time supplied so you only get one&#39;s that have changed since the supplied datetime (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function productStockLevelsByWarehouseWithHttpInfo($warehouse_id, $last_updated_since)
    {
        $returnType = '';
        $request = $this->productStockLevelsByWarehouseRequest($warehouse_id, $last_updated_since);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productStockLevelsByWarehouseAsync
     *
     * Get Stock Levels By Warehouse
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3) (required)
     * @param  \DateTime $last_updated_since Filter list by LastUpdated time supplied so you only get one&#39;s that have changed since the supplied datetime (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productStockLevelsByWarehouseAsync($warehouse_id, $last_updated_since)
    {
        return $this->productStockLevelsByWarehouseAsyncWithHttpInfo($warehouse_id, $last_updated_since)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productStockLevelsByWarehouseAsyncWithHttpInfo
     *
     * Get Stock Levels By Warehouse
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3) (required)
     * @param  \DateTime $last_updated_since Filter list by LastUpdated time supplied so you only get one&#39;s that have changed since the supplied datetime (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function productStockLevelsByWarehouseAsyncWithHttpInfo($warehouse_id, $last_updated_since)
    {
        $returnType = '';
        $request = $this->productStockLevelsByWarehouseRequest($warehouse_id, $last_updated_since);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productStockLevelsByWarehouse'
     *
     * @param  int $warehouse_id WarehouseId that you want to get stock levels for (i.e 3 for warehouse 3) (required)
     * @param  \DateTime $last_updated_since Filter list by LastUpdated time supplied so you only get one&#39;s that have changed since the supplied datetime (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function productStockLevelsByWarehouseRequest($warehouse_id, $last_updated_since)
    {
        // verify the required parameter 'warehouse_id' is set
        if ($warehouse_id === null || (is_array($warehouse_id) && count($warehouse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_id when calling productStockLevelsByWarehouse'
            );
        }
        // verify the required parameter 'last_updated_since' is set
        if ($last_updated_since === null || (is_array($last_updated_since) && count($last_updated_since) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $last_updated_since when calling productStockLevelsByWarehouse'
            );
        }

        $resourcePath = '/api/Product/StockLevelsByWarehouse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_id !== null) {
            $queryParams['WarehouseId'] = ObjectSerializer::toQueryValue($warehouse_id);
        }
        // query params
        if ($last_updated_since !== null) {
            $queryParams['LastUpdatedSince'] = ObjectSerializer::toQueryValue($last_updated_since);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productUpdateProduct
     *
     * Update Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productUpdateProduct($product)
    {
        $this->productUpdateProductWithHttpInfo($product);
    }

    /**
     * Operation productUpdateProductWithHttpInfo
     *
     * Update Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productUpdateProductWithHttpInfo($product)
    {
        $returnType = '';
        $request = $this->productUpdateProductRequest($product);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productUpdateProductAsync
     *
     * Update Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productUpdateProductAsync($product)
    {
        return $this->productUpdateProductAsyncWithHttpInfo($product)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productUpdateProductAsyncWithHttpInfo
     *
     * Update Product
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productUpdateProductAsyncWithHttpInfo($product)
    {
        $returnType = '';
        $request = $this->productUpdateProductRequest($product);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productUpdateProduct'
     *
     * @param  \Swagger\Client\Model\MintsoftStockProduct $product Product (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productUpdateProductRequest($product)
    {
        // verify the required parameter 'product' is set
        if ($product === null || (is_array($product) && count($product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $product when calling productUpdateProduct'
            );
        }

        $resourcePath = '/api/Product';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($product)) {
            $_tempBody = $product;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation productUpdateProductPrices
     *
     * Add or Update Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Prices (required)
     *
     * @return void
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productUpdateProductPrices($prices)
    {
        $this->productUpdateProductPricesWithHttpInfo($prices);
    }

    /**
     * Operation productUpdateProductPricesWithHttpInfo
     *
     * Add or Update Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Prices (required)
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     *@throws \InvalidArgumentException
     * @throws \Swagger\Client\ApiException on non-2xx response
     */
    public function productUpdateProductPricesWithHttpInfo($prices)
    {
        $returnType = '';
        $request = $this->productUpdateProductPricesRequest($prices);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation productUpdateProductPricesAsync
     *
     * Add or Update Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Prices (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productUpdateProductPricesAsync($prices)
    {
        return $this->productUpdateProductPricesAsyncWithHttpInfo($prices)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation productUpdateProductPricesAsyncWithHttpInfo
     *
     * Add or Update Product Prices
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Prices (required)
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     *@throws \InvalidArgumentException
     */
    public function productUpdateProductPricesAsyncWithHttpInfo($prices)
    {
        $returnType = '';
        $request = $this->productUpdateProductPricesRequest($prices);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'productUpdateProductPrices'
     *
     * @param  \Swagger\Client\Model\MintsoftProductsAPINewProductPrice[] $prices Prices (required)
     *
     * @return \GuzzleHttp\Psr7\Request
     *@throws \InvalidArgumentException
     */
    protected function productUpdateProductPricesRequest($prices)
    {
        // verify the required parameter 'prices' is set
        if ($prices === null || (is_array($prices) && count($prices) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $prices when calling productUpdateProductPrices'
            );
        }

        $resourcePath = '/api/Product/ProductPrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($prices)) {
            $_tempBody = $prices;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
